[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,currentLocationWithNewZ = virtualinvoke $stack8.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>(location, 0, 0, 1, 0),27,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, currentLocationWithNewZ = virtualinvoke $stack8.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>(location, 0, 0, 1, 0), 27)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack13 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(currentLocationWithNewZ, $stack12),28,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack13 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(currentLocationWithNewZ, $stack12), 28)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(),374,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 374)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,currentLocationWithNewZ = virtualinvoke $stack8.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>(location, 0, 0, 1, 0),27,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, currentLocationWithNewZ = virtualinvoke $stack8.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>(location, 0, 0, 1, 0), 27)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack13 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(currentLocationWithNewZ, $stack12),28,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack13 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(currentLocationWithNewZ, $stack12), 28)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13),28,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 374
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 374
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 27
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 28
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 28
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 27
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 28
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack13 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(currentLocationWithNewZ, $stack12)",
				"location": {
					"file": "",
					"class": "org.openpnp.util.MovableUtils",
					"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
					"line": 28
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack25 = this.<org.openpnp.model.Length: double value>,125,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack25 = this.<org.openpnp.model.Length: double value>, 125)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack25 / 1000.0,125,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack25 / 1000.0, 125)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack25 = this.<org.openpnp.model.Length: double value>,125,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack25 = this.<org.openpnp.model.Length: double value>, 125))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 377
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 125
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 125
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 125
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "mm = $stack25 / 1000.0",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 125
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack8 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,109,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack8 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 109)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack8 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,109,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack8 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 109))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 376
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 109
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 109
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 109
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack33 = virtualinvoke $stack31.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack32),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack33 = virtualinvoke $stack31.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack32), 1237)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(),374,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 374)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 374
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 374
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack33 = virtualinvoke $stack31.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack32)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
					"line": 1237
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4),45,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,hm := @parameter0: org.openpnp.spi.HeadMountable,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,$stack2 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.spi.Head getHead()>(),45,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack2 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.spi.Head getHead()>(), 45))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 375
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": 45
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": 45
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4)",
				"location": {
					"file": "",
					"class": "org.openpnp.util.MovableUtils",
					"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
					"line": 45
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>,$stack11 = this.<org.openpnp.model.Location: double y>,376,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>, $stack11 = this.<org.openpnp.model.Location: double y>, 376)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,y := @parameter2: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, specialinvoke $stack3.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>(units, $stack8, $stack13, $stack18, $stack19), 93)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,this.<org.openpnp.model.Location: double y> = y,62,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack7, $stack9, $stack12, $stack15, $stack16), 356) => (<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)) => Node(<org.openpnp.model.Location: double getY()>,$stack1 = this.<org.openpnp.model.Location: double y>,74,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack88 = virtualinvoke $stack86.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>($stack87), 746) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>, tx = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: java.awt.geom.AffineTransform getMachineToFeederTransform()>(), 1833) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: java.awt.geom.AffineTransform getMachineToFeederTransform()>, $stack15 = virtualinvoke $stack13.<org.openpnp.model.Location: double getY()>(), 1816)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack43 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack42),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack43 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack42), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>,fiducial2Location := @parameter0: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>($stack16), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>(fiducial1Location, 1), 2164) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>(template), 2022) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>($stack5), 1974)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>,unitX = virtualinvoke $stack18.<org.openpnp.model.Location: org.openpnp.model.Location unitVectorTo(org.openpnp.model.Location)>(fiducial2Location),2201,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>($stack16), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>(fiducial1Location, 1), 2164) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>(template), 2022) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>($stack5), 1974) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>, unitX = virtualinvoke $stack18.<org.openpnp.model.Location: org.openpnp.model.Location unitVectorTo(org.openpnp.model.Location)>(fiducial2Location), 2201)) => Node(<org.openpnp.model.Location: double getY()>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack88 = virtualinvoke $stack86.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>($stack87), 746) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>, tx = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: java.awt.geom.AffineTransform getMachineToFeederTransform()>(), 1833) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: java.awt.geom.AffineTransform getMachineToFeederTransform()>, $stack15 = virtualinvoke $stack13.<org.openpnp.model.Location: double getY()>(), 1816)) => Node(<org.openpnp.model.Location: double getY()>,$stack1 = this.<org.openpnp.model.Location: double y>,74,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack88 = virtualinvoke $stack86.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>($stack87), 746) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>, tx = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: java.awt.geom.AffineTransform getMachineToFeederTransform()>(), 1833) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: java.awt.geom.AffineTransform getMachineToFeederTransform()>, $stack15 = virtualinvoke $stack13.<org.openpnp.model.Location: double getY()>(), 1816))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 375
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>",
	"line": 2201
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: double getY()>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: double getY()>",
	"line": 74
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>",
	"line": 376
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": 62
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: double getY()>",
	"line": 74
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = this.<org.openpnp.model.Location: double y>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: double getY()>",
					"line": 74
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,currentLocationWithNewZ = virtualinvoke $stack8.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>(location, 0, 0, 1, 0),27,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, currentLocationWithNewZ = virtualinvoke $stack8.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>(location, 0, 0, 1, 0), 27)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,hm := @parameter0: org.openpnp.spi.HeadMountable,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,hm := @parameter0: org.openpnp.spi.HeadMountable,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack8 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.Location getLocation()>(),27,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack8 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.Location getLocation()>(), 27))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 377
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 27
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 27
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "currentLocationWithNewZ = virtualinvoke $stack8.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>(location, 0, 0, 1, 0)",
				"location": {
					"file": "",
					"class": "org.openpnp.util.MovableUtils",
					"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
					"line": 27
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(),374,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 374)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 374
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 374
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
					"line": 1217
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack55 = this.<org.openpnp.model.Length: double value>,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack55 = this.<org.openpnp.model.Length: double value>, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack56 = $stack55 * 25.4,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack56 = $stack55 * 25.4, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack56 * 12.0,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack56 * 12.0, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack50 = mm / 10.0,136,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack50 = mm / 10.0, 136)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack59 = this.<org.openpnp.model.Length: double value>,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack59 = this.<org.openpnp.model.Length: double value>, 110)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack59 * 10.0,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack59 * 10.0, 110)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack50 = mm / 10.0,136,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack50 = mm / 10.0, 136))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 377
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 136
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 136
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack50 = mm / 10.0",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 136
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>,$stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),765,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.model.Location: boolean isInitialized()>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211)) => Node(<org.openpnp.model.Location: boolean equals(java.lang.Object)>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486)) => Node(<org.openpnp.model.Location: boolean equals(java.lang.Object)>,$stack4 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>,461,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, $stack4 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>, 461)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>,units := @parameter0: org.openpnp.model.LengthUnit,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>,$stack17 = virtualinvoke $stack14.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units),93,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack17 = virtualinvoke $stack14.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 93)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>,$stack18 = virtualinvoke $stack17.<org.openpnp.model.Length: double getValue()>(),93,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack18 = virtualinvoke $stack17.<org.openpnp.model.Length: double getValue()>(), 93)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,z := @parameter3: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, specialinvoke $stack3.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>(units, $stack8, $stack13, $stack18, $stack19), 93)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,this.<org.openpnp.model.Location: double z> = z,63,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack7, $stack9, $stack12, $stack15, $stack16), 356) => (<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double z> = z, 63)) => Node(<org.openpnp.model.Location: double getZ()>,$stack1 = this.<org.openpnp.model.Location: double z>,78,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack88 = virtualinvoke $stack86.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>($stack87), 746) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>, $stack21 = virtualinvoke machineLocation#2.<org.openpnp.model.Location: double getZ()>(), 1839)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>,$stack13 = virtualinvoke l#2.<org.openpnp.model.Location: double getZ()>(),222,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack350 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelLocation(org.openpnp.spi.Camera,double,double)>($stack348, $stack347, $stack346), 776) => (<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelLocation(org.openpnp.spi.Camera,double,double)>, $stack7 = virtualinvoke $stack5.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack6), 78) => (<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack13 = virtualinvoke l#2.<org.openpnp.model.Location: double getZ()>(), 222)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>,$stack15 = $stack12 + $stack13,222,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack350 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelLocation(org.openpnp.spi.Camera,double,double)>($stack348, $stack347, $stack346), 776) => (<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelLocation(org.openpnp.spi.Camera,double,double)>, $stack7 = virtualinvoke $stack5.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack6), 78) => (<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack15 = $stack12 + $stack13, 222)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack43 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack42),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack43 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack42), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>,fiducial2Location := @parameter0: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>($stack16), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>(fiducial1Location, 1), 2164) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>(template), 2022) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>($stack5), 1974)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack350 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelLocation(org.openpnp.spi.Camera,double,double)>($stack348, $stack347, $stack346), 776) => (<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelLocation(org.openpnp.spi.Camera,double,double)>, $stack7 = virtualinvoke $stack5.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack6), 78)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>,$stack14 = this.<org.openpnp.model.Location: double rotation>,222,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack350 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelLocation(org.openpnp.spi.Camera,double,double)>($stack348, $stack347, $stack346), 776) => (<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelLocation(org.openpnp.spi.Camera,double,double)>, $stack7 = virtualinvoke $stack5.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack6), 78) => (<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack14 = this.<org.openpnp.model.Location: double rotation>, 222))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 375
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
	"line": 222
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>",
	"line": 765
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: boolean isInitialized()>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: boolean equals(java.lang.Object)>",
	"line": 461
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 93
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 93
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": 63
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: double getZ()>",
	"line": 78
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
	"line": 222
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
	"line": 222
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack15 = $stack12 + $stack13",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
					"line": 222
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack12 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,115,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack12 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 115)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(),374,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 374)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack12 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,115,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack12 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 115))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 374
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 374
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 115
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 115
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack12 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 115
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack18 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,124,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack18 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 124)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack18 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,124,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack18 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 124))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
					"line": 1263
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 124
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 124
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack18 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 124
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = this.<org.openpnp.model.Length: double value>,107,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = this.<org.openpnp.model.Length: double value>, 107)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = this.<org.openpnp.model.Length: double value>,107,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = this.<org.openpnp.model.Length: double value>, 107))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 376
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 107
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 107
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "mm = this.<org.openpnp.model.Length: double value>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 107
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack55 = this.<org.openpnp.model.Length: double value>,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack55 = this.<org.openpnp.model.Length: double value>, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack56 = $stack55 * 25.4,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack56 = $stack55 * 25.4, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack56 * 12.0,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack56 * 12.0, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack43 = mm * 0.03937007874015748,145,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack43 = mm * 0.03937007874015748, 145)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack59 = this.<org.openpnp.model.Length: double value>,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack59 = this.<org.openpnp.model.Length: double value>, 110)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack59 * 10.0,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack59 * 10.0, 110)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack43 = mm * 0.03937007874015748,145,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack43 = mm * 0.03937007874015748, 145))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 375
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 145
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 145
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack43 = mm * 0.03937007874015748",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 145
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack57 = this.<org.openpnp.model.Length: double value>,116,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack57 = this.<org.openpnp.model.Length: double value>, 116)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack57 = this.<org.openpnp.model.Length: double value>,116,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack57 = this.<org.openpnp.model.Length: double value>, 116)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack57 * 25.4,116,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack57 * 25.4, 116))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 376
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 116
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 116
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 116
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack57 = this.<org.openpnp.model.Length: double value>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 116
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack6 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,106,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack6 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 106)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack6 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,106,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack6 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 106))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 375
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 106
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 106
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack6 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 106
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack20 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack19, null), 38)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,$stack13 = this.<org.openpnp.model.Location: double z>,332,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack20 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack19, null), 38) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack13 = this.<org.openpnp.model.Location: double z>, 332)) SINK=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>,495,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack12 = virtualinvoke $stack11.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 1257)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack20 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack19, null), 38)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,$stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>,332,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack20 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack19, null), 38) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>, 332))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
					"line": 495
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
	"line": 495
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": 332
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": 332
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack13 = this.<org.openpnp.model.Location: double z>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
					"line": 332
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack55 = this.<org.openpnp.model.Length: double value>,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack55 = this.<org.openpnp.model.Length: double value>, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack56 = $stack55 * 25.4,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack56 = $stack55 * 25.4, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack56 * 12.0,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack56 * 12.0, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack48 = mm / 1000.0,139,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack48 = mm / 1000.0, 139)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack59 = this.<org.openpnp.model.Length: double value>,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack59 = this.<org.openpnp.model.Length: double value>, 110)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack59 * 10.0,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack59 * 10.0, 110)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack48 = mm / 1000.0,139,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack48 = mm / 1000.0, 139))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 377
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 139
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 139
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack48 = mm / 1000.0",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 139
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double,org.openpnp.model.Motion$MotionOption[])>(location, speed, $stack15),41,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double,org.openpnp.model.Motion$MotionOption[])>(location, speed, $stack15), 41)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double,org.openpnp.model.Motion$MotionOption[])>(location, speed, $stack15),41,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double,org.openpnp.model.Motion$MotionOption[])>(location, speed, $stack15), 41))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
					"line": 1263
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 41
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 41
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double,org.openpnp.model.Motion$MotionOption[])>(location, speed, $stack15)",
				"location": {
					"file": "",
					"class": "org.openpnp.util.MovableUtils",
					"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
					"line": 41
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack22 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,128,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack22 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 128)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertLength() unrecognized units "),128,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('convertLength() unrecognized units '), 128)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack22),128,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack22), 128)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(),128,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 128)) SINK=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>,495,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack12 = virtualinvoke $stack11.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 1257)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack22 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,128,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack22 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 128)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertLength() unrecognized units "),128,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('convertLength() unrecognized units '), 128)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack22),128,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack22), 128)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(),128,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 128)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,specialinvoke $stack19.<java.lang.Error: void <init>(java.lang.String)>($stack24),128,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, specialinvoke $stack19.<java.lang.Error: void <init>(java.lang.String)>($stack24), 128))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
					"line": 495
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
	"line": 495
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 128
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 128
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 128
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 128
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 128
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 128
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 128
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 128
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 128
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 128
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack55 = this.<org.openpnp.model.Length: double value>,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack55 = this.<org.openpnp.model.Length: double value>, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack56 = $stack55 * 25.4,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack56 = $stack55 * 25.4, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack56 * 12.0,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack56 * 12.0, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack46 = mm * 0.03937007874015748,142,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack46 = mm * 0.03937007874015748, 142)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(),374,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 374)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack59 = this.<org.openpnp.model.Length: double value>,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack59 = this.<org.openpnp.model.Length: double value>, 110)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack59 * 10.0,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack59 * 10.0, 110)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack46 = mm * 0.03937007874015748,142,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack46 = mm * 0.03937007874015748, 142))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 374
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 374
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 142
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 142
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack46 = mm * 0.03937007874015748",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 142
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,i#6 = location#2,1250,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,i#6 = location#2,1250,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 375
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1250
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1250
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "i#6 = location#2",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
					"line": 1250
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack4 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,101,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack4 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 101)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack4 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,101,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack4 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 101))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 377
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 101
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 101
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 101
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2),1222,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2),1222,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
					"line": 1263
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1222
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1222
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
					"line": 1222
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack52 = this.<org.openpnp.model.Length: double value>,122,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack52 = this.<org.openpnp.model.Length: double value>, 122)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack52 = this.<org.openpnp.model.Length: double value>,122,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack52 = this.<org.openpnp.model.Length: double value>, 122)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack53 = $stack52 / 1000.0,122,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack53 = $stack52 / 1000.0, 122))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
					"line": 1263
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 122
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 122
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 122
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack52 = this.<org.openpnp.model.Length: double value>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 122
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10),28,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,this := @this: org.openpnp.model.AxesLocation,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack8 = virtualinvoke this.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis),374,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack8 = virtualinvoke this.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis), 374)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10),28,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,this := @this: org.openpnp.model.AxesLocation,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack8 = virtualinvoke this.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis),374,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack8 = virtualinvoke this.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis), 374))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 377
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 28
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": -1
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 374
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 28
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": -1
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 374
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = virtualinvoke this.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis)",
				"location": {
					"file": "",
					"class": "org.openpnp.model.AxesLocation",
					"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
					"line": 374
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack43 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack42),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack43 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack42), 1267)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack43 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack42),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack43 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack42), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>($stack43),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>($stack43), 1267))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 375
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack43 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack42)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
					"line": 1267
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack55 = this.<org.openpnp.model.Length: double value>,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack55 = this.<org.openpnp.model.Length: double value>, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack56 = $stack55 * 25.4,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack56 = $stack55 * 25.4, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack56 * 12.0,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack56 * 12.0, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack41 = mm * 39.37007874015748,148,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack41 = mm * 39.37007874015748, 148)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack59 = this.<org.openpnp.model.Length: double value>,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack59 = this.<org.openpnp.model.Length: double value>, 110)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack59 * 10.0,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack59 * 10.0, 110)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack41 = mm * 39.37007874015748,148,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack41 = mm * 39.37007874015748, 148))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
					"line": 1263
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 148
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 148
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack41 = mm * 39.37007874015748",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 148
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack10 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,112,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack10 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 112)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack10 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,112,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack10 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 112))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 375
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 112
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 112
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 112
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10),28,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,this := @this: org.openpnp.model.AxesLocation,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack4 = virtualinvoke this.<org.openpnp.model.AxesLocation: java.util.LinkedHashSet getAxes(java.lang.Class)>(class "Lorg/openpnp/spi/CoordinateAxis;"),372,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack4 = virtualinvoke this.<org.openpnp.model.AxesLocation: java.util.LinkedHashSet getAxes(java.lang.Class)>(class 'Lorg/openpnp/spi/CoordinateAxis;'), 372)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,l2 = virtualinvoke $stack4.<java.util.LinkedHashSet: java.util.Iterator iterator()>(),372,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, l2 = virtualinvoke $stack4.<java.util.LinkedHashSet: java.util.Iterator iterator()>(), 372)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),379,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 379)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10),28,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,this := @this: org.openpnp.model.AxesLocation,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack4 = virtualinvoke this.<org.openpnp.model.AxesLocation: java.util.LinkedHashSet getAxes(java.lang.Class)>(class "Lorg/openpnp/spi/CoordinateAxis;"),372,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack4 = virtualinvoke this.<org.openpnp.model.AxesLocation: java.util.LinkedHashSet getAxes(java.lang.Class)>(class 'Lorg/openpnp/spi/CoordinateAxis;'), 372)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,l2 = virtualinvoke $stack4.<java.util.LinkedHashSet: java.util.Iterator iterator()>(),372,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, l2 = virtualinvoke $stack4.<java.util.LinkedHashSet: java.util.Iterator iterator()>(), 372)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),379,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 379))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 377
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 28
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": -1
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 372
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 372
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 379
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 28
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": -1
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 372
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 372
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 379
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.model.AxesLocation",
					"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
					"line": 379
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10),28,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,this := @this: org.openpnp.model.AxesLocation,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack4 = virtualinvoke this.<org.openpnp.model.AxesLocation: java.util.LinkedHashSet getAxes(java.lang.Class)>(class "Lorg/openpnp/spi/CoordinateAxis;"),372,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack4 = virtualinvoke this.<org.openpnp.model.AxesLocation: java.util.LinkedHashSet getAxes(java.lang.Class)>(class 'Lorg/openpnp/spi/CoordinateAxis;'), 372)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,l2 = virtualinvoke $stack4.<java.util.LinkedHashSet: java.util.Iterator iterator()>(),372,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, l2 = virtualinvoke $stack4.<java.util.LinkedHashSet: java.util.Iterator iterator()>(), 372)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),379,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 379)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,axis = (org.openpnp.spi.CoordinateAxis) $stack7,379,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, axis = (org.openpnp.spi.CoordinateAxis) $stack7, 379)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack9 = virtualinvoke other.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis),375,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack9 = virtualinvoke other.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis), 375)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,currentLocationWithNewZ = virtualinvoke $stack8.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>(location, 0, 0, 1, 0),27,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, currentLocationWithNewZ = virtualinvoke $stack8.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>(location, 0, 0, 1, 0), 27)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack13 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(currentLocationWithNewZ, $stack12),28,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack13 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(currentLocationWithNewZ, $stack12), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,other := @parameter0: org.openpnp.model.AxesLocation,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack9 = virtualinvoke other.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis),375,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack9 = virtualinvoke other.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis), 375))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 376
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 27
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 28
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": -1
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 375
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 28
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": -1
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 372
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 372
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 379
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 379
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 375
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack9 = virtualinvoke other.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis)",
				"location": {
					"file": "",
					"class": "org.openpnp.model.AxesLocation",
					"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
					"line": 375
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack20 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack19, null), 38)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,$stack17 = this.<org.openpnp.model.Location: double y>,333,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack20 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack19, null), 38) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack17 = this.<org.openpnp.model.Location: double y>, 333)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack20 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack19, null), 38)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,$stack17 = this.<org.openpnp.model.Location: double y>,333,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack20 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack19, null), 38) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack17 = this.<org.openpnp.model.Location: double y>, 333))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 376
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": 333
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": 333
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack17 = this.<org.openpnp.model.Location: double y>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
					"line": 333
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack58 = this.<org.openpnp.model.Length: double value>,113,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack58 = this.<org.openpnp.model.Length: double value>, 113)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack58 * 1000.0,113,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack58 * 1000.0, 113)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack58 = this.<org.openpnp.model.Length: double value>,113,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack58 = this.<org.openpnp.model.Length: double value>, 113)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack58 * 1000.0,113,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack58 * 1000.0, 113))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
					"line": 1263
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 113
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 113
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 113
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 113
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "mm = $stack58 * 1000.0",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 113
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>,$stack11 = this.<org.openpnp.model.Location: double y>,376,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>, $stack11 = this.<org.openpnp.model.Location: double y>, 376)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,hm := @parameter0: org.openpnp.spi.HeadMountable,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,hm := @parameter0: org.openpnp.spi.HeadMountable,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack8 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.Location getLocation()>(),27,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack8 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.Location getLocation()>(), 27)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>,$stack12 = this.<org.openpnp.model.Location: double x>,376,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>, $stack12 = this.<org.openpnp.model.Location: double x>, 376))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 376
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 27
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>",
	"line": 376
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>",
	"line": 376
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack11 = this.<org.openpnp.model.Location: double y>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>",
					"line": 376
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack55 = this.<org.openpnp.model.Length: double value>,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack55 = this.<org.openpnp.model.Length: double value>, 119)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(),374,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 374)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack55 = this.<org.openpnp.model.Length: double value>,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack55 = this.<org.openpnp.model.Length: double value>, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack56 = $stack55 * 25.4,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack56 = $stack55 * 25.4, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack56 * 12.0,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack56 * 12.0, 119))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 374
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 374
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack55 = this.<org.openpnp.model.Length: double value>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 119
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack16 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,121,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack16 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 121)) SINK=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>,495,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack12 = virtualinvoke $stack11.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 1257)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack16 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,121,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack16 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 121))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
					"line": 495
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
	"line": 495
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 121
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 121
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack16 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 121
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10),28,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,this := @this: org.openpnp.model.AxesLocation,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack4 = virtualinvoke this.<org.openpnp.model.AxesLocation: java.util.LinkedHashSet getAxes(java.lang.Class)>(class "Lorg/openpnp/spi/CoordinateAxis;"),372,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack4 = virtualinvoke this.<org.openpnp.model.AxesLocation: java.util.LinkedHashSet getAxes(java.lang.Class)>(class 'Lorg/openpnp/spi/CoordinateAxis;'), 372)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,l2 = virtualinvoke $stack4.<java.util.LinkedHashSet: java.util.Iterator iterator()>(),372,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, l2 = virtualinvoke $stack4.<java.util.LinkedHashSet: java.util.Iterator iterator()>(), 372)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),372,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 372)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10),28,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,this := @this: org.openpnp.model.AxesLocation,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack4 = virtualinvoke this.<org.openpnp.model.AxesLocation: java.util.LinkedHashSet getAxes(java.lang.Class)>(class "Lorg/openpnp/spi/CoordinateAxis;"),372,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack4 = virtualinvoke this.<org.openpnp.model.AxesLocation: java.util.LinkedHashSet getAxes(java.lang.Class)>(class 'Lorg/openpnp/spi/CoordinateAxis;'), 372)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,l2 = virtualinvoke $stack4.<java.util.LinkedHashSet: java.util.Iterator iterator()>(),372,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, l2 = virtualinvoke $stack4.<java.util.LinkedHashSet: java.util.Iterator iterator()>(), 372)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),372,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 372))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 375
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 28
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": -1
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 372
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 372
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 372
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 28
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": -1
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 372
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 372
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 372
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.model.AxesLocation",
					"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
					"line": 372
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack59 = this.<org.openpnp.model.Length: double value>,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack59 = this.<org.openpnp.model.Length: double value>, 110)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack59 = this.<org.openpnp.model.Length: double value>,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack59 = this.<org.openpnp.model.Length: double value>, 110))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
					"line": 1263
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack59 = this.<org.openpnp.model.Length: double value>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 110
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack14 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,118,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack14 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 118)) SINK=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>,495,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack12 = virtualinvoke $stack11.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 1257)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack14 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,118,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack14 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 118))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
					"line": 495
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
	"line": 495
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 118
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 118
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack14 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 118
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10),28,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack11 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(location, $stack10), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,this := @this: org.openpnp.model.AxesLocation,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack8 = virtualinvoke this.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis),374,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack8 = virtualinvoke this.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis), 374)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack10 = interfaceinvoke axis.<org.openpnp.spi.CoordinateAxis: boolean coordinatesMatch(org.openpnp.model.Length,org.openpnp.model.Length)>($stack8, $stack9),373,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack10 = interfaceinvoke axis.<org.openpnp.spi.CoordinateAxis: boolean coordinatesMatch(org.openpnp.model.Length,org.openpnp.model.Length)>($stack8, $stack9), 373)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,currentLocationWithNewZ = virtualinvoke $stack8.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>(location, 0, 0, 1, 0),27,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, currentLocationWithNewZ = virtualinvoke $stack8.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>(location, 0, 0, 1, 0), 27)) => Node(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>,$stack13 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(currentLocationWithNewZ, $stack12),28,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack13 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.model.AxesLocation toRaw(org.openpnp.model.Location,org.openpnp.spi.Locatable$LocationOption[])>(currentLocationWithNewZ, $stack12), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,other := @parameter0: org.openpnp.model.AxesLocation,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack9 = virtualinvoke other.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis),375,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack9 = virtualinvoke other.<org.openpnp.model.AxesLocation: org.openpnp.model.Length getLengthCoordinate(org.openpnp.spi.Axis)>(axis), 375)) => Node(<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>,$stack10 = interfaceinvoke axis.<org.openpnp.spi.CoordinateAxis: boolean coordinatesMatch(org.openpnp.model.Length,org.openpnp.model.Length)>($stack8, $stack9),373,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, location#2), 1222) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 45) => (<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack14 = virtualinvoke $stack11.<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>($stack13), 28) => (<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>, $stack10 = interfaceinvoke axis.<org.openpnp.spi.CoordinateAxis: boolean coordinatesMatch(org.openpnp.model.Length,org.openpnp.model.Length)>($stack8, $stack9), 373))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 376
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 27
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 28
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": -1
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 375
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 373
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
	"line": 28
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": -1
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 374
},{
	"class": "org.openpnp.model.AxesLocation",
	"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
	"line": 373
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = interfaceinvoke axis.<org.openpnp.spi.CoordinateAxis: boolean coordinatesMatch(org.openpnp.model.Length,org.openpnp.model.Length)>($stack8, $stack9)",
				"location": {
					"file": "",
					"class": "org.openpnp.model.AxesLocation",
					"method": "<org.openpnp.model.AxesLocation: boolean matches(org.openpnp.model.AxesLocation)>",
					"line": 373
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>,$stack11 = this.<org.openpnp.model.Location: double y>,376,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>, $stack11 = this.<org.openpnp.model.Location: double y>, 376)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,y := @parameter2: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, specialinvoke $stack3.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>(units, $stack8, $stack13, $stack18, $stack19), 93)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,this.<org.openpnp.model.Location: double y> = y,62,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack7, $stack9, $stack12, $stack15, $stack16), 356) => (<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)) => Node(<org.openpnp.model.Location: double getY()>,$stack1 = this.<org.openpnp.model.Location: double y>,74,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack88 = virtualinvoke $stack86.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>($stack87), 746) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>, tx = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: java.awt.geom.AffineTransform getMachineToFeederTransform()>(), 1833) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: java.awt.geom.AffineTransform getMachineToFeederTransform()>, $stack15 = virtualinvoke $stack13.<org.openpnp.model.Location: double getY()>(), 1816)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>,$stack22 = virtualinvoke unitX.<org.openpnp.model.Location: double getY()>(),2202,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>($stack16), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>(fiducial1Location, 1), 2164) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>(template), 2022) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>($stack5), 1974) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>, $stack22 = virtualinvoke unitX.<org.openpnp.model.Location: double getY()>(), 2202)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),375,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(),376,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>(),377,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack43 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack42),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack43 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack42), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>,fiducial2Location := @parameter0: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>($stack16), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>(fiducial1Location, 1), 2164) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>(template), 2022) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>($stack5), 1974)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>,unitX = virtualinvoke $stack18.<org.openpnp.model.Location: org.openpnp.model.Location unitVectorTo(org.openpnp.model.Location)>(fiducial2Location),2201,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>($stack16), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>(fiducial1Location, 1), 2164) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>(template), 2022) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>($stack5), 1974) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>, unitX = virtualinvoke $stack18.<org.openpnp.model.Location: org.openpnp.model.Location unitVectorTo(org.openpnp.model.Location)>(fiducial2Location), 2201)) => Node(<org.openpnp.model.Location: double getY()>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack88 = virtualinvoke $stack86.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>($stack87), 746) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>, tx = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: java.awt.geom.AffineTransform getMachineToFeederTransform()>(), 1833) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: java.awt.geom.AffineTransform getMachineToFeederTransform()>, $stack15 = virtualinvoke $stack13.<org.openpnp.model.Location: double getY()>(), 1816)) => Node(<org.openpnp.model.Location: double getY()>,$stack1 = this.<org.openpnp.model.Location: double y>,74,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack88 = virtualinvoke $stack86.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>($stack87), 746) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location transformMachineToFeederLocation(org.openpnp.model.Location)>, tx = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: java.awt.geom.AffineTransform getMachineToFeederTransform()>(), 1833) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: java.awt.geom.AffineTransform getMachineToFeederTransform()>, $stack15 = virtualinvoke $stack13.<org.openpnp.model.Location: double getY()>(), 1816)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>,$stack22 = virtualinvoke unitX.<org.openpnp.model.Location: double getY()>(),2202,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>($stack16), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>(fiducial1Location, 1), 2164) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>(template), 2022) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>($stack5), 1974) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>, $stack22 = virtualinvoke unitX.<org.openpnp.model.Location: double getY()>(), 2202)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>,$stack23 = neg $stack22,2202,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>($stack16), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial1Location(org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>(fiducial1Location, 1), 2164) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.machine.reference.feeder.BlindsFeeder updateFromConnectedFeeder(org.openpnp.model.Location,boolean)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>(template), 2022) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void updateFromConnectedFeeder(org.openpnp.machine.reference.feeder.BlindsFeeder)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>($stack5), 1974) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>, $stack23 = neg $stack22, 2202))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
					"line": 375
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 375
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 376
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
	"line": 377
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>",
	"line": 2201
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: double getY()>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: double getY()>",
	"line": 74
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>",
	"line": 2202
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>",
	"line": 2202
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>",
	"line": 376
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": 62
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: double getY()>",
	"line": 74
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>",
	"line": 2202
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack22 = virtualinvoke unitX.<org.openpnp.model.Location: double getY()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void setFiducial2Location(org.openpnp.model.Location)>",
					"line": 2202
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>,$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>,2186,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, findFeaturesResults = virtualinvoke $stack21.<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>(), 1229) => (<org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures: org.openpnp.machine.reference.feeder.BlindsFeeder$FindFeatures invoke()>, $stack505 = virtualinvoke $stack504.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 765)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,$stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(),1267,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack42 = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>(), 1267)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location := @parameter1: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack55 = this.<org.openpnp.model.Length: double value>,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack55 = this.<org.openpnp.model.Length: double value>, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack56 = $stack55 * 25.4,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack56 = $stack55 * 25.4, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack56 * 12.0,119,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack56 * 12.0, 119)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack39 = mm * 1000.0,151,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack39 = mm * 1000.0, 151)) SINK=>BASE: Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>,camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(),1263,SourceNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,camera := @parameter0: org.openpnp.spi.Camera,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0),1217,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, location#2 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(org.openpnp.model.Location,boolean,boolean,boolean,boolean)>($stack15, 0, 0, 1, 0), 1217)) => Node(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>,$stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2),1237,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack31 = virtualinvoke bestFiducialLocation.<org.openpnp.model.Location: org.openpnp.model.Length getLinearLengthTo(org.openpnp.model.Location)>(location#2), 1237)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, $stack14 = virtualinvoke location.<org.openpnp.model.Location: boolean isInitialized()>(), 1211) => (<org.openpnp.model.Location: boolean isInitialized()>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: boolean equals(java.lang.Object)>($stack1), 486) => (<org.openpnp.model.Location: boolean equals(java.lang.Object)>, that = virtualinvoke that.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack4), 461) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 91)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack59 = this.<org.openpnp.model.Length: double value>,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack59 = this.<org.openpnp.model.Length: double value>, 110)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,mm = $stack59 * 10.0,110,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack59 * 10.0, 110)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack39 = mm * 1000.0,151,SinkNode, path: (<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack16 = specialinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, $stack15), 1264) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>, virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>(camera), 1216) => (<org.openpnp.machine.reference.feeder.BlindsFeeder: void ensureCameraZ(org.openpnp.spi.Camera)>, $stack11 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>(null, null, $stack10, null), 1061) => (<org.openpnp.model.Location: org.openpnp.model.Location deriveLengths(org.openpnp.model.Length,org.openpnp.model.Length,org.openpnp.model.Length,java.lang.Double)>, $stack8 = virtualinvoke x.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack6), 353) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack39 = mm * 1000.0, 151))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
					"line": 1263
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1263
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 110
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 151
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location fiducial2Location>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
					"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
					"line": 2186
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location getFiducial2Location()>",
	"line": 2186
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
	"line": 1267
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1217
},{
	"class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
	"method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.model.Location locateFiducial(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
	"line": 1237
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 119
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 151
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack39 = mm * 1000.0",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 151
				}
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
  "line": "375"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)","(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
  "line": "376"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)","(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
  "line": "377"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
  "line": "1263"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = interfaceinvoke camera.<org.openpnp.spi.Camera: boolean isReachable(org.openpnp.model.Location)>($stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
  "line": "1266"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack20 = interfaceinvoke camera.<org.openpnp.spi.Camera: boolean isReachable(org.openpnp.model.Location)>($stack19), 1266)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
  "line": "376"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)","(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
  "line": "377"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
  "line": "1263"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = interfaceinvoke camera.<org.openpnp.spi.Camera: boolean isReachable(org.openpnp.model.Location)>($stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
  "line": "1266"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack20 = interfaceinvoke camera.<org.openpnp.spi.Camera: boolean isReachable(org.openpnp.model.Location)>($stack19), 1266)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
  "line": "1263"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = interfaceinvoke camera.<org.openpnp.spi.Camera: boolean isReachable(org.openpnp.model.Location)>($stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
  "line": "1266"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack20 = interfaceinvoke camera.<org.openpnp.spi.Camera: boolean isReachable(org.openpnp.model.Location)>($stack19), 1266)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "495"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack12 = virtualinvoke $stack11.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 1257)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
  "line": "375"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)","(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
  "line": "376"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)","(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
  "line": "377"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
  "line": "1263"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = interfaceinvoke camera.<org.openpnp.spi.Camera: boolean isReachable(org.openpnp.model.Location)>($stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
  "line": "1266"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack20 = interfaceinvoke camera.<org.openpnp.spi.Camera: boolean isReachable(org.openpnp.model.Location)>($stack19), 1266)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
  "line": "374"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)","(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 374)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
  "line": "375"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)","(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 375)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
  "line": "376"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)","(<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: org.openpnp.spi.Head getDefaultHead()>(), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
  "line": "377"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
  "line": "1263"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = interfaceinvoke camera.<org.openpnp.spi.Camera: boolean isReachable(org.openpnp.model.Location)>($stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
  "line": "1266"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack20 = interfaceinvoke camera.<org.openpnp.spi.Camera: boolean isReachable(org.openpnp.model.Location)>($stack19), 1266)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Camera getDefaultCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>",
  "line": "377"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
  "line": "1263"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, camera = virtualinvoke this.<org.openpnp.machine.reference.feeder.BlindsFeeder: org.openpnp.spi.Camera getCamera()>(), 1263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = interfaceinvoke camera.<org.openpnp.spi.Camera: boolean isReachable(org.openpnp.model.Location)>($stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.feeder.BlindsFeeder",
  "method": "<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>",
  "line": "1266"
},
"stackTrace": ["(<org.openpnp.machine.reference.feeder.BlindsFeeder: void calibrateFeederLocations()>, $stack20 = interfaceinvoke camera.<org.openpnp.spi.Camera: boolean isReachable(org.openpnp.model.Location)>($stack19), 1266)"]
}]
}
}

]
