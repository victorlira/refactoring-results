Running soot scenario jsondiff;foodev.jsondiff.JsonPatch;apply(JsonObject, JsonObject);cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jsondiff/cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769/original-without-dependencies/jsondiff-1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,46300
Time to perform Confluence 1 Inter 0,81600
Configure Soot Confluence 2 Inter 0,30700
Time to perform Confluence 2 Inter 0,78300
Visited methods: 48
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jsondiff/cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769/original-without-dependencies/jsondiff-1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,56500
Runtime: 0.05s
Time to perform OA Inter 0,76100
OA Inter Visited methods: 129
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jsondiff/cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769/original-without-dependencies/jsondiff-1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,43400
Time to perform DFP Inter 0,91400
Depth limit: 5
CONFLICTS: DF interference in <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,$stack1 = this.<foodev.jsondiff.JsonPatch$Instruction: char oper>,377,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196) => (<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>, $stack1 = this.<foodev.jsondiff.JsonPatch$Instruction: char oper>, 377)) => Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,if $stack1 != 46 goto $stack2 = 0,377,SinkNode, path: ))]
Visited methods: 24
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jsondiff/cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769/original-without-dependencies/jsondiff-1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,51900
Time to perform DFP Inter 0,84400
Depth limit: 5
CONFLICTS: DF interference in <foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,l5 = virtualinvoke instructions.<java.util.TreeSet: java.util.Iterator iterator()>(),106,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, l5 = virtualinvoke instructions.<java.util.TreeSet: java.util.Iterator iterator()>(), 106)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(),215,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), 215)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,entry#12 = (foodev.jsondiff.JsonPatch$Instruction) $stack23,215,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, entry#12 = (foodev.jsondiff.JsonPatch$Instruction) $stack23, 215)) => Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,this := @this: foodev.jsondiff.JsonPatch$Instruction,-1,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196)) => Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,$stack1 = this.<foodev.jsondiff.JsonPatch$Instruction: char oper>,377,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196) => (<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>, $stack1 = this.<foodev.jsondiff.JsonPatch$Instruction: char oper>, 377)) => Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,if $stack1 != 46 goto $stack2 = 0,377,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,instructions = $stack17,100,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, instructions = $stack17, 100)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,l5 = virtualinvoke instructions.<java.util.TreeSet: java.util.Iterator iterator()>(),106,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, l5 = virtualinvoke instructions.<java.util.TreeSet: java.util.Iterator iterator()>(), 106)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(),215,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), 215)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,entry#12 = (foodev.jsondiff.JsonPatch$Instruction) $stack23,215,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, entry#12 = (foodev.jsondiff.JsonPatch$Instruction) $stack23, 215)) => Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,this := @this: foodev.jsondiff.JsonPatch$Instruction,-1,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196)) => Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,$stack1 = this.<foodev.jsondiff.JsonPatch$Instruction: char oper>,377,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196) => (<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>, $stack1 = this.<foodev.jsondiff.JsonPatch$Instruction: char oper>, 377)) => Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,if $stack1 != 46 goto $stack2 = 0,377,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,instructions = $stack17,100,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, instructions = $stack17, 100)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,l5 = virtualinvoke instructions.<java.util.TreeSet: java.util.Iterator iterator()>(),106,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, l5 = virtualinvoke instructions.<java.util.TreeSet: java.util.Iterator iterator()>(), 106)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(),215,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), 215)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,entry#12 = (foodev.jsondiff.JsonPatch$Instruction) $stack23,215,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, entry#12 = (foodev.jsondiff.JsonPatch$Instruction) $stack23, 215)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(),196,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,$stack2 = 1,377,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(),196,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,l5 = virtualinvoke instructions.<java.util.TreeSet: java.util.Iterator iterator()>(),106,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, l5 = virtualinvoke instructions.<java.util.TreeSet: java.util.Iterator iterator()>(), 106)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(),215,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), 215)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,entry#12 = (foodev.jsondiff.JsonPatch$Instruction) $stack23,215,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, entry#12 = (foodev.jsondiff.JsonPatch$Instruction) $stack23, 215)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(),196,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(),215,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), 215)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,entry#12 = (foodev.jsondiff.JsonPatch$Instruction) $stack23,215,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, entry#12 = (foodev.jsondiff.JsonPatch$Instruction) $stack23, 215)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(),196,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,$stack1 = this.<foodev.jsondiff.JsonPatch$Instruction: char oper>,377,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196) => (<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>, $stack1 = this.<foodev.jsondiff.JsonPatch$Instruction: char oper>, 377)) => Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,if $stack1 != 46 goto $stack2 = 0,377,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(),215,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), 215)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,entry#12 = (foodev.jsondiff.JsonPatch$Instruction) $stack23,215,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, entry#12 = (foodev.jsondiff.JsonPatch$Instruction) $stack23, 215)) => Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,this := @this: foodev.jsondiff.JsonPatch$Instruction,-1,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196)) => Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,$stack1 = this.<foodev.jsondiff.JsonPatch$Instruction: char oper>,377,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196) => (<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>, $stack1 = this.<foodev.jsondiff.JsonPatch$Instruction: char oper>, 377)) => Node(<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>,if $stack1 != 46 goto $stack2 = 0,377,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(),196,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(java.lang.Object,java.lang.Object)>, staticinvoke <foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>(origEl, patchEl), 83) => (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SinkNode, path: ))]
Visited methods: 23
 Analysis results
----------------------------
 Number of conflicts: 9
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jsondiff/cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769/original-without-dependencies/jsondiff-1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,41200
Time to perform PDG 0,62600
CONFLICTS: [List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(),196,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SourceNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if grew != 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,213,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack37 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,198,SinkNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack37 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>, 198))), List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(),196,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack32 = virtualinvoke entry#12.<foodev.jsondiff.JsonPatch$Instruction: boolean isArrayInsert()>(), 196)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SourceNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,202,SinkNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>, 202)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,interfaceinvoke arr.<foodev.jsondiff.jsonwrap.JzonArray: void set(int,foodev.jsondiff.jsonwrap.JzonElement)>(lastIndex, $stack33),202,SinkNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, interfaceinvoke arr.<foodev.jsondiff.jsonwrap.JzonArray: void set(int,foodev.jsondiff.jsonwrap.JzonElement)>(lastIndex, $stack33), 202)))]
 Analysis results
----------------------------
 Number of conflicts: 2
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jsondiff/cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769/original-without-dependencies/jsondiff-1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,46600
Time to perform PDG 0,80300
CONFLICTS: [List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,arr = null,109,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, interfaceinvoke arr.<foodev.jsondiff.jsonwrap.JzonArray: void set(int,foodev.jsondiff.jsonwrap.JzonElement)>(idx, tmp), 139)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,arr = (foodev.jsondiff.jsonwrap.JzonArray) obj,126,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, arr = (foodev.jsondiff.jsonwrap.JzonArray) obj, 126)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if arr == null goto $stack30 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: java.lang.String key>,194,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,tmp = staticinvoke <foodev.jsondiff.jsonwrap.JsonWrapperFactory: foodev.jsondiff.jsonwrap.JzonArray createJsonArray(java.lang.Object)>(orig),133,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, tmp = staticinvoke <foodev.jsondiff.jsonwrap.JsonWrapperFactory: foodev.jsondiff.jsonwrap.JzonArray createJsonArray(java.lang.Object)>(orig), 133)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,arr = tmp,142,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, interfaceinvoke arr.<foodev.jsondiff.jsonwrap.JzonArray: void set(int,foodev.jsondiff.jsonwrap.JzonElement)>(idx, tmp), 139)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if arr == null goto $stack30 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: java.lang.String key>,194,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack16 != 0 goto orig = (foodev.jsondiff.jsonwrap.JzonObject) origEl,93,SourceNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack17 = new java.util.TreeSet,100,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, specialinvoke $stack17.<java.util.TreeSet: void <init>()>(), 100)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,instructions = $stack17,100,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, instructions = $stack17, 100)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,l5 = virtualinvoke instructions.<java.util.TreeSet: java.util.Iterator iterator()>(),106,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, l5 = virtualinvoke instructions.<java.util.TreeSet: java.util.Iterator iterator()>(), 106)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack22 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(),106,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack22 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), 106)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack22 == 0 goto return,106,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack26 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: java.util.ArrayList index>,114,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack26 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: java.util.ArrayList index>, 114)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack26 == null goto $stack27 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: char oper>,114,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if j >= $stack56 goto $stack27 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: char oper>,120,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack60 = virtualinvoke $stack59.<java.util.ArrayList: java.lang.Object get(int)>(j),122,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack60 = virtualinvoke $stack59.<java.util.ArrayList: java.lang.Object get(int)>(j), 122)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack61 = (java.lang.Integer) $stack60,122,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack61 = (java.lang.Integer) $stack60, 122)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,idx = virtualinvoke $stack61.<java.lang.Integer: int intValue()>(),122,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, idx = virtualinvoke $stack61.<java.lang.Integer: int intValue()>(), 122)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,obj = interfaceinvoke arr.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(idx),129,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack72 = interfaceinvoke obj.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(), 120)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,arr = (foodev.jsondiff.jsonwrap.JzonArray) obj,126,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, arr = (foodev.jsondiff.jsonwrap.JzonArray) obj, 126)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if arr == null goto $stack30 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: java.lang.String key>,194,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,orig = (foodev.jsondiff.jsonwrap.JzonObject) origEl,97,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, orig = (foodev.jsondiff.jsonwrap.JzonObject) origEl, 97)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,obj = interfaceinvoke orig.<foodev.jsondiff.jsonwrap.JzonObject: foodev.jsondiff.jsonwrap.JzonElement get(java.lang.String)>($stack24),108,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, obj = interfaceinvoke orig.<foodev.jsondiff.jsonwrap.JzonObject: foodev.jsondiff.jsonwrap.JzonElement get(java.lang.String)>($stack24), 108)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,arr = (foodev.jsondiff.jsonwrap.JzonArray) obj,126,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, arr = (foodev.jsondiff.jsonwrap.JzonArray) obj, 126)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if arr == null goto $stack30 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: java.lang.String key>,194,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack15 != 0 goto $stack16 = interfaceinvoke patchEl.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(),90,SourceNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack16 != 0 goto orig = (foodev.jsondiff.jsonwrap.JzonObject) origEl,93,SourceNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack17 = new java.util.TreeSet,100,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, specialinvoke $stack17.<java.util.TreeSet: void <init>()>(), 100)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,instructions = $stack17,100,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, instructions = $stack17, 100)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,l5 = virtualinvoke instructions.<java.util.TreeSet: java.util.Iterator iterator()>(),106,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, l5 = virtualinvoke instructions.<java.util.TreeSet: java.util.Iterator iterator()>(), 106)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack22 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(),106,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack22 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), 106)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack22 == 0 goto return,106,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack26 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: java.util.ArrayList index>,114,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack26 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: java.util.ArrayList index>, 114)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack26 == null goto $stack27 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: char oper>,114,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if j >= $stack56 goto $stack27 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: char oper>,120,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack60 = virtualinvoke $stack59.<java.util.ArrayList: java.lang.Object get(int)>(j),122,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack60 = virtualinvoke $stack59.<java.util.ArrayList: java.lang.Object get(int)>(j), 122)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack61 = (java.lang.Integer) $stack60,122,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack61 = (java.lang.Integer) $stack60, 122)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,idx = virtualinvoke $stack61.<java.lang.Integer: int intValue()>(),122,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, idx = virtualinvoke $stack61.<java.lang.Integer: int intValue()>(), 122)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,obj = interfaceinvoke arr.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(idx),129,SimpleNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack72 = interfaceinvoke obj.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(), 120)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,arr = (foodev.jsondiff.jsonwrap.JzonArray) obj,126,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, arr = (foodev.jsondiff.jsonwrap.JzonArray) obj, 126)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if arr == null goto $stack30 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: java.lang.String key>,194,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,arr = (foodev.jsondiff.jsonwrap.JzonArray) obj,126,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, arr = (foodev.jsondiff.jsonwrap.JzonArray) obj, 126)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if arr == null goto $stack30 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: java.lang.String key>,194,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,$stack24 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: java.lang.String key>,108,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, $stack24 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: java.lang.String key>, 108)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,obj = interfaceinvoke orig.<foodev.jsondiff.jsonwrap.JzonObject: foodev.jsondiff.jsonwrap.JzonElement get(java.lang.String)>($stack24),108,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, obj = interfaceinvoke orig.<foodev.jsondiff.jsonwrap.JzonObject: foodev.jsondiff.jsonwrap.JzonElement get(java.lang.String)>($stack24), 108)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,arr = (foodev.jsondiff.jsonwrap.JzonArray) obj,126,SourceNode, path: (<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>, arr = (foodev.jsondiff.jsonwrap.JzonArray) obj, 126)) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if arr == null goto $stack30 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: java.lang.String key>,194,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonPatch: void apply(foodev.jsondiff.jsonwrap.JzonElement,foodev.jsondiff.jsonwrap.JzonElement)>,if $stack32 == 0 goto $stack33 = entry#12.<foodev.jsondiff.JsonPatch$Instruction: foodev.jsondiff.jsonwrap.JzonElement el>,196,SinkNode, path: ))]
 Analysis results
----------------------------
 Number of conflicts: 7
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
