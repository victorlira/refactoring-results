List(Node(<hudson.plugins.ec2.UnixData: int hashCode()>,$stack12 = this.<hudson.plugins.ec2.UnixData: java.lang.String slaveCommandSuffix>,118,SourceNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, $stack12 = this.<hudson.plugins.ec2.UnixData: java.lang.String slaveCommandSuffix>, 118)) => Node(<hudson.plugins.ec2.UnixData: int hashCode()>,$stack14 = virtualinvoke $stack12.<java.lang.String: int hashCode()>(),118,SourceNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, $stack14 = virtualinvoke $stack12.<java.lang.String: int hashCode()>(), 118)) => Node(<hudson.plugins.ec2.UnixData: int hashCode()>,result#3 = $stack13 + $stack14,118,SourceNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, result#3 = $stack13 + $stack14, 118)) => Node(<hudson.plugins.ec2.UnixData: int hashCode()>,$stack17 = 31 * result#3,119,SimpleNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, $stack17 = 31 * result#3, 119)) => Node(<hudson.plugins.ec2.UnixData: int hashCode()>,result#3 = $stack17 + $stack18,119,SimpleNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, result#3 = $stack17 + $stack18, 119)) => Node(<hudson.plugins.ec2.UnixData: int hashCode()>,$stack21 = 31 * result#3,120,SinkNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, $stack21 = 31 * result#3, 120)) => Node(<hudson.plugins.ec2.UnixData: int hashCode()>,result#3 = $stack21 + $stack22,120,SinkNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, result#3 = $stack21 + $stack22, 120)))

List(Node(<hudson.plugins.ec2.UnixData: int hashCode()>,$stack14 = 0,120,SourceNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, result#3 = $stack13 + $stack14, 118)) => Node(<hudson.plugins.ec2.UnixData: int hashCode()>,result#3 = $stack13 + $stack14,118,SinkNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, result#3 = $stack13 + $stack14, 118)))

List(Node(<hudson.plugins.ec2.UnixData: int hashCode()>,$stack13 = 31 * result#3,118,SourceNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, $stack13 = 31 * result#3, 118)) => Node(<hudson.plugins.ec2.UnixData: int hashCode()>,result#3 = $stack13 + $stack14,118,SourceNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, result#3 = $stack13 + $stack14, 118)) => Node(<hudson.plugins.ec2.UnixData: int hashCode()>,$stack17 = 31 * result#3,119,SimpleNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, $stack17 = 31 * result#3, 119)) => Node(<hudson.plugins.ec2.UnixData: int hashCode()>,result#3 = $stack17 + $stack18,119,SimpleNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, result#3 = $stack17 + $stack18, 119)) => Node(<hudson.plugins.ec2.UnixData: int hashCode()>,$stack21 = 31 * result#3,120,SinkNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, $stack21 = 31 * result#3, 120)) => Node(<hudson.plugins.ec2.UnixData: int hashCode()>,result#3 = $stack21 + $stack22,120,SinkNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, result#3 = $stack21 + $stack22, 120)))

List(Node(<hudson.plugins.ec2.UnixData: int hashCode()>,$stack14 = 0,120,SourceNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, result#3 = $stack13 + $stack14, 118)) => Node(<hudson.plugins.ec2.UnixData: int hashCode()>,$stack14 = virtualinvoke $stack12.<java.lang.String: int hashCode()>(),118,SinkNode, path: (<hudson.plugins.ec2.UnixData: int hashCode()>, $stack14 = virtualinvoke $stack12.<java.lang.String: int hashCode()>(), 118)))

