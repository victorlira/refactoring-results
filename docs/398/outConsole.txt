Running soot scenario toml4j;com.moandjiezana.toml.NumberConverter;convert(String);a3edb55e9c0c40f0620c3b8c4480864a2f07f46c
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/toml4j/a3edb55e9c0c40f0620c3b8c4480864a2f07f46c/original-without-dependencies/toml4j-0.3.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,51400
Time to perform Confluence 1 Inter 0,80900
Configure Soot Confluence 2 Inter 0,19400
Time to perform Confluence 2 Inter 0,54600
Visited methods: 56
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/toml4j/a3edb55e9c0c40f0620c3b8c4480864a2f07f46c/original-without-dependencies/toml4j-0.3.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,57000
Runtime: 0.037s
Time to perform OA Inter 0,70800
OA Inter Visited methods: 95
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/toml4j/a3edb55e9c0c40f0620c3b8c4480864a2f07f46c/original-without-dependencies/toml4j-0.3.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,46000
Time to perform DFP Inter 0,80200
Depth limit: 5
CONFLICTS: []
Visited methods: 28
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/toml4j/a3edb55e9c0c40f0620c3b8c4480864a2f07f46c/original-without-dependencies/toml4j-0.3.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,37000
Time to perform DFP Inter 0,67100
Depth limit: 5
CONFLICTS: DF interference in <com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack70 = 1,25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, exponentable = $stack70, 38)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,exponentable = $stack70,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, exponentable = $stack70, 38)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 43 goto (branch),39,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 43 goto (branch),39,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SinkNode, path: ))]
Visited methods: 28
 Analysis results
----------------------------
 Number of conflicts: 6
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/toml4j/a3edb55e9c0c40f0620c3b8c4480864a2f07f46c/original-without-dependencies/toml4j-0.3.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,49300
Time to perform PDG 0,69300
CONFLICTS: [List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i#36 = $stack20,79,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, i#36 = $stack20, 79)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,return i#36,81,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 1,32,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 0,41,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack20 = new com.moandjiezana.toml.Results$Errors,79,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, specialinvoke $stack20.<com.moandjiezana.toml.Results$Errors: void <init>()>(), 79))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack49 = i + 1,62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack49 = i + 1, 62))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,21,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 95 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),65,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(), 65))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,21,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack49 = i + 1,62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack49 = i + 1, 62))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack21 = context.<com.moandjiezana.toml.Context: com.moandjiezana.toml.Identifier identifier>,80,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack21 = context.<com.moandjiezana.toml.Context: com.moandjiezana.toml.Identifier identifier>, 80)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack22 = virtualinvoke $stack21.<com.moandjiezana.toml.Identifier: java.lang.String getName()>(),80,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack22 = virtualinvoke $stack21.<com.moandjiezana.toml.Identifier: java.lang.String getName()>(), 80))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 43 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 1,32,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,58,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 43 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,21,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,21,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 1,32,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 1,32,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,58,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack49 = i + 1,62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack49 = i + 1, 62))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 43 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 1,32,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 0,41,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,58,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 1,32,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 0,41,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),65,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(), 65))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,58,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,21,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 1,32,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 0,41,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 43 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack49 = i + 1,62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack49 = i + 1, 62))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack21 = context.<com.moandjiezana.toml.Context: com.moandjiezana.toml.Identifier identifier>,80,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack21 = context.<com.moandjiezana.toml.Context: com.moandjiezana.toml.Identifier identifier>, 80)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack22 = virtualinvoke $stack21.<com.moandjiezana.toml.Identifier: java.lang.String getName()>(),80,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack22 = virtualinvoke $stack21.<com.moandjiezana.toml.Identifier: java.lang.String getName()>(), 80))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,58,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 1,32,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,21,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i#36 = $stack20,79,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, i#36 = $stack20, 79)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,return i#36,81,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack20 = new com.moandjiezana.toml.Results$Errors,79,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, specialinvoke $stack20.<com.moandjiezana.toml.Results$Errors: void <init>()>(), 79))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 43 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack49 = i + 1,62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack49 = i + 1, 62))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,21,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,58,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack20 = new com.moandjiezana.toml.Results$Errors,79,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, specialinvoke $stack20.<com.moandjiezana.toml.Results$Errors: void <init>()>(), 79))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 43 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i#36 = $stack20,79,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, i#36 = $stack20, 79)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,return i#36,81,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,58,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 43 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),65,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(), 65))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack20 = new com.moandjiezana.toml.Results$Errors,79,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, specialinvoke $stack20.<com.moandjiezana.toml.Results$Errors: void <init>()>(), 79))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,58,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i#36 = $stack20,79,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, i#36 = $stack20, 79)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,return i#36,81,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack49 = i + 1,62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack49 = i + 1, 62))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 43 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 1,32,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 0,41,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,21,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack20 = new com.moandjiezana.toml.Results$Errors,79,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, specialinvoke $stack20.<com.moandjiezana.toml.Results$Errors: void <init>()>(), 79))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,58,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack21 = context.<com.moandjiezana.toml.Context: com.moandjiezana.toml.Identifier identifier>,80,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack21 = context.<com.moandjiezana.toml.Context: com.moandjiezana.toml.Identifier identifier>, 80)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack22 = virtualinvoke $stack21.<com.moandjiezana.toml.Identifier: java.lang.String getName()>(),80,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack22 = virtualinvoke $stack21.<com.moandjiezana.toml.Identifier: java.lang.String getName()>(), 80))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 1,32,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 0,41,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),65,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(), 65))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,58,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 95 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),65,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(), 65))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack21 = context.<com.moandjiezana.toml.Context: com.moandjiezana.toml.Identifier identifier>,80,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack21 = context.<com.moandjiezana.toml.Context: com.moandjiezana.toml.Identifier identifier>, 80)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack22 = virtualinvoke $stack21.<com.moandjiezana.toml.Identifier: java.lang.String getName()>(),80,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack22 = virtualinvoke $stack21.<com.moandjiezana.toml.Identifier: java.lang.String getName()>(), 80))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 1,32,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,21,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i#36 = $stack20,79,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, i#36 = $stack20, 79)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,return i#36,81,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 43 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack20 = new com.moandjiezana.toml.Results$Errors,79,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, specialinvoke $stack20.<com.moandjiezana.toml.Results$Errors: void <init>()>(), 79))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,40,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 95 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),65,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(), 65))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,21,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack21 = context.<com.moandjiezana.toml.Context: com.moandjiezana.toml.Identifier identifier>,80,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack21 = context.<com.moandjiezana.toml.Context: com.moandjiezana.toml.Identifier identifier>, 80)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack22 = virtualinvoke $stack21.<com.moandjiezana.toml.Identifier: java.lang.String getName()>(),80,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack22 = virtualinvoke $stack21.<com.moandjiezana.toml.Identifier: java.lang.String getName()>(), 80))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,terminatable = 1,32,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i#36 = $stack20,79,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, i#36 = $stack20, 79)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,return i#36,81,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 43 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if dottable == 0 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack42 = i + 1,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack42 = i + 1, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 1,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,60,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if terminatable != 0 goto virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>(),62,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,type = "",63,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),70,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('integer'), 70)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack17 == 0 goto $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),70,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("float"),72,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack18 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('float'), 72)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack18 == 0 goto $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),72,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("exponent"),74,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack19 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>('exponent'), 74)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack19 == 0 goto $stack20 = new com.moandjiezana.toml.Results$Errors,74,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack21 = context.<com.moandjiezana.toml.Context: com.moandjiezana.toml.Identifier identifier>,80,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack21 = context.<com.moandjiezana.toml.Context: com.moandjiezana.toml.Identifier identifier>, 80)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack22 = virtualinvoke $stack21.<com.moandjiezana.toml.Identifier: java.lang.String getName()>(),80,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack22 = virtualinvoke $stack21.<com.moandjiezana.toml.Identifier: java.lang.String getName()>(), 80)))]
 Analysis results
----------------------------
 Number of conflicts: 60
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/toml4j/a3edb55e9c0c40f0620c3b8c4480864a2f07f46c/original-without-dependencies/toml4j-0.3.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,44100
Time to perform PDG 0,63000
CONFLICTS: [List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),29,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 29)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack49 = i + 1,62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack49 = i + 1, 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),29,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 29)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,31,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack49 = i + 1,62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack49 = i + 1, 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,58,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack70 = 0,25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, exponentable = $stack70, 38)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,exponentable = $stack70,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, exponentable = $stack70, 38)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,exponentable = 0,57,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 95 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack49 = i + 1,62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack49 = i + 1, 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),29,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 29)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,31,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),29,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 29)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,58,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack70 = 0,25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, exponentable = $stack70, 38)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,exponentable = $stack70,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, exponentable = $stack70, 38)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,exponentable = 0,57,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 95 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),29,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 29)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,31,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),29,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 29)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 46 goto (branch),45,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),29,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 29)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37))), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack70 = 0,25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, exponentable = $stack70, 38)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,exponentable = $stack70,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, exponentable = $stack70, 38)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,exponentable = 0,57,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 95 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = 0,58,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack70 = 0,25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, exponentable = $stack70, 38)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,exponentable = $stack70,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, exponentable = $stack70, 38)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,exponentable = 0,57,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack49 = i + 1,62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack49 = i + 1, 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),29,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 29)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c == 69 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 101 goto (branch),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack70 = 0,25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, exponentable = $stack70, 38)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,exponentable = $stack70,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, exponentable = $stack70, 38)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,exponentable = 0,57,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if exponentable == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if c != 95 goto (branch),59,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if underscorable == 0 goto (branch),66,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),62,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if notLastChar == 0 goto (branch),51,SinkNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,i = virtualinvoke index.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,c = virtualinvoke s.<java.lang.String: char charAt(int)>(i),26,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, c = virtualinvoke s.<java.lang.String: char charAt(int)>(i), 26)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),29,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack43 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 29)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack43 == 0 goto (branch),29,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 0,31,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,signable = 1,55,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if signable == 0 goto (branch),39,SinkNode, path: )), List(Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack49 = i + 1,62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack49 = i + 1, 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack50 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack49), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50),62,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack51 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack50), 62)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack51 == 0 goto (branch),62,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack16 = virtualinvoke s.<java.lang.String: int length()>(),25,SourceNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack16 = virtualinvoke s.<java.lang.String: int length()>(), 25)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if i >= $stack16 goto $stack17 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("integer"),25,SourceNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack41 = virtualinvoke s.<java.lang.String: int length()>(),27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, $stack41 = virtualinvoke s.<java.lang.String: int length()>(), 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,if $stack41 <= $stack42 goto $stack74 = 0,27,SimpleNode, path: ) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,$stack74 = 0,38,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,notLastChar = $stack74,27,SimpleNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, notLastChar = $stack74, 27)) => Node(<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>,underscorable = notLastChar,37,SinkNode, path: (<com.moandjiezana.toml.NumberConverter: java.lang.Object convert(java.lang.String,java.util.concurrent.atomic.AtomicInteger,com.moandjiezana.toml.Context)>, underscorable = notLastChar, 37)))]
 Analysis results
----------------------------
 Number of conflicts: 15
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
