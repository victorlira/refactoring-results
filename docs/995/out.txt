List(Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,atomicReader = virtualinvoke leaf.<org.apache.lucene.index.LeafReaderContext: org.apache.lucene.index.LeafReader reader()>(),81,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, atomicReader = virtualinvoke leaf.<org.apache.lucene.index.LeafReaderContext: org.apache.lucene.index.LeafReader reader()>(), 81)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack67 = virtualinvoke atomicReader.<org.apache.lucene.index.LeafReader: org.apache.lucene.index.Fields fields()>(),83,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack67 = virtualinvoke atomicReader.<org.apache.lucene.index.LeafReader: org.apache.lucene.index.Fields fields()>(), 83)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,terms = virtualinvoke $stack67.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(field),83,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, terms = virtualinvoke $stack67.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(field), 83)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if terms != null goto (branch),85,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap != null goto te = virtualinvoke terms.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null),89,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack87 = new java.util.TreeMap,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, specialinvoke $stack87.<java.util.TreeMap: void <init>()>(), 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,termMap = $stack87,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, termMap = $stack87, 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap == null goto virtualinvoke out.<java.io.PrintStream: void flush()>(),129,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(),164,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(), 164)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack31 != 0 goto virtualinvoke out.<java.io.PrintStream: void flush()>(),164,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,numCount = numCount + 1,130,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, numCount = numCount + 1, 130)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack57 = numCount % numPerPage,137,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack57 = numCount % numPerPage, 137)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack57 != 0 goto $stack45 = interfaceinvoke entry#50.<java.util.Map$Entry: java.lang.Object getValue()>(),137,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,virtualinvoke out.<java.io.PrintStream: void println(java.lang.String)>("Press q to break"),138,SinkNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, virtualinvoke out.<java.io.PrintStream: void println(java.lang.String)>('Press q to break'), 138)))

List(Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack87 = new java.util.TreeMap,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, specialinvoke $stack87.<java.util.TreeMap: void <init>()>(), 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,termMap = $stack87,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, termMap = $stack87, 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap == null goto virtualinvoke out.<java.io.PrintStream: void flush()>(),129,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(),164,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(), 164)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack31 != 0 goto virtualinvoke out.<java.io.PrintStream: void flush()>(),164,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,numCount = numCount + 1,130,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, numCount = numCount + 1, 130)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack57 = numCount % numPerPage,137,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack57 = numCount % numPerPage, 137)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack57 != 0 goto $stack45 = interfaceinvoke entry#50.<java.util.Map$Entry: java.lang.Object getValue()>(),137,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if terms#53 == 113 goto virtualinvoke out.<java.io.PrintStream: void flush()>(),140,SinkNode, path: ))

List(Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,entry = interfaceinvoke leaves.<java.util.List: java.util.Iterator iterator()>(),80,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, entry = interfaceinvoke leaves.<java.util.List: java.util.Iterator iterator()>(), 80)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack30 = interfaceinvoke entry.<java.util.Iterator: boolean hasNext()>(),80,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack30 = interfaceinvoke entry.<java.util.Iterator: boolean hasNext()>(), 80)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack30 == 0 goto (branch),80,SourceNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,terms = virtualinvoke $stack67.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(field),83,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, terms = virtualinvoke $stack67.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(field), 83)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if terms != null goto (branch),85,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap != null goto te = virtualinvoke terms.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null),89,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack87 = new java.util.TreeMap,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, specialinvoke $stack87.<java.util.TreeMap: void <init>()>(), 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,termMap = $stack87,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, termMap = $stack87, 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap == null goto virtualinvoke out.<java.io.PrintStream: void flush()>(),129,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(),164,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(), 164)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack31 != 0 goto virtualinvoke out.<java.io.PrintStream: void flush()>(),164,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,numCount = numCount + 1,130,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, numCount = numCount + 1, 130)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack57 = numCount % numPerPage,137,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack57 = numCount % numPerPage, 137)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack57 != 0 goto $stack45 = interfaceinvoke entry#50.<java.util.Map$Entry: java.lang.Object getValue()>(),137,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if terms#53 == 113 goto virtualinvoke out.<java.io.PrintStream: void flush()>(),140,SinkNode, path: ))

List(Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack87 = new java.util.TreeMap,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, specialinvoke $stack87.<java.util.TreeMap: void <init>()>(), 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,termMap = $stack87,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, termMap = $stack87, 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap == null goto virtualinvoke out.<java.io.PrintStream: void flush()>(),129,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(),164,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(), 164)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack31 != 0 goto virtualinvoke out.<java.io.PrintStream: void flush()>(),164,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,numCount = numCount + 1,130,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, numCount = numCount + 1, 130)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack57 = numCount % numPerPage,137,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack57 = numCount % numPerPage, 137)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack57 != 0 goto $stack45 = interfaceinvoke entry#50.<java.util.Map$Entry: java.lang.Object getValue()>(),137,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,virtualinvoke out.<java.io.PrintStream: void println(java.lang.String)>("Press q to break"),138,SinkNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, virtualinvoke out.<java.io.PrintStream: void println(java.lang.String)>('Press q to break'), 138)))

List(Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,leaves = virtualinvoke reader.<org.apache.lucene.index.IndexReader: java.util.List leaves()>(),73,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, leaves = virtualinvoke reader.<org.apache.lucene.index.IndexReader: java.util.List leaves()>(), 73)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,entry = interfaceinvoke leaves.<java.util.List: java.util.Iterator iterator()>(),80,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, entry = interfaceinvoke leaves.<java.util.List: java.util.Iterator iterator()>(), 80)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack30 = interfaceinvoke entry.<java.util.Iterator: boolean hasNext()>(),80,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack30 = interfaceinvoke entry.<java.util.Iterator: boolean hasNext()>(), 80)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack30 == 0 goto (branch),80,SourceNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,terms = virtualinvoke $stack67.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(field),83,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, terms = virtualinvoke $stack67.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(field), 83)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if terms != null goto (branch),85,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap != null goto te = virtualinvoke terms.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null),89,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack87 = new java.util.TreeMap,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, specialinvoke $stack87.<java.util.TreeMap: void <init>()>(), 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,termMap = $stack87,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, termMap = $stack87, 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap == null goto virtualinvoke out.<java.io.PrintStream: void flush()>(),129,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(),164,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(), 164)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack31 != 0 goto virtualinvoke out.<java.io.PrintStream: void flush()>(),164,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,numCount = numCount + 1,130,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, numCount = numCount + 1, 130)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack57 = numCount % numPerPage,137,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack57 = numCount % numPerPage, 137)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack57 != 0 goto $stack45 = interfaceinvoke entry#50.<java.util.Map$Entry: java.lang.Object getValue()>(),137,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,virtualinvoke out.<java.io.PrintStream: void println(java.lang.String)>("Press q to break"),138,SinkNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, virtualinvoke out.<java.io.PrintStream: void println(java.lang.String)>('Press q to break'), 138)))

List(Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,leaves = virtualinvoke reader.<org.apache.lucene.index.IndexReader: java.util.List leaves()>(),73,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, leaves = virtualinvoke reader.<org.apache.lucene.index.IndexReader: java.util.List leaves()>(), 73)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,entry = interfaceinvoke leaves.<java.util.List: java.util.Iterator iterator()>(),80,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, entry = interfaceinvoke leaves.<java.util.List: java.util.Iterator iterator()>(), 80)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack30 = interfaceinvoke entry.<java.util.Iterator: boolean hasNext()>(),80,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack30 = interfaceinvoke entry.<java.util.Iterator: boolean hasNext()>(), 80)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack30 == 0 goto (branch),80,SourceNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,terms = virtualinvoke $stack67.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(field),83,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, terms = virtualinvoke $stack67.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(field), 83)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if terms != null goto (branch),85,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap != null goto te = virtualinvoke terms.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null),89,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack87 = new java.util.TreeMap,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, specialinvoke $stack87.<java.util.TreeMap: void <init>()>(), 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,termMap = $stack87,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, termMap = $stack87, 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap == null goto virtualinvoke out.<java.io.PrintStream: void flush()>(),129,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(),164,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(), 164)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack31 != 0 goto virtualinvoke out.<java.io.PrintStream: void flush()>(),164,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,numCount = numCount + 1,130,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, numCount = numCount + 1, 130)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack57 = numCount % numPerPage,137,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack57 = numCount % numPerPage, 137)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack57 != 0 goto $stack45 = interfaceinvoke entry#50.<java.util.Map$Entry: java.lang.Object getValue()>(),137,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if terms#53 == 113 goto virtualinvoke out.<java.io.PrintStream: void flush()>(),140,SinkNode, path: ))

List(Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,atomicReader = virtualinvoke leaf.<org.apache.lucene.index.LeafReaderContext: org.apache.lucene.index.LeafReader reader()>(),81,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, atomicReader = virtualinvoke leaf.<org.apache.lucene.index.LeafReaderContext: org.apache.lucene.index.LeafReader reader()>(), 81)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack67 = virtualinvoke atomicReader.<org.apache.lucene.index.LeafReader: org.apache.lucene.index.Fields fields()>(),83,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack67 = virtualinvoke atomicReader.<org.apache.lucene.index.LeafReader: org.apache.lucene.index.Fields fields()>(), 83)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,terms = virtualinvoke $stack67.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(field),83,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, terms = virtualinvoke $stack67.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(field), 83)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if terms != null goto (branch),85,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap != null goto te = virtualinvoke terms.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null),89,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack87 = new java.util.TreeMap,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, specialinvoke $stack87.<java.util.TreeMap: void <init>()>(), 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,termMap = $stack87,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, termMap = $stack87, 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap == null goto virtualinvoke out.<java.io.PrintStream: void flush()>(),129,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(),164,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(), 164)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack31 != 0 goto virtualinvoke out.<java.io.PrintStream: void flush()>(),164,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,numCount = numCount + 1,130,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, numCount = numCount + 1, 130)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack57 = numCount % numPerPage,137,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack57 = numCount % numPerPage, 137)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack57 != 0 goto $stack45 = interfaceinvoke entry#50.<java.util.Map$Entry: java.lang.Object getValue()>(),137,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if terms#53 == 113 goto virtualinvoke out.<java.io.PrintStream: void flush()>(),140,SinkNode, path: ))

List(Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,entry = interfaceinvoke leaves.<java.util.List: java.util.Iterator iterator()>(),80,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, entry = interfaceinvoke leaves.<java.util.List: java.util.Iterator iterator()>(), 80)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack30 = interfaceinvoke entry.<java.util.Iterator: boolean hasNext()>(),80,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack30 = interfaceinvoke entry.<java.util.Iterator: boolean hasNext()>(), 80)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack30 == 0 goto (branch),80,SourceNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,terms = virtualinvoke $stack67.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(field),83,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, terms = virtualinvoke $stack67.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(field), 83)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if terms != null goto (branch),85,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap != null goto te = virtualinvoke terms.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null),89,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack87 = new java.util.TreeMap,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, specialinvoke $stack87.<java.util.TreeMap: void <init>()>(), 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,termMap = $stack87,90,SourceNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, termMap = $stack87, 90)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if termMap == null goto virtualinvoke out.<java.io.PrintStream: void flush()>(),129,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(),164,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack31 = virtualinvoke termMap.<java.util.TreeMap: boolean isEmpty()>(), 164)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack31 != 0 goto virtualinvoke out.<java.io.PrintStream: void flush()>(),164,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,numCount = numCount + 1,130,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, numCount = numCount + 1, 130)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,$stack57 = numCount % numPerPage,137,SimpleNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, $stack57 = numCount % numPerPage, 137)) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,if $stack57 != 0 goto $stack45 = interfaceinvoke entry#50.<java.util.Map$Entry: java.lang.Object getValue()>(),137,SimpleNode, path: ) => Node(<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>,virtualinvoke out.<java.io.PrintStream: void println(java.lang.String)>("Press q to break"),138,SinkNode, path: (<com.senseidb.clue.commands.TermsCommand: void execute(java.lang.String[],java.io.PrintStream)>, virtualinvoke out.<java.io.PrintStream: void println(java.lang.String)>('Press q to break'), 138)))

