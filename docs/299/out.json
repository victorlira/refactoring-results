[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack6 = l0.<java.lang.String: char[] value>,1546,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack6 = l0.<java.lang.String: char[] value>, 1546)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack6 = l0.<java.lang.String: char[] value>,1546,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack6 = l0.<java.lang.String: char[] value>, 1546))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1546
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1546
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack6 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int indexOf(int,int)>",
					"line": 1546
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = l5#15 + 1,2354,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: int indexOf(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l5 = l2, 1558)) => Node(<java.lang.String: int indexOf(int,int)>,l5 = l2,1558,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l5 = l5 + 1,1558,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = l5#15 + 1,2354,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: int indexOf(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l5 = l2, 1558)) => Node(<java.lang.String: int indexOf(int,int)>,l5 = l2,1558,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l5 = l5 + 1,1558,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1558
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1558
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1558
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1558
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l5 = l5 + 1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int indexOf(int,int)>",
					"line": 1558
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack6 = l2 + l3,207,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack6 = l2 + l3, 207)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack66 = l0.<java.lang.String: char[] value>,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack66 = l0.<java.lang.String: char[] value>, 2357)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack67 = lengthof $stack66,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack67 = lengthof $stack66, 2357)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack6 = l2 + l3,207,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack6 = l2 + l3, 207))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 207
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 207
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack6 = l2 + l3",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 207
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack70 = l0.<java.lang.String: char[] value>,2358,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack70 = l0.<java.lang.String: char[] value>, 2358)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = lengthof $stack70,2358,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l4 = lengthof $stack70, 2358)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack70 = l0.<java.lang.String: char[] value>,2358,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack70 = l0.<java.lang.String: char[] value>, 2358)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = lengthof $stack70,2358,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l4 = lengthof $stack70, 2358))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2358
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2358
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2358
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2358
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4 = lengthof $stack70",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
					"line": 2358
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = l5#15 + 1,2354,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = l5#15 + 1,2354,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2354
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2354
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4 = l5#15 + 1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
					"line": 2354
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l4 = l0.<java.lang.String: char[] value>,1557,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l4 = l0.<java.lang.String: char[] value>, 1557)) => Node(<java.lang.String: int indexOf(int,int)>,$stack8 = l4[l5],1559,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack8 = l4[l5], 1559)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l4 = l0.<java.lang.String: char[] value>,1557,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l4 = l0.<java.lang.String: char[] value>, 1557)) => Node(<java.lang.String: int indexOf(int,int)>,$stack8 = l4[l5],1559,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack8 = l4[l5], 1559))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1557
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1559
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1557
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1559
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = l4[l5]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int indexOf(int,int)>",
					"line": 1559
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l4 = l0.<java.lang.String: char[] value>,1557,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l4 = l0.<java.lang.String: char[] value>, 1557)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l4 = l0.<java.lang.String: char[] value>,1557,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l4 = l0.<java.lang.String: char[] value>, 1557))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1557
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1557
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int indexOf(int,int)>",
					"line": 1557
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = l5#15 + 1,2354,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack33 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, $stack32),2368,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack33 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, $stack32), 2368)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack6 = l0,1969,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack33 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, $stack32),2368,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack33 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, $stack32), 2368)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,virtualinvoke l7.<java.util.ArrayList: boolean add(java.lang.Object)>($stack33),2368,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, virtualinvoke l7.<java.util.ArrayList: boolean add(java.lang.Object)>($stack33), 2368))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1969
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2368
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2368
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2368
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack33 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, $stack32)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
					"line": 2368
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),1967,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 1967)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack66 = l0.<java.lang.String: char[] value>,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack66 = l0.<java.lang.String: char[] value>, 2357)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack67 = lengthof $stack66,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack67 = lengthof $stack66, 2357)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),1967,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 1967))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1967
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1967
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int,int)>",
					"line": 1967
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack4 = l0.<java.lang.String: char[] value>,1962,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, $stack4 = l0.<java.lang.String: char[] value>, 1962)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack4 = l0.<java.lang.String: char[] value>,1962,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, $stack4 = l0.<java.lang.String: char[] value>, 1962)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack5 = lengthof $stack4,1962,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, $stack5 = lengthof $stack4, 1962))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1962
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1962
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1962
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int,int)>",
					"line": 1962
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = l5#15 + 1,2354,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack15.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1),1960,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack15.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1), 1960)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = l5#15 + 1,2354,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack15.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1),1960,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack15.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1), 1960))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1960
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1960
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack15.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int,int)>",
					"line": 1960
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack6 = l0,1969,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack7 = l0.<java.lang.String: char[] value>,1969,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, $stack7 = l0.<java.lang.String: char[] value>, 1969))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1969
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1969
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack6 = l0",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int,int)>",
					"line": 1969
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l5#15 = $stack30",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
					"line": 2351
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack66 = l0.<java.lang.String: char[] value>,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack66 = l0.<java.lang.String: char[] value>, 2357)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack67 = lengthof $stack66,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack67 = lengthof $stack66, 2357)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = l2 - l1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int,int)>",
					"line": 1965
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),196,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 196)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack66 = l0.<java.lang.String: char[] value>,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack66 = l0.<java.lang.String: char[] value>, 2357)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack67 = lengthof $stack66,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack67 = lengthof $stack66, 2357)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),196,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 196))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 196
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 196
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 196
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack7 = l0.<java.lang.String: char[] value>,1969,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, $stack7 = l0.<java.lang.String: char[] value>, 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack7 = l0.<java.lang.String: char[] value>,1969,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, $stack7 = l0.<java.lang.String: char[] value>, 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1969
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 198
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1969
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 198
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = lengthof l1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 198
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = l5#15 + 1,2354,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: int indexOf(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l5 = l2, 1558)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = l5#15 + 1,2354,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: int indexOf(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l5 = l2, 1558)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack85 = virtualinvoke $stack83.<java.lang.String: int indexOf(int)>($stack84), 2338) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1565
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1565
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int indexOf(int,int)>",
					"line": 1565
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack9 = l2 + l3,205,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack9 = l2 + l3, 205)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack66 = l0.<java.lang.String: char[] value>,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack66 = l0.<java.lang.String: char[] value>, 2357)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack67 = lengthof $stack66,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack67 = lengthof $stack66, 2357)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack9 = l2 + l3,205,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack9 = l2 + l3, 205)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($stack9),205,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($stack9), 205))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 205
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 205
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 205
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack9 = l2 + l3",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 205
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),1963,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 1963)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack66 = l0.<java.lang.String: char[] value>,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack66 = l0.<java.lang.String: char[] value>, 2357)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack67 = lengthof $stack66,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack67 = lengthof $stack66, 2357)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),1963,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 1963))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1963
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1963
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int,int)>",
					"line": 1963
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack14 = virtualinvoke $stack13.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>(l0, l2),2380,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack14 = virtualinvoke $stack13.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>(l0, l2),2380,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2380
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2380
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack14 = virtualinvoke $stack13.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>(l0, l2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
					"line": 2380
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = l5#15 + 1,2354,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack68 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, $stack67),2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack68 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, $stack67), 2357)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,virtualinvoke l7.<java.util.ArrayList: boolean add(java.lang.Object)>($stack68),2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, virtualinvoke l7.<java.util.ArrayList: boolean add(java.lang.Object)>($stack68), 2357)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack66 = l0.<java.lang.String: char[] value>,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack66 = l0.<java.lang.String: char[] value>, 2357)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack67 = lengthof $stack66,2357,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack67 = lengthof $stack66, 2357))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2357
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke l7.<java.util.ArrayList: boolean add(java.lang.Object)>($stack68)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
					"line": 2357
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack7 = l0.<java.lang.String: char[] value>,1969,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, $stack7 = l0.<java.lang.String: char[] value>, 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack4 = lengthof l1,204,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack4 = lengthof l1, 204)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack7 = l0.<java.lang.String: char[] value>,1969,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, $stack7 = l0.<java.lang.String: char[] value>, 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack4 = lengthof l1,204,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack4 = lengthof l1, 204))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1969
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 204
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1969
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 204
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = lengthof l1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 204
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack14 = virtualinvoke $stack13.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>(l0, l2),2380,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack14 = virtualinvoke $stack13.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>(l0, l2),2380,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": 2422
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": 2422
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
					"line": 2422
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = l5#15 + 1,2354,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: void <init>(char[],int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack17.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),192,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack17.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 192)) SINK=>BASE: Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\&"),34,SourceNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>,query = l2[l4],39,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,$stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4),2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l5#15 = $stack30,2351,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, l5#15 = $stack30, 2351)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String,int)>,l4 = l5#15 + 1,2354,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack30 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l3#2, l4), 2351)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353)) => Node(<java.lang.String: void <init>(char[],int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack17.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),192,SinkNode, path: (<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34) => (<java.lang.String: java.lang.String[] split(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0), 2422) => (<java.lang.String: java.lang.String[] split(java.lang.String,int)>, $stack58 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l4, l5#15), 2353) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack17.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 192))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 34
},{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 192
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "query = l2[l4]",
				"location": {
					"file": "",
					"class": "br.com.caelum.vraptor.test.http.Parameters",
					"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
					"line": 39
				},
				"stackTrace": [{
	"class": "br.com.caelum.vraptor.test.http.Parameters",
	"method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
	"line": 39
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2351
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String,int)>",
	"line": 2354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 192
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack17.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 192
				}
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "query = l2[l4]",
"location": {
  "file": "",
  "class": "br.com.caelum.vraptor.test.http.Parameters",
  "method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
  "line": "39"
},
"stackTrace": ["(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parts = virtualinvoke query.<java.lang.String: java.lang.String[] split(java.lang.String)>('=')",
"location": {
  "file": "",
  "class": "br.com.caelum.vraptor.test.http.Parameters",
  "method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
  "line": "35"
},
"stackTrace": ["(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, parts = virtualinvoke query.<java.lang.String: java.lang.String[] split(java.lang.String)>('='), 35)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = parts[0]",
"location": {
  "file": "",
  "class": "br.com.caelum.vraptor.test.http.Parameters",
  "method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
  "line": "36"
},
"stackTrace": ["(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, $stack28 = parts[0], 36)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "query = l2[l4]",
"location": {
  "file": "",
  "class": "br.com.caelum.vraptor.test.http.Parameters",
  "method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
  "line": "39"
},
"stackTrace": ["(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parts = virtualinvoke query.<java.lang.String: java.lang.String[] split(java.lang.String)>('=')",
"location": {
  "file": "",
  "class": "br.com.caelum.vraptor.test.http.Parameters",
  "method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
  "line": "35"
},
"stackTrace": ["(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, parts = virtualinvoke query.<java.lang.String: java.lang.String[] split(java.lang.String)>('='), 35)"]
}]
}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke request.<org.springframework.mock.web.MockHttpServletRequest: java.lang.String getQueryString()>()",
"location": {
  "file": "",
  "class": "br.com.caelum.vraptor.test.http.Parameters",
  "method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
  "line": "34"
},
"stackTrace": ["(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, $stack23 = virtualinvoke request.<org.springframework.mock.web.MockHttpServletRequest: java.lang.String getQueryString()>(), 34)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&')",
"location": {
  "file": "",
  "class": "br.com.caelum.vraptor.test.http.Parameters",
  "method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
  "line": "34"
},
"stackTrace": ["(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, l2 = virtualinvoke $stack23.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\&'), 34)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "query = l2[l4]",
"location": {
  "file": "",
  "class": "br.com.caelum.vraptor.test.http.Parameters",
  "method": "<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>",
  "line": "39"
},
"stackTrace": ["(<br.com.caelum.vraptor.test.http.Parameters: void fill(org.springframework.mock.web.MockHttpServletRequest)>, query = l2[l4], 39)"]
}]
}
}

]
