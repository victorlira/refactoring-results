Running soot scenario asterisk-java;org.asteriskjava.manager.internal.AbstractBuilder;setAttributes(Object, Map<String,Object>, Set<String>);a4b27137cc92af086da78fdfb634a441cb07e1d0
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/asterisk-java/a4b27137cc92af086da78fdfb634a441cb07e1d0/original-without-dependencies/asterisk-java.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,80000
Time to perform Confluence 1 Inter 1,71900
Configure Soot Confluence 2 Inter 0,29500
Time to perform Confluence 2 Inter 1,17800
Visited methods: 108
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31),123,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,value = virtualinvoke list#25.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack33),124,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, value = virtualinvoke list#25.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack33), 124))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31),123,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,value = virtualinvoke list#25.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack33),124,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, value = virtualinvoke list#25.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack33), 124)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack5 = lengthof $stack2,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack5 = lengthof $stack2, 1449))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack5 = lengthof $stack2,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack5 = lengthof $stack2, 1449)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors> = l2,2677,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors> = l2, 2677))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors> = l2,2677,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors> = l2, 2677)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] publicConstructors> = l2,2675,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] publicConstructors> = l2, 2675))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] publicConstructors> = l2,2675,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] publicConstructors> = l2, 2675)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack6 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>(),2666,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack6 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>(), 2666))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] publicConstructors>,2666,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] publicConstructors>, 2666)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack10 = (java.lang.Class$ReflectionData) $stack9,2497,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack10 = (java.lang.Class$ReflectionData) $stack9, 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l3 = $stack10,2497,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack11 = l3.<java.lang.Class$ReflectionData: int redefinedCount>,2503,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack11 = l3.<java.lang.Class$ReflectionData: int redefinedCount>, 2503))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(),3078,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(), 3078)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17),3077,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = $stack12,2662,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(),3078,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(), 3078)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17),3077,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack22 = virtualinvoke $stack21.<sun.reflect.ReflectionFactory: java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor)>(l7),3079,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = $stack12,2662,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack22 = virtualinvoke $stack21.<sun.reflect.ReflectionFactory: java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor)>(l7),3079,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack30 = virtualinvoke dataType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/util/Map;"),103,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack30 = virtualinvoke dataType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class 'Ljava/util/Map;'), 103)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack30 == 0 goto $stack31 = newarray (java.lang.Class)[1],103,SinkNode, path: )
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack30 = virtualinvoke dataType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/util/Map;"),103,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack30 = virtualinvoke dataType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class 'Ljava/util/Map;'), 103)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack30 == 0 goto $stack31 = newarray (java.lang.Class)[1],103,SinkNode, path: ), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName),65,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack27,65,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack27, 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if setter != null goto (branch),67,SinkNode, path: )
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName),65,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack27,65,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack27, 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if setter != null goto (branch),67,SinkNode, path: ), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack131 = virtualinvoke $stack130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(dataType),129,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack131 = virtualinvoke $stack130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(dataType), 129))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack130 = virtualinvoke $stack129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to required type "),129,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack130 = virtualinvoke $stack129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' to required type '), 129)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack25 = "class",60,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack23 = "class",52,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack24 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 52)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31),123,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31),123,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack22 = virtualinvoke $stack21.<sun.reflect.ReflectionFactory: java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor)>(l7),3079,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,$stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0),1825,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = $stack12,2662,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack22 = virtualinvoke $stack21.<sun.reflect.ReflectionFactory: java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor)>(l7),3079,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,$stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0),1825,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] publicConstructors>,2666,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] publicConstructors>, 2666)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = $stack12,2662,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = $stack12,2662,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack25 = "class",60,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack23 = "class",52,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack24 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 52)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack131 = virtualinvoke $stack130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(dataType),129,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack131 = virtualinvoke $stack130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(dataType), 129)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack132 = virtualinvoke $stack131.<java.lang.StringBuilder: java.lang.String toString()>(),129,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack132 = virtualinvoke $stack131.<java.lang.StringBuilder: java.lang.String toString()>(), 129)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,interfaceinvoke $stack118.<org.asteriskjava.util.Log: void error(java.lang.Object,java.lang.Throwable)>($stack132, list#26),128,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, interfaceinvoke $stack118.<org.asteriskjava.util.Log: void error(java.lang.Object,java.lang.Throwable)>($stack132, list#26), 128))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack130 = virtualinvoke $stack129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to required type "),129,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack130 = virtualinvoke $stack129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' to required type '), 129)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack131 = virtualinvoke $stack130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(dataType),129,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack131 = virtualinvoke $stack130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(dataType), 129)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack132 = virtualinvoke $stack131.<java.lang.StringBuilder: java.lang.String toString()>(),129,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack132 = virtualinvoke $stack131.<java.lang.StringBuilder: java.lang.String toString()>(), 129)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,interfaceinvoke $stack118.<org.asteriskjava.util.Log: void error(java.lang.Object,java.lang.Throwable)>($stack132, list#26),128,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, interfaceinvoke $stack118.<org.asteriskjava.util.Log: void error(java.lang.Object,java.lang.Throwable)>($stack132, list#26), 128)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,virtualinvoke setter.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(target, $stack37),136,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, virtualinvoke setter.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(target, $stack37), 136))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,virtualinvoke setter.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(target, $stack37),136,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, virtualinvoke setter.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(target, $stack37), 136)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack89 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),78,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack89 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 78)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack90 = $stack89[0],78,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack90 = $stack89[0], 78)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack91 = virtualinvoke $stack90.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/util/Map;"),78,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack91 = virtualinvoke $stack90.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class 'Ljava/util/Map;'), 78))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack89 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),78,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack89 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 78)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(),3078,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(), 3078)) => Node(<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>,l1 := @parameter1: java.lang.Object[],-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077)) => Node(<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>,$stack6 = l1[l2],3103,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077) => (<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>, $stack6 = l1[l2], 3103))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = $stack12,2662,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(),3078,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(), 3078)) => Node(<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>,l1 := @parameter1: java.lang.Object[],-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077)) => Node(<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>,$stack6 = l1[l2],3103,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077) => (<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>, $stack6 = l1[l2], 3103)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(l1),2671,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(l1),2671,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(),3078,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(), 3078))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = $stack12,2662,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(),3078,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(), 3078)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(),3078,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(), 3078)) => Node(<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>,l1 := @parameter1: java.lang.Object[],-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077)) => Node(<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>,$stack12 = lengthof l1,3091,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077) => (<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>, $stack12 = lengthof l1, 3091))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = $stack12,2662,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(),3078,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(), 3078)) => Node(<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>,l1 := @parameter1: java.lang.Object[],-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077)) => Node(<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>,$stack12 = lengthof l1,3091,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077) => (<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>, $stack12 = lengthof l1, 3091)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack10 = (java.lang.Class$ReflectionData) $stack9,2497,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack10 = (java.lang.Class$ReflectionData) $stack9, 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l3 = $stack10,2497,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack25 = "class",60,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack23 = "class",52,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack24 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 52)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack12 = l3,987,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = $stack12,2662,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2892) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.String getName()>(), 81) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.String getName()>(), 81) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack3, 1),1824,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack3, 1), 1824))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack3, 1),1824,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack3, 1), 1824)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l5 = lengthof l4,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l5 = lengthof l4, 3076))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = $stack12,2662,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l5 = lengthof l4,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l5 = lengthof l4, 3076)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName),65,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName),65,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if dataType != class "Ljava/lang/Boolean;" goto $stack29 = virtualinvoke dataType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/String;"),91,SinkNode, path: )
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if dataType != class "Ljava/lang/Boolean;" goto $stack29 = virtualinvoke dataType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/String;"),91,SinkNode, path: ), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack5 = lengthof $stack2,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack5 = lengthof $stack2, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack6 = $stack5 - $stack4,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack6 = $stack5 - $stack4, 1449)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, $stack12 = virtualinvoke methodName.<java.lang.String: boolean startsWith(java.lang.String)>('set'), 107) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l4 = l2,1404,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, $stack12 = virtualinvoke methodName.<java.lang.String: boolean startsWith(java.lang.String)>('set'), 107) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack5 = lengthof $stack2,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack5 = lengthof $stack2, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack6 = $stack5 - $stack4,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack6 = $stack5 - $stack4, 1449)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, $stack12 = virtualinvoke methodName.<java.lang.String: boolean startsWith(java.lang.String)>('set'), 107) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l4 = l2,1404,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, $stack12 = virtualinvoke methodName.<java.lang.String: boolean startsWith(java.lang.String)>('set'), 107) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.String getName()>(), 81) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack11 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack11 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack10 = new java.lang.StringBuilder,3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>(), 3082))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.String getName()>(), 81) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack11 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack11 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 3082)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack25 = "class",60,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack13 = l5[l6],988,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack13 = l5[l6], 988)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack29 = virtualinvoke dataType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/String;"),95,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack29 = virtualinvoke dataType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class 'Ljava/lang/String;'), 95)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack29 == 0 goto $stack30 = virtualinvoke dataType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/util/Map;"),95,SinkNode, path: )
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack29 = virtualinvoke dataType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/String;"),95,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack29 = virtualinvoke dataType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class 'Ljava/lang/String;'), 95)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack25 = "class",60,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack23 = "class",52,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack24 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 52)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack5 = lengthof $stack2,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack5 = lengthof $stack2, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack6 = $stack5 - $stack4,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack6 = $stack5 - $stack4, 1449)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, $stack12 = virtualinvoke methodName.<java.lang.String: boolean startsWith(java.lang.String)>('set'), 107) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l4 = l2,1404,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, $stack12 = virtualinvoke methodName.<java.lang.String: boolean startsWith(java.lang.String)>('set'), 107) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l4 = l4 + 1,1413,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, $stack12 = virtualinvoke methodName.<java.lang.String: boolean startsWith(java.lang.String)>('set'), 107) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack12 = l4, 1413)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack12 = l4,1413,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, $stack12 = virtualinvoke methodName.<java.lang.String: boolean startsWith(java.lang.String)>('set'), 107) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack12 = l4, 1413))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack5 = lengthof $stack2,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack5 = lengthof $stack2, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack6 = $stack5 - $stack4,1449,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack6 = $stack5 - $stack4, 1449)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, $stack12 = virtualinvoke methodName.<java.lang.String: boolean startsWith(java.lang.String)>('set'), 107) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l4 = l2,1404,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, $stack12 = virtualinvoke methodName.<java.lang.String: boolean startsWith(java.lang.String)>('set'), 107) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack12 = l4,1413,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, $stack12 = virtualinvoke methodName.<java.lang.String: boolean startsWith(java.lang.String)>('set'), 107) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack12 = l4, 1413)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>("s"),84,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack82 != 0 goto (branch),84,SinkNode, path: )
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if setter != null goto $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),84,SinkNode, path: ), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(),3078,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(), 3078)) => Node(<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>,l1 := @parameter1: java.lang.Object[],-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077)) => Node(<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>,$stack3 = lengthof l1,3098,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077) => (<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>, $stack3 = lengthof l1, 3098))
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(),89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack28 = virtualinvoke setter.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>(), 89)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,dataType = $stack28[0],89,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, dataType = $stack28[0], 89)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = $stack12,2662,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23),3075,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l4 = l3,3076,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l4 = l3, 3076)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l7 = l4[l6],3082,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l7 = l4[l6], 3082)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,$stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(),3078,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack17 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>(), 3078)) => Node(<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>,l1 := @parameter1: java.lang.Object[],-1,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077)) => Node(<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>,$stack3 = lengthof l1,3098,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, $stack18 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $stack17), 3077) => (<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>, $stack3 = lengthof l1, 3098)), SOURCE=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if setter == null goto (branch),71,SinkNode, path: )
SINK=>BASE: Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack84 = new java.lang.StringBuilder,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(setterName), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s"),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('s'), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>(), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87),69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack88 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87), 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setter = (java.lang.reflect.Method) $stack88,69,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setter = (java.lang.reflect.Method) $stack88, 69)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if setter == null goto (branch),71,SinkNode, path: )]
Confluence interference in <org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>
Confluence flows from execution of lines 65 and 60 to line 28, defined in $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName) and $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName) and used in setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12)
Caused by line 65 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)
Caused by line 60 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)
Caused by line 28 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setters = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>($stack12), 28) => (<org.asteriskjava.util.ReflectionUtil: java.util.Map getSetters(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 99) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)
Confluence interference in <org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>
Confluence flows from execution of lines 65 and 60 to line 124, defined in $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName) and $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName) and used in value = virtualinvoke list#25.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack33)
Caused by line 65 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)
Caused by line 60 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)
Caused by line 124 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, value = virtualinvoke list#25.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack33), 124)
Confluence interference in <org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>
Confluence flows from execution of lines 65 and 60 to line 84, defined in $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName) and $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName) and used in $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>("s")
Caused by line 65 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)
Caused by line 60 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)
Caused by line 84 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack82 = virtualinvoke setterName.<java.lang.String: boolean endsWith(java.lang.String)>('s'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack5 = lengthof $stack2, 1449)
Confluence interference in <org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>
Confluence flows from execution of lines 65 and 60 to line 123, defined in $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName) and $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName) and used in list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31)
Caused by line 65 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)
Caused by line 60 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)
Caused by line 123 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, list#25 = virtualinvoke dataType.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack31), 123) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>, $stack4 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0), 1825) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors> = l2, 2677)
Confluence interference in <org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>
Confluence flows from execution of lines 65 and 60 to line 69, defined in $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName) and $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName) and used in specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>()
Caused by line 65 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)
Caused by line 60 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)
Caused by line 69 flow: path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>(), 69)
java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:430)
	at scala.collection.immutable.Nil$.head(List.scala:427)
	at scala.collection.generic.TraversableForwarder.head(TraversableForwarder.scala:59)
	at scala.collection.generic.TraversableForwarder.head$(TraversableForwarder.scala:59)
	at scala.collection.mutable.ListBuffer.head(ListBuffer.scala:47)
	at br.unb.cic.analysis.svfa.confluence.DFPConfluenceAnalysis.reportConflictsConfluence(DFPConfluenceAnalysis.java:181)
	at br.unb.cic.analysis.Main.runDFPConfluenceAnalysis(Main.java:566)
	at br.unb.cic.analysis.Main.runAnalysis(Main.java:243)
	at br.unb.cic.analysis.Main.main(Main.java:80)
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/asterisk-java/a4b27137cc92af086da78fdfb634a441cb07e1d0/original-without-dependencies/asterisk-java.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 1,02000
Runtime: 0.041s
OA interference in class AbstractBuilder, method void setAttributes(java.lang.Object,java.util.Map,java.util.Set), execution of line 52 overrides 60, assigning to variable l3, 
Caused by line 52 flow:
at org.asteriskjava.manager.internal.AbstractBuilder.setAttributes(AbstractBuilder.java:52)
at java.lang.String.equals(String.java:987)
And line 60 flow:
at org.asteriskjava.manager.internal.AbstractBuilder.setAttributes(AbstractBuilder.java:60)
at java.lang.String.equals(String.java:982)
 
OA interference in class AbstractBuilder, method void setAttributes(java.lang.Object,java.util.Map,java.util.Set), execution of line 54 overrides 62, assigning to variable setterName, 
Caused by line 54 flow:
at org.asteriskjava.manager.internal.AbstractBuilder.setAttributes(AbstractBuilder.java:54)
And line 62 flow:
at org.asteriskjava.manager.internal.AbstractBuilder.setAttributes(AbstractBuilder.java:62)
 
Time to perform OA Inter 1,22700
OA Inter Visited methods: 32
 Analysis results
----------------------------
 Number of conflicts: 15
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/asterisk-java/a4b27137cc92af086da78fdfb634a441cb07e1d0/original-without-dependencies/asterisk-java.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,56200
Time to perform DFP Inter 1,34400
Depth limit: 5
CONFLICTS: []
Visited methods: 54
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/asterisk-java/a4b27137cc92af086da78fdfb634a441cb07e1d0/original-without-dependencies/asterisk-java.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,63800
Time to perform DFP Inter 1,34300
Depth limit: 5
CONFLICTS: DF interference in <org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName),60,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack26 == 0 goto $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName),60,SinkNode, path: ))]
Visited methods: 54
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/asterisk-java/a4b27137cc92af086da78fdfb634a441cb07e1d0/original-without-dependencies/asterisk-java.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,69100
Time to perform PDG 0,74100
CONFLICTS: [List(Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack98 == 0 goto $stack18 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>(),60,SourceNode, path: ) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.lang.String stripIllegalCharacters(java.lang.String)>($stack19),41,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setterName = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.lang.String stripIllegalCharacters(java.lang.String)>($stack19), 41)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName),48,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 48)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack22 == 0 goto $stack23 = "class",48,SimpleNode, path: ) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack23 = "class",52,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack24 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 52))), List(Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack98 == 0 goto $stack18 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>(),60,SourceNode, path: ) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.lang.String stripIllegalCharacters(java.lang.String)>($stack19),41,SimpleNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, setterName = staticinvoke <org.asteriskjava.util.ReflectionUtil: java.lang.String stripIllegalCharacters(java.lang.String)>($stack19), 41)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)))]
 Analysis results
----------------------------
 Number of conflicts: 2
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/asterisk-java/a4b27137cc92af086da78fdfb634a441cb07e1d0/original-without-dependencies/asterisk-java.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,76900
Time to perform PDG 0,81600
CONFLICTS: [List(Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack24 == 0 goto $stack25 = "class",52,SourceNode, path: ) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName),60,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack26 == 0 goto $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName),60,SinkNode, path: )), List(Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack24 == 0 goto $stack25 = "class",52,SourceNode, path: ) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName),60,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack26 == 0 goto $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName),60,SinkNode, path: ) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65))), List(Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName),60,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack26 == 0 goto $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName),60,SinkNode, path: )), List(Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "clazz",54,SourceNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName),60,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(setterName), 60)) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,if $stack26 == 0 goto $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName),60,SinkNode, path: ) => Node(<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>,setterName = "classname",62,SinkNode, path: (<org.asteriskjava.manager.internal.AbstractBuilder: void setAttributes(java.lang.Object,java.util.Map,java.util.Set)>, $stack27 = interfaceinvoke setters.<java.util.Map: java.lang.Object get(java.lang.Object)>(setterName), 65)))]
 Analysis results
----------------------------
 Number of conflicts: 4
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
