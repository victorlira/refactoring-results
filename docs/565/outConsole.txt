Running soot scenario movsim;org.movsim.simulator.roadnetwork.RoadSegment;checkForInconsistencies(double, long, boolean);633cf8a7804a537c3b908eff2ec21dc4213d9b77
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/movsim/633cf8a7804a537c3b908eff2ec21dc4213d9b77/original-without-dependencies/MovsimViewer-1.6.0-SNAPSHOT-jar-with-dependencies.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 1,81500
Time to perform Confluence 1 Inter 1,45000
Configure Soot Confluence 2 Inter 1,72100
Time to perform Confluence 2 Inter 0,82800
Visited methods: 64
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/movsim/633cf8a7804a537c3b908eff2ec21dc4213d9b77/original-without-dependencies/MovsimViewer-1.6.0-SNAPSHOT-jar-with-dependencies.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 2,33900
Runtime: 0.033s
Time to perform OA Inter 3,22000
OA Inter Visited methods: 78
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/movsim/633cf8a7804a537c3b908eff2ec21dc4213d9b77/original-without-dependencies/MovsimViewer-1.6.0-SNAPSHOT-jar-with-dependencies.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 1,97900
Time to perform DFP Inter 1,43700
Depth limit: 5
CONFLICTS: []
Visited methods: 32
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/movsim/633cf8a7804a537c3b908eff2ec21dc4213d9b77/original-without-dependencies/MovsimViewer-1.6.0-SNAPSHOT-jar-with-dependencies.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 2,05000
Time to perform DFP Inter 1,31200
Depth limit: 5
CONFLICTS: []
Visited methods: 32
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/movsim/633cf8a7804a537c3b908eff2ec21dc4213d9b77/original-without-dependencies/MovsimViewer-1.6.0-SNAPSHOT-jar-with-dependencies.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 2,09900
Time to perform PDG 1,33400
CONFLICTS: [List(Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,index = index + 1,1124,SourceNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, index = index + 1, 1124)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack63 = index - 8,1147,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack63 = index - 8, 1147)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,j = staticinvoke <java.lang.Math: int max(int,int)>(0, $stack63),1147,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, j = staticinvoke <java.lang.Math: int max(int,int)>(0, $stack63), 1147)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,j = j + 1,1148,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, veh = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle getVehicle(int)>(j), 1149)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if j > $stack68 goto $stack69 = <org.movsim.simulator.roadnetwork.RoadSegment: org.slf4j.Logger LOG>,1148,SimpleNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack98 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("veh=%d, pos=%6.2f, speed=%4.2f, accModel=%4.3f, acc=%4.3f, length=%3.1f, lane=%d, id=%d%n", $stack73),1151,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack98 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('veh=%d, pos=%6.2f, speed=%4.2f, accModel=%4.3f, acc=%4.3f, length=%3.1f, lane=%d, id=%d%n', $stack73), 1151)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,sb = $stack32,1132,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, sb = $stack32, 1132)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack45 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("internal id="),1139,SinkNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack45 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('internal id='), 1139))), List(Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,l11 = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: java.util.Iterator iterator()>(),1123,SourceNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, l11 = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: java.util.Iterator iterator()>(), 1123)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack21 = interfaceinvoke l11.<java.util.Iterator: boolean hasNext()>(),1123,SourceNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack21 = interfaceinvoke l11.<java.util.Iterator: boolean hasNext()>(), 1123)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if $stack21 == 0 goto l8 = l8 + 1,1123,SourceNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if $stack25 != $stack26 goto vehFront = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle frontVehicle(org.movsim.simulator.vehicles.Vehicle)>(vehicle),1125,SourceNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,vehFront = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle frontVehicle(org.movsim.simulator.vehicles.Vehicle)>(vehicle),1128,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, vehFront = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle frontVehicle(org.movsim.simulator.vehicles.Vehicle)>(vehicle), 1128)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,netDistance = virtualinvoke vehicle.<org.movsim.simulator.vehicles.Vehicle: double getNetDistance(org.movsim.simulator.vehicles.Vehicle)>(vehFront),1129,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, netDistance = virtualinvoke vehicle.<org.movsim.simulator.vehicles.Vehicle: double getNetDistance(org.movsim.simulator.vehicles.Vehicle)>(vehFront), 1129)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack29 = netDistance cmpg 0.0,1130,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack29 = netDistance cmpg 0.0, 1130)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if $stack29 >= 0 goto (branch),1130,SimpleNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack46 = this.<org.movsim.simulator.roadnetwork.RoadSegment: int id>,1139,SinkNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack46 = this.<org.movsim.simulator.roadnetwork.RoadSegment: int id>, 1139))), List(Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack26 = <org.movsim.simulator.vehicles.Vehicle$Type: org.movsim.simulator.vehicles.Vehicle$Type OBSTACLE>,1125,SourceNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if $stack25 != $stack26 goto vehFront = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle frontVehicle(org.movsim.simulator.vehicles.Vehicle)>(vehicle),1125,SourceNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,vehFront = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle frontVehicle(org.movsim.simulator.vehicles.Vehicle)>(vehicle),1128,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, vehFront = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle frontVehicle(org.movsim.simulator.vehicles.Vehicle)>(vehicle), 1128)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,netDistance = virtualinvoke vehicle.<org.movsim.simulator.vehicles.Vehicle: double getNetDistance(org.movsim.simulator.vehicles.Vehicle)>(vehFront),1129,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, netDistance = virtualinvoke vehicle.<org.movsim.simulator.vehicles.Vehicle: double getNetDistance(org.movsim.simulator.vehicles.Vehicle)>(vehFront), 1129)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack29 = netDistance cmpg 0.0,1130,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack29 = netDistance cmpg 0.0, 1130)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if $stack29 >= 0 goto (branch),1130,SimpleNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack46 = this.<org.movsim.simulator.roadnetwork.RoadSegment: int id>,1139,SinkNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack46 = this.<org.movsim.simulator.roadnetwork.RoadSegment: int id>, 1139))), List(Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,index = -1,1122,SourceNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, index = index + 1, 1124)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,index = index + 1,1124,SourceNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, index = index + 1, 1124)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack63 = index - 8,1147,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack63 = index - 8, 1147)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,j = staticinvoke <java.lang.Math: int max(int,int)>(0, $stack63),1147,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, j = staticinvoke <java.lang.Math: int max(int,int)>(0, $stack63), 1147)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,j = j + 1,1148,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, veh = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle getVehicle(int)>(j), 1149)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if j > $stack68 goto $stack69 = <org.movsim.simulator.roadnetwork.RoadSegment: org.slf4j.Logger LOG>,1148,SimpleNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack98 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("veh=%d, pos=%6.2f, speed=%4.2f, accModel=%4.3f, acc=%4.3f, length=%3.1f, lane=%d, id=%d%n", $stack73),1151,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack98 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('veh=%d, pos=%6.2f, speed=%4.2f, accModel=%4.3f, acc=%4.3f, length=%3.1f, lane=%d, id=%d%n', $stack73), 1151)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,sb = $stack32,1132,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, sb = $stack32, 1132)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack45 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("internal id="),1139,SinkNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack45 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('internal id='), 1139)))]
 Analysis results
----------------------------
 Number of conflicts: 4
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/movsim/633cf8a7804a537c3b908eff2ec21dc4213d9b77/original-without-dependencies/MovsimViewer-1.6.0-SNAPSHOT-jar-with-dependencies.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 2,14400
Time to perform PDG 1,21400
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
