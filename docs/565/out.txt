List(Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,index = index + 1,1124,SourceNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, index = index + 1, 1124)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack63 = index - 8,1147,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack63 = index - 8, 1147)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,j = staticinvoke <java.lang.Math: int max(int,int)>(0, $stack63),1147,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, j = staticinvoke <java.lang.Math: int max(int,int)>(0, $stack63), 1147)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,j = j + 1,1148,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, veh = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle getVehicle(int)>(j), 1149)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if j > $stack68 goto $stack69 = <org.movsim.simulator.roadnetwork.RoadSegment: org.slf4j.Logger LOG>,1148,SimpleNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack98 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("veh=%d, pos=%6.2f, speed=%4.2f, accModel=%4.3f, acc=%4.3f, length=%3.1f, lane=%d, id=%d%n", $stack73),1151,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack98 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('veh=%d, pos=%6.2f, speed=%4.2f, accModel=%4.3f, acc=%4.3f, length=%3.1f, lane=%d, id=%d%n', $stack73), 1151)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,sb = $stack32,1132,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, sb = $stack32, 1132)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack45 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("internal id="),1139,SinkNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack45 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('internal id='), 1139)))

List(Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,l11 = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: java.util.Iterator iterator()>(),1123,SourceNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, l11 = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: java.util.Iterator iterator()>(), 1123)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack21 = interfaceinvoke l11.<java.util.Iterator: boolean hasNext()>(),1123,SourceNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack21 = interfaceinvoke l11.<java.util.Iterator: boolean hasNext()>(), 1123)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if $stack21 == 0 goto l8 = l8 + 1,1123,SourceNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if $stack25 != $stack26 goto vehFront = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle frontVehicle(org.movsim.simulator.vehicles.Vehicle)>(vehicle),1125,SourceNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,vehFront = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle frontVehicle(org.movsim.simulator.vehicles.Vehicle)>(vehicle),1128,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, vehFront = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle frontVehicle(org.movsim.simulator.vehicles.Vehicle)>(vehicle), 1128)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,netDistance = virtualinvoke vehicle.<org.movsim.simulator.vehicles.Vehicle: double getNetDistance(org.movsim.simulator.vehicles.Vehicle)>(vehFront),1129,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, netDistance = virtualinvoke vehicle.<org.movsim.simulator.vehicles.Vehicle: double getNetDistance(org.movsim.simulator.vehicles.Vehicle)>(vehFront), 1129)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack29 = netDistance cmpg 0.0,1130,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack29 = netDistance cmpg 0.0, 1130)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if $stack29 >= 0 goto (branch),1130,SimpleNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack46 = this.<org.movsim.simulator.roadnetwork.RoadSegment: int id>,1139,SinkNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack46 = this.<org.movsim.simulator.roadnetwork.RoadSegment: int id>, 1139)))

List(Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack26 = <org.movsim.simulator.vehicles.Vehicle$Type: org.movsim.simulator.vehicles.Vehicle$Type OBSTACLE>,1125,SourceNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if $stack25 != $stack26 goto vehFront = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle frontVehicle(org.movsim.simulator.vehicles.Vehicle)>(vehicle),1125,SourceNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,vehFront = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle frontVehicle(org.movsim.simulator.vehicles.Vehicle)>(vehicle),1128,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, vehFront = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle frontVehicle(org.movsim.simulator.vehicles.Vehicle)>(vehicle), 1128)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,netDistance = virtualinvoke vehicle.<org.movsim.simulator.vehicles.Vehicle: double getNetDistance(org.movsim.simulator.vehicles.Vehicle)>(vehFront),1129,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, netDistance = virtualinvoke vehicle.<org.movsim.simulator.vehicles.Vehicle: double getNetDistance(org.movsim.simulator.vehicles.Vehicle)>(vehFront), 1129)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack29 = netDistance cmpg 0.0,1130,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack29 = netDistance cmpg 0.0, 1130)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if $stack29 >= 0 goto (branch),1130,SimpleNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack46 = this.<org.movsim.simulator.roadnetwork.RoadSegment: int id>,1139,SinkNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack46 = this.<org.movsim.simulator.roadnetwork.RoadSegment: int id>, 1139)))

List(Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,index = -1,1122,SourceNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, index = index + 1, 1124)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,index = index + 1,1124,SourceNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, index = index + 1, 1124)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack63 = index - 8,1147,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack63 = index - 8, 1147)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,j = staticinvoke <java.lang.Math: int max(int,int)>(0, $stack63),1147,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, j = staticinvoke <java.lang.Math: int max(int,int)>(0, $stack63), 1147)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,j = j + 1,1148,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, veh = virtualinvoke laneSegment.<org.movsim.simulator.roadnetwork.LaneSegment: org.movsim.simulator.vehicles.Vehicle getVehicle(int)>(j), 1149)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,if j > $stack68 goto $stack69 = <org.movsim.simulator.roadnetwork.RoadSegment: org.slf4j.Logger LOG>,1148,SimpleNode, path: ) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack98 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("veh=%d, pos=%6.2f, speed=%4.2f, accModel=%4.3f, acc=%4.3f, length=%3.1f, lane=%d, id=%d%n", $stack73),1151,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack98 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('veh=%d, pos=%6.2f, speed=%4.2f, accModel=%4.3f, acc=%4.3f, length=%3.1f, lane=%d, id=%d%n', $stack73), 1151)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,sb = $stack32,1132,SimpleNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, sb = $stack32, 1132)) => Node(<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>,$stack45 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("internal id="),1139,SinkNode, path: (<org.movsim.simulator.roadnetwork.RoadSegment: void checkForInconsistencies(double,long,boolean)>, $stack45 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('internal id='), 1139)))

