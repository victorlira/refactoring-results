Running soot scenario jgrapht;org.jgrapht.generate.GnpRandomGraphGenerator;generateGraph(Graph<V,E>, VertexFactory<V>, Map<String,V>);62628bcbc4bd44eed87539b6e804a189db3e299c
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/62628bcbc4bd44eed87539b6e804a189db3e299c/original-without-dependencies/jgrapht-ext-1.1.1-SNAPSHOT-uber.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,98100
Time to perform Confluence 1 Inter 0,71600
Configure Soot Confluence 2 Inter 0,79900
Time to perform Confluence 2 Inter 0,12300
Visited methods: 6
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/62628bcbc4bd44eed87539b6e804a189db3e299c/original-without-dependencies/jgrapht-ext-1.1.1-SNAPSHOT-uber.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 1,26400
Runtime: 0.041s
Time to perform OA Inter 1,38400
OA Inter Visited methods: 23
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/62628bcbc4bd44eed87539b6e804a189db3e299c/original-without-dependencies/jgrapht-ext-1.1.1-SNAPSHOT-uber.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,83500
Time to perform DFP Inter 0,58300
Depth limit: 5
CONFLICTS: []
Visited methods: 3
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/62628bcbc4bd44eed87539b6e804a189db3e299c/original-without-dependencies/jgrapht-ext-1.1.1-SNAPSHOT-uber.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 1,05800
Time to perform DFP Inter 0,54800
Depth limit: 5
CONFLICTS: []
Visited methods: 3
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/62628bcbc4bd44eed87539b6e804a189db3e299c/original-without-dependencies/jgrapht-ext-1.1.1-SNAPSHOT-uber.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,87400
Time to perform PDG 0,77100
CONFLICTS: [List(Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack11 == 0 goto $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),134,SourceNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack69 = interfaceinvoke $stack68.<org.jgrapht.GraphType: boolean isAllowingSelfLoops()>(),141,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack69 = interfaceinvoke $stack68.<org.jgrapht.GraphType: boolean isAllowingSelfLoops()>(), 141)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack69 != 0 goto $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),141,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack16 = this.<org.jgrapht.generate.GnpRandomGraphGenerator: int n>,141,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack16 = this.<org.jgrapht.generate.GnpRandomGraphGenerator: int n>, 141)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if i >= $stack16 goto $stack17 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),141,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,v = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(),142,SinkNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, v = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(), 142)))]
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/62628bcbc4bd44eed87539b6e804a189db3e299c/original-without-dependencies/jgrapht-ext-1.1.1-SNAPSHOT-uber.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 1,02900
Time to perform PDG 0,64200
CONFLICTS: [List(Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack11 == 0 goto $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),134,SourceNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack69 != 0 goto $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),141,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),139,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(), 139)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,previousVertexSetSize = interfaceinvoke $stack12.<java.util.Set: int size()>(),139,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, previousVertexSetSize = interfaceinvoke $stack12.<java.util.Set: int size()>(), 139)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack20 = previousVertexSetSize + $stack19,146,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack20 = previousVertexSetSize + $stack19, 146)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack18 == $stack20 goto $stack21 = interfaceinvoke target.<org.jgrapht.Graph: org.jgrapht.GraphType getType()>(),146,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if v#10 >= $stack23 goto return,155,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if j >= $stack24 goto v#10 = v#10 + 1,156,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,j = j + 1,156,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(j), 171)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if v#10 != j goto s = null,158,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack29 = this.<org.jgrapht.generate.GnpRandomGraphGenerator: double p>,169,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack29 = this.<org.jgrapht.generate.GnpRandomGraphGenerator: double p>, 169)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack30 = $stack28 cmpg $stack29,169,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack30 = $stack28 cmpg $stack29, 169)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack30 >= 0 goto (branch),169,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,s = interfaceinvoke vertices.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack45),170,SinkNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, s = interfaceinvoke vertices.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack45), 170)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if s != null goto interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(t, s),178,SinkNode, path: )), List(Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack11 == 0 goto $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),134,SourceNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack69 != 0 goto $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),141,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),139,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(), 139)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,previousVertexSetSize = interfaceinvoke $stack12.<java.util.Set: int size()>(),139,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, previousVertexSetSize = interfaceinvoke $stack12.<java.util.Set: int size()>(), 139)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack20 = previousVertexSetSize + $stack19,146,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack20 = previousVertexSetSize + $stack19, 146)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack18 == $stack20 goto $stack21 = interfaceinvoke target.<org.jgrapht.Graph: org.jgrapht.GraphType getType()>(),146,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if v#10 >= $stack23 goto return,155,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if j >= $stack24 goto v#10 = v#10 + 1,156,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,j = j + 1,156,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(j), 171)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if v#10 != j goto s = null,158,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,s = null,165,SinkNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(t, s), 182))), List(Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack11 == 0 goto $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),134,SourceNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack69 != 0 goto $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),141,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),139,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(), 139)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,previousVertexSetSize = interfaceinvoke $stack12.<java.util.Set: int size()>(),139,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, previousVertexSetSize = interfaceinvoke $stack12.<java.util.Set: int size()>(), 139)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack20 = previousVertexSetSize + $stack19,146,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack20 = previousVertexSetSize + $stack19, 146)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack18 == $stack20 goto $stack21 = interfaceinvoke target.<org.jgrapht.Graph: org.jgrapht.GraphType getType()>(),146,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if v#10 >= $stack23 goto return,155,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if j >= $stack24 goto v#10 = v#10 + 1,156,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,j = j + 1,156,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(j), 171)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if v#10 != j goto s = null,158,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack51 != 0 goto s = null,159,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,t = null,166,SinkNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(t, s), 182))), List(Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack11 == 0 goto $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),134,SourceNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack69 != 0 goto $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),141,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),139,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(), 139)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,previousVertexSetSize = interfaceinvoke $stack12.<java.util.Set: int size()>(),139,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, previousVertexSetSize = interfaceinvoke $stack12.<java.util.Set: int size()>(), 139)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack20 = previousVertexSetSize + $stack19,146,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack20 = previousVertexSetSize + $stack19, 146)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack18 == $stack20 goto $stack21 = interfaceinvoke target.<org.jgrapht.Graph: org.jgrapht.GraphType getType()>(),146,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if v#10 >= $stack23 goto return,155,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if j >= $stack24 goto v#10 = v#10 + 1,156,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,j = j + 1,156,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(j), 171)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if v#10 != j goto s = null,158,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack29 = this.<org.jgrapht.generate.GnpRandomGraphGenerator: double p>,169,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack29 = this.<org.jgrapht.generate.GnpRandomGraphGenerator: double p>, 169)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack30 = $stack28 cmpg $stack29,169,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack30 = $stack28 cmpg $stack29, 169)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack30 >= 0 goto (branch),169,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v#10),170,SinkNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v#10), 170))), List(Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack11 == 0 goto $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),134,SourceNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack69 != 0 goto $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),141,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),139,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack12 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(), 139)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,previousVertexSetSize = interfaceinvoke $stack12.<java.util.Set: int size()>(),139,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, previousVertexSetSize = interfaceinvoke $stack12.<java.util.Set: int size()>(), 139)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack20 = previousVertexSetSize + $stack19,146,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack20 = previousVertexSetSize + $stack19, 146)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack18 == $stack20 goto $stack21 = interfaceinvoke target.<org.jgrapht.Graph: org.jgrapht.GraphType getType()>(),146,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if v#10 >= $stack23 goto return,155,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if j >= $stack24 goto v#10 = v#10 + 1,156,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,j = j + 1,156,SimpleNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(j), 171)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(j),171,SinkNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(j), 171)) => Node(<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,t = interfaceinvoke vertices.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack47),171,SinkNode, path: (<org.jgrapht.generate.GnpRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, t = interfaceinvoke vertices.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack47), 171)))]
 Analysis results
----------------------------
 Number of conflicts: 5
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
