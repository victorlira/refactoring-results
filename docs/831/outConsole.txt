Running soot scenario openpnp;org.openpnp.machine.reference.vision.ReferenceBottomVision;findOffsets(Part, BoardLocation, Location, Nozzle);b62c0ce8269e73c38ef5215d02d264586a1ab399
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/openpnp/b62c0ce8269e73c38ef5215d02d264586a1ab399/original-without-dependencies/openpnp-gui-0.0.1-alpha-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,94900
Time to perform Confluence 1 Inter 7,96600
Configure Soot Confluence 2 Inter 0,39400
Time to perform Confluence 2 Inter 2,44400
Visited methods: 200
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/openpnp/b62c0ce8269e73c38ef5215d02d264586a1ab399/original-without-dependencies/openpnp-gui-0.0.1-alpha-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,85400
Runtime: 0.258s
Time to perform OA Inter 1,29200
OA Inter Visited methods: 241
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/openpnp/b62c0ce8269e73c38ef5215d02d264586a1ab399/original-without-dependencies/openpnp-gui-0.0.1-alpha-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 1,33700
Time to perform DFP Inter 2,80800
Depth limit: 5
CONFLICTS: DF interference in <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>
Data flows from execution of line 101 to 102, defined in pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>() and propagated in $stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>
Caused by line 101 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)
Caused by line 102 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102) => (<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>, $stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>, 318)
DF interference in <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>
Data flows from execution of line 101 to 102, defined in pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>() and propagated in virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera)
Caused by line 101 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)
Caused by line 102 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)
DF interference in <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>
Data flows from execution of line 101 to 103, defined in $stack1 = this.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline pipeline> and propagated in virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle)
Caused by line 101 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)
Caused by line 103 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103)
DF interference in <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>
Data flows from execution of line 101 to 102, defined in $stack1 = this.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline pipeline> and propagated in $stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>
Caused by line 101 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)
Caused by line 102 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102) => (<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>, $stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>, 318)
DF interference in <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>
Data flows from execution of line 101 to 103, defined in pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>() and propagated in virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle)
Caused by line 101 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)
Caused by line 103 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103)
DF interference in <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>
Data flows from execution of line 70 to 102, defined in $stack1 = this.<org.openpnp.model.Part: java.lang.String id> and propagated in $stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>
Caused by line 70 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, partSettings = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>(part), 70) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>, $stack4 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 300)
Caused by line 102 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102) => (<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>, $stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>, 318)
DF interference in <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>
Data flows from execution of line 101 to 102, defined in $stack1 = this.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline pipeline> and propagated in virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera)
Caused by line 101 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)
Caused by line 102 flow: path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)
[List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>,$stack1 = this.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline pipeline>,356,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>,$stack1 = this.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline pipeline>,356,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),156,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 156)) => Node(<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>,this := @this: org.openpnp.vision.pipeline.CvPipeline,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)) => Node(<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>,$stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>,318,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102) => (<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>, $stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>, 318))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>,$stack1 = this.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline pipeline>,356,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>,this := @this: org.openpnp.vision.pipeline.CvPipeline,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)) => Node(<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>,$stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>,318,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102) => (<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>, $stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>, 318))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103))), List(Node(<org.openpnp.model.Part: java.lang.String getId()>,$stack1 = this.<org.openpnp.model.Part: java.lang.String id>,75,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, partSettings = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>(part), 70) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>, $stack4 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 300)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>,$stack4 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(),300,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, partSettings = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>(part), 70) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>, $stack4 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 300)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>,$stack5 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack4),300,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, partSettings = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>(part), 70) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>, $stack5 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack4), 300)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>,partSettings = (org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings) $stack5,300,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, partSettings = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>(part), 70)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,partSettings = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>(part),70,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, partSettings = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>(part), 70)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),156,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 156)) => Node(<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>,this := @this: org.openpnp.vision.pipeline.CvPipeline,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)) => Node(<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>,$stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>,318,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102) => (<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>, $stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>, 318)))]
Visited methods: 100
 Analysis results
----------------------------
 Number of conflicts: 7
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/openpnp/b62c0ce8269e73c38ef5215d02d264586a1ab399/original-without-dependencies/openpnp-gui-0.0.1-alpha-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 1,19300
Time to perform DFP Inter 2,59100
Depth limit: 5
CONFLICTS: []
Visited methods: 100
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/openpnp/b62c0ce8269e73c38ef5215d02d264586a1ab399/original-without-dependencies/openpnp-gui-0.0.1-alpha-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 1,16200
Time to perform PDG 1,19200
CONFLICTS: [List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack28 == 0 goto angle#11 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),80,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == null goto $stack102 = new java.lang.Exception,81,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack103 != null goto $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),82,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,$stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),84,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 84)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == null goto $stack102 = new java.lang.Exception,81,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack103 != null goto $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),82,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack103 != null goto $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),82,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack103 != null goto $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),82,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,$stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),84,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 84)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == null goto $stack102 = new java.lang.Exception,81,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack103 != null goto $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),82,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102))), List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack28 == 0 goto angle#11 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),80,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == null goto $stack102 = new java.lang.Exception,81,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack103 != null goto $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),82,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)))]
 Analysis results
----------------------------
 Number of conflicts: 10
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/openpnp/b62c0ce8269e73c38ef5215d02d264586a1ab399/original-without-dependencies/openpnp-gui-0.0.1-alpha-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,91300
Time to perform PDG 1,15300
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
