List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>,$stack1 = this.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline pipeline>,356,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>,$stack1 = this.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline pipeline>,356,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),156,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 156)) => Node(<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>,this := @this: org.openpnp.vision.pipeline.CvPipeline,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)) => Node(<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>,$stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>,318,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102) => (<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>, $stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>, 318)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>,$stack1 = this.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline pipeline>,356,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>,this := @this: org.openpnp.vision.pipeline.CvPipeline,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)) => Node(<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>,$stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>,318,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102) => (<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>, $stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>, 318)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103)))

List(Node(<org.openpnp.model.Part: java.lang.String getId()>,$stack1 = this.<org.openpnp.model.Part: java.lang.String id>,75,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, partSettings = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>(part), 70) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>, $stack4 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 300)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>,$stack4 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(),300,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, partSettings = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>(part), 70) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>, $stack4 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 300)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>,$stack5 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack4),300,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, partSettings = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>(part), 70) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>, $stack5 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack4), 300)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>,partSettings = (org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings) $stack5,300,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, partSettings = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>(part), 70)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,partSettings = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>(part),70,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, partSettings = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings getPartSettings(org.openpnp.model.Part)>(part), 70)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),156,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 156)) => Node(<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>,this := @this: org.openpnp.vision.pipeline.CvPipeline,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)) => Node(<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>,$stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>,318,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102) => (<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>, $stack3 = this.<org.openpnp.vision.pipeline.CvPipeline: java.util.Map properties>, 318)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack28 == 0 goto angle#11 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),80,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == null goto $stack102 = new java.lang.Exception,81,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack103 != null goto $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),82,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,$stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),84,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 84)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == null goto $stack102 = new java.lang.Exception,81,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack103 != null goto $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),82,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack103 != null goto $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),82,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack103 != null goto $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),82,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,$stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),84,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 84)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("nozzle", nozzle),103,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('nozzle', nozzle), 103)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == null goto $stack102 = new java.lang.Exception,81,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack103 != null goto $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),82,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)))

List(Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack28 == 0 goto angle#11 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(),80,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == null goto $stack102 = new java.lang.Exception,81,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if $stack103 != null goto $stack104 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),82,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,if part == $stack104 goto angle = virtualinvoke placementLocation.<org.openpnp.model.Location: double getRotation()>(),84,SourceNode, path: ) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(),101,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, pipeline = virtualinvoke partSettings.<org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 101)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>,virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>("camera", camera),102,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsets(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 102)))

