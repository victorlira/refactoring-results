SOURCE=>BASE: Node(<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>,$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(),44,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 44)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack3 = virtualinvoke $stack2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('Validator', ''), 44)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack3 = virtualinvoke $stack2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('Validator', ''), 44) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239))
SINK=>BASE: Node(<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>,$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(),44,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 44)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack3 = virtualinvoke $stack2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('Validator', ''), 44)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack3 = virtualinvoke $stack2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('Validator', ''), 44) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239))

SOURCE=>BASE: Node(<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>,$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(),44,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 44)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack3 = virtualinvoke $stack2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('Validator', ''), 44)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack3 = virtualinvoke $stack2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('Validator', ''), 44) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack3 = virtualinvoke $stack2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('Validator', ''), 44))
SINK=>BASE: Node(<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>,$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(),44,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 44)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack3 = virtualinvoke $stack2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('Validator', ''), 44)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack3 = virtualinvoke $stack2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('Validator', ''), 44) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack3 = virtualinvoke $stack2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('Validator', ''), 44))

SOURCE=>BASE: Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack6 = new java.lang.StringBuilder,144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>(), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create instance of "),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Cannot create instance of '), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(clazz),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(clazz), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using default constructor"),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' using default constructor'), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>(),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>(), 144)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10), 144)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10), 144) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10), 144) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66))
SINK=>BASE: Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create instance of "),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Cannot create instance of '), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(clazz),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(clazz), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using default constructor"),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' using default constructor'), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>(),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>(), 144)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10), 144)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10), 144) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10), 144) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66))

SOURCE=>BASE: Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack6 = new java.lang.StringBuilder,144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>(), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create instance of "),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Cannot create instance of '), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(clazz),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(clazz), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using default constructor"),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' using default constructor'), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>(),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>(), 144)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10), 144)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10), 144) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62))
SINK=>BASE: Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create instance of "),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Cannot create instance of '), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(clazz),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(clazz), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using default constructor"),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' using default constructor'), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>(),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>(), 144)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10), 144)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10), 144) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62))

List(Node(<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>,$stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz),44,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44)) => Node(<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>,interfaceinvoke $stack1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack3, $stack4),44,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, interfaceinvoke $stack1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack3, $stack4), 44)))

List(Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create instance of "),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Cannot create instance of '), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(clazz),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(clazz), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using default constructor"),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' using default constructor'), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>(),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>(), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10),144,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10), 144)))

List(Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Object newInstance()>(),141,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Object newInstance()>(), 141)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack3 = (cc.redpen.validator.Validator) $stack2,141,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,return $stack3,141,SinkNode, path: ))

List(Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Object newInstance()>(),141,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Object newInstance()>(), 141)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack3 = (cc.redpen.validator.Validator) $stack2,141,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44)) => Node(<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>,$stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz),44,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44)) => Node(<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>,interfaceinvoke $stack1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack3, $stack4),44,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, interfaceinvoke $stack1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack3, $stack4), 44)))

List(Node(<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>,$stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz),44,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44)) => Node(<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>,interfaceinvoke $stack1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack3, $stack4),44,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, interfaceinvoke $stack1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack3, $stack4), 44)))

List(Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create instance of "),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Cannot create instance of '), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(clazz),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(clazz), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using default constructor"),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' using default constructor'), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>(),144,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>(), 144)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10),144,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack10), 144)))

List(Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Object newInstance()>(),141,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Object newInstance()>(), 141)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack3 = (cc.redpen.validator.Validator) $stack2,141,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,return $stack3,141,SinkNode, path: ))

List(Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Object newInstance()>(),141,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44) => (<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Object newInstance()>(), 141)) => Node(<cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>,$stack3 = (cc.redpen.validator.Validator) $stack2,141,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44)) => Node(<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>,$stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz),44,SourceNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, $stack4 = staticinvoke <cc.redpen.validator.ValidatorFactory: cc.redpen.validator.Validator createValidator(java.lang.Class)>(clazz), 44)) => Node(<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>,interfaceinvoke $stack1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack3, $stack4),44,SinkNode, path: (<cc.redpen.validator.ValidatorFactory: void <clinit>()>, staticinvoke <cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>(class 'Lcc/redpen/validator/section/DuplicatedSectionValidator;'), 49) => (<cc.redpen.validator.ValidatorFactory: void registerValidator(java.lang.Class)>, interfaceinvoke $stack1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack3, $stack4), 44)))

