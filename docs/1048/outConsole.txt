Running soot scenario jgrapht;org.jgrapht.traverse.CrossComponentIterator;hasNext();eeb3686eb78c03308977f010b359938ed00d8e52
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/eeb3686eb78c03308977f010b359938ed00d8e52/original-without-dependencies/jgrapht-core-1.0.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,47200
Time to perform Confluence 1 Inter 0,38600
Configure Soot Confluence 2 Inter 0,20200
Time to perform Confluence 2 Inter 0,10300
Visited methods: 10
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SimpleNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack7 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(),174,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack7 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(), 174)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack7 == 0 goto return 0,174,SinkNode, path: )
SINK=>BASE: Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack7 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(),174,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack7 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(), 174)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack7 == 0 goto return 0,174,SinkNode, path: ), SOURCE=>BASE: Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SimpleNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SimpleNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: void encounterVertex(java.lang.Object,java.lang.Object)>(v, null),167,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: void encounterVertex(java.lang.Object,java.lang.Object)>(v, null), 167))
SINK=>BASE: Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: void encounterVertex(java.lang.Object,java.lang.Object)>(v, null),167,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: void encounterVertex(java.lang.Object,java.lang.Object)>(v, null), 167)), SOURCE=>BASE: Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SimpleNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SimpleNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: void encounterVertex(java.lang.Object,java.lang.Object)>(v, null),167,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: void encounterVertex(java.lang.Object,java.lang.Object)>(v, null), 167))
SINK=>BASE: Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: void encounterVertex(java.lang.Object,java.lang.Object)>(v, null),167,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: void encounterVertex(java.lang.Object,java.lang.Object)>(v, null), 167)), SOURCE=>BASE: Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SimpleNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack7 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(),174,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack7 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(), 174)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack7 == 0 goto return 0,174,SinkNode, path: )
SINK=>BASE: Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack7 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(),174,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack7 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(), 174)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack7 == 0 goto return 0,174,SinkNode, path: ), SOURCE=>BASE: Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SimpleNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SimpleNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: void encounterVertex(java.lang.Object,java.lang.Object)>(v, null),167,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: void encounterVertex(java.lang.Object,java.lang.Object)>(v, null), 167))
SINK=>BASE: Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: void encounterVertex(java.lang.Object,java.lang.Object)>(v, null),167,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: void encounterVertex(java.lang.Object,java.lang.Object)>(v, null), 167))]
java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:430)
	at scala.collection.immutable.Nil$.head(List.scala:427)
	at scala.collection.generic.TraversableForwarder.head(TraversableForwarder.scala:59)
	at scala.collection.generic.TraversableForwarder.head$(TraversableForwarder.scala:59)
	at scala.collection.mutable.ListBuffer.head(ListBuffer.scala:47)
	at br.unb.cic.analysis.svfa.confluence.DFPConfluenceAnalysis.reportConflictsConfluence(DFPConfluenceAnalysis.java:181)
	at br.unb.cic.analysis.Main.runDFPConfluenceAnalysis(Main.java:566)
	at br.unb.cic.analysis.Main.runAnalysis(Main.java:243)
	at br.unb.cic.analysis.Main.main(Main.java:80)
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/eeb3686eb78c03308977f010b359938ed00d8e52/original-without-dependencies/jgrapht-core-1.0.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,63100
Runtime: 0.008s
Time to perform OA Inter 0,67800
OA Inter Visited methods: 1
 Analysis results
----------------------------
 Number of conflicts: 4
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/eeb3686eb78c03308977f010b359938ed00d8e52/original-without-dependencies/jgrapht-core-1.0.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,44600
Time to perform DFP Inter 0,42200
Depth limit: 5
CONFLICTS: DF interference in <org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>
Data flows from execution of line 164 to 162, defined in $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator> and propagated in v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>()
Caused by line 164 flow: path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)
Caused by line 162 flow: path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)
DF interference in <org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>
Data flows from execution of line 164 to 160, defined in $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator> and propagated in it = $stack15
Caused by line 164 flow: path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)
Caused by line 160 flow: path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)
DF interference in <org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>
Data flows from execution of line 164 to 166, defined in $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator> and propagated in $stack3 = interfaceinvoke $stack2.<java.util.Map: boolean containsKey(java.lang.Object)>(vertex)
Caused by line 164 flow: path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)
Caused by line 166 flow: path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)
[List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if it == null goto return 0,161,SinkNode, path: )), List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>,vertex := @parameter0: java.lang.Object,-1,SimpleNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>,$stack3 = interfaceinvoke $stack2.<java.util.Map: boolean containsKey(java.lang.Object)>(vertex),258,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),166,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack12 != 0 goto (branch),166,SinkNode, path: )), List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162))), List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160))), List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>,vertex := @parameter0: java.lang.Object,-1,SimpleNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>,$stack3 = interfaceinvoke $stack2.<java.util.Map: boolean containsKey(java.lang.Object)>(vertex),258,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)))]
Visited methods: 5
 Analysis results
----------------------------
 Number of conflicts: 5
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/eeb3686eb78c03308977f010b359938ed00d8e52/original-without-dependencies/jgrapht-core-1.0.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,44400
Time to perform DFP Inter 0,30900
Depth limit: 5
CONFLICTS: []
Visited methods: 5
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/eeb3686eb78c03308977f010b359938ed00d8e52/original-without-dependencies/jgrapht-core-1.0.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,44400
Time to perform PDG 0,53200
CONFLICTS: [List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>,163,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>, 163)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack11 = interfaceinvoke $stack10.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(v),163,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack11 = interfaceinvoke $stack10.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(v), 163)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack11 != 0 goto $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),163,SourceNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack12 != 0 goto (branch),166,SinkNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if it == null goto return 0,161,SinkNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack7 == 0 goto return 0,174,SimpleNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),166,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166))), List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>,163,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>, 163)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack11 = interfaceinvoke $stack10.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(v),163,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack11 = interfaceinvoke $stack10.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(v), 163)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack11 != 0 goto $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),163,SourceNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack12 != 0 goto (branch),166,SinkNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if it == null goto return 0,161,SinkNode, path: )), List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),166,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack12 != 0 goto (branch),166,SinkNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if it == null goto return 0,161,SinkNode, path: )), List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162))), List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),166,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166))), List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>,163,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>, 163)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack11 = interfaceinvoke $stack10.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(v),163,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack11 = interfaceinvoke $stack10.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(v), 163)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack11 != 0 goto $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),163,SourceNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack12 != 0 goto (branch),166,SinkNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if it == null goto return 0,161,SinkNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack7 == 0 goto return 0,174,SimpleNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162))), List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)))]
 Analysis results
----------------------------
 Number of conflicts: 7
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/eeb3686eb78c03308977f010b359938ed00d8e52/original-without-dependencies/jgrapht-core-1.0.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,64400
Time to perform PDG 0,44700
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
