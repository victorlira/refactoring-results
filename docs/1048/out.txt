source(org.jgrapht.traverse.CrossComponentIterator, hasNext, 163, $stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>, [at org.jgrapht.traverse.CrossComponentIterator.hasNext(CrossComponentIterator.java:163)]) => sink(org.jgrapht.traverse.CrossComponentIterator, hasNext, 163, $stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>, [at org.jgrapht.traverse.CrossComponentIterator.hasNext(CrossComponentIterator.java:163)])

source(org.jgrapht.traverse.CrossComponentIterator, hasNext, 164, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, [at org.jgrapht.traverse.CrossComponentIterator.hasNext(CrossComponentIterator.java:164)]) => sink(org.jgrapht.traverse.CrossComponentIterator, hasNext, 164, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, [at org.jgrapht.traverse.CrossComponentIterator.hasNext(CrossComponentIterator.java:164)])

source(org.jgrapht.traverse.CrossComponentIterator, hasNext, 164, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, [at org.jgrapht.traverse.CrossComponentIterator.hasNext(CrossComponentIterator.java:164)]) => sink(org.jgrapht.traverse.CrossComponentIterator, hasNext, 164, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, [at org.jgrapht.traverse.CrossComponentIterator.hasNext(CrossComponentIterator.java:164)])

source(org.jgrapht.traverse.CrossComponentIterator, hasNext, 164, $stack14 = new java.lang.IllegalArgumentException, [at org.jgrapht.traverse.CrossComponentIterator.hasNext(CrossComponentIterator.java:164)]) => sink(org.jgrapht.traverse.CrossComponentIterator, hasNext, 164, $stack14 = new java.lang.IllegalArgumentException, [at org.jgrapht.traverse.CrossComponentIterator.hasNext(CrossComponentIterator.java:164)])

List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if it == null goto return 0,161,SinkNode, path: ))

List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>,vertex := @parameter0: java.lang.Object,-1,SimpleNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>,$stack3 = interfaceinvoke $stack2.<java.util.Map: boolean containsKey(java.lang.Object)>(vertex),258,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),166,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack12 != 0 goto (branch),166,SinkNode, path: ))

List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)))

List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)))

List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator startVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>,vertex := @parameter0: java.lang.Object,-1,SimpleNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>,$stack3 = interfaceinvoke $stack2.<java.util.Map: boolean containsKey(java.lang.Object)>(vertex),258,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)))

List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>,163,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>, 163)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack11 = interfaceinvoke $stack10.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(v),163,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack11 = interfaceinvoke $stack10.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(v), 163)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack11 != 0 goto $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),163,SourceNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack12 != 0 goto (branch),166,SinkNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if it == null goto return 0,161,SinkNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack7 == 0 goto return 0,174,SimpleNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),166,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)))

List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>,163,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>, 163)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack11 = interfaceinvoke $stack10.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(v),163,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack11 = interfaceinvoke $stack10.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(v), 163)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack11 != 0 goto $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),163,SourceNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack12 != 0 goto (branch),166,SinkNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if it == null goto return 0,161,SinkNode, path: ))

List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),166,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack12 != 0 goto (branch),166,SinkNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if it == null goto return 0,161,SinkNode, path: ))

List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)))

List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),166,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v), 166)))

List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>,163,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack10 = this.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.Graph graph>, 163)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack11 = interfaceinvoke $stack10.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(v),163,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack11 = interfaceinvoke $stack10.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(v), 163)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack11 != 0 goto $stack12 = virtualinvoke this.<org.jgrapht.traverse.CrossComponentIterator: boolean isSeenVertex(java.lang.Object)>(v),163,SourceNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack12 != 0 goto (branch),166,SinkNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if it == null goto return 0,161,SinkNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,if $stack7 == 0 goto return 0,174,SimpleNode, path: ) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(),162,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, v = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 162)))

List(Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,$stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>,164,SourceNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, $stack15 = this.<org.jgrapht.traverse.CrossComponentIterator: java.util.Iterator entireGraphVertexIterator>, 164)) => Node(<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>,it = $stack15,160,SinkNode, path: (<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>, it = $stack15, 160)))

