Running soot scenario assertj-assertions-generator;org.assertj.assertions.generator.BaseAssertionGenerator;assertionContentFor(GetterDescription);90ea9aa591a04829f67fe32d1f2f97fa3ca20064
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/90ea9aa591a04829f67fe32d1f2f97fa3ca20064/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,47100
Time to perform Confluence 1 Inter 0,65500
Configure Soot Confluence 2 Inter 0,19500
Time to perform Confluence 2 Inter 0,16000
Visited methods: 48
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),284,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 284))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),284,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 284)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack4.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 239)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack48.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),241,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack48.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 241)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack37 = new java.lang.StringBuilder,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, specialinvoke $stack37.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack38), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack4.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 239)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack48.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),241,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack48.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 241)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack35),250,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35), 250)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(),293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32),289,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32), 289))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32),289,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32), 289)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),284,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 284))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),284,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 284)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{Property\\}", $stack13),259,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{Property\\}', $stack13), 259)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{property\\}", sb#28),261,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{property\\}', sb#28), 261)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,return $stack18,261,SinkNode, path: )
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2223,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247) => (<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2223)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(l2),2223,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{property\\}", sb#28),261,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{property\\}', sb#28), 261)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,return $stack18,261,SinkNode, path: ), SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2223,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247) => (<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2223)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(l2),2223,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2223,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247) => (<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2223)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(l2),2223,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2223,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247) => (<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2223)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(l2),2223,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2223,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247) => (<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2223)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(l2),2223,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack4.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 239)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack41 = virtualinvoke $stack40.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack41 = virtualinvoke $stack40.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 247))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack4.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 239)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack48.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),241,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack48.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 241)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack4.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 239)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack48.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),241,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack48.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 241)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack37 = new java.lang.StringBuilder,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, specialinvoke $stack37.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack38), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(),65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack8 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(),242,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack8 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 242)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,if $stack8 == 0 goto $stack9 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isPrimitivePropertyType()>(),242,SinkNode, path: )
SINK=>BASE: Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>,65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 65)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(),65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack8 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(),242,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack8 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 242)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,if $stack8 == 0 goto $stack9 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isPrimitivePropertyType()>(),242,SinkNode, path: ), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throws "),277,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws '), 277))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throws "),277,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws '), 277)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", "),279,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', '), 279))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", "),279,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', '), 279)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", "),279,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', '), 279))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", "),279,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', '), 279)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(),293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32),289,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32), 289))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32),289,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32), 289)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{Property\\}", $stack13),259,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{Property\\}', $stack13), 259)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{property\\}", sb#28),261,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{property\\}', sb#28), 261)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,return $stack18,261,SinkNode, path: )
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2223,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247) => (<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2223)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(l2),2223,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{property\\}", sb#28),261,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{property\\}', sb#28), 261)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,return $stack18,261,SinkNode, path: ), SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{Property\\}", $stack13),259,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{Property\\}', $stack13), 259)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{property\\}", sb#28),261,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{property\\}', sb#28), 261)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,return $stack18,261,SinkNode, path: )
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{Property\\}", $stack13),259,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{Property\\}', $stack13), 259)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{property\\}", sb#28),261,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{property\\}', sb#28), 261)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,return $stack18,261,SinkNode, path: ), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(),293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),283,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 283))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),283,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 283)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack4.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 239)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack48.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),241,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack48.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 241)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack35),250,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35), 250)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack4.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 239)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack33 = virtualinvoke $stack32.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),250,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack33 = virtualinvoke $stack32.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 250))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack35),250,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35), 250)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{Property\\}", $stack13),259,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{Property\\}', $stack13), 259)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack4.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 239)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack41 = virtualinvoke $stack40.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack41 = virtualinvoke $stack40.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{Property\\}", $stack13),259,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{Property\\}', $stack13), 259))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{Property\\}", $stack13),259,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{Property\\}', $stack13), 259)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack4.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 239)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack41 = virtualinvoke $stack40.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack41 = virtualinvoke $stack40.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{Property\\}", $stack13),259,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{Property\\}', $stack13), 259))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{Property\\}", $stack13),259,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{Property\\}', $stack13), 259)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack4.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 239)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack48.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),241,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack48.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 241)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(),65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack8 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(),242,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack8 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 242)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,if $stack8 == 0 goto $stack9 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isPrimitivePropertyType()>(),242,SinkNode, path: )
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(),65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack8 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(),242,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack8 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 242)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,if $stack8 == 0 goto $stack9 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isPrimitivePropertyType()>(),242,SinkNode, path: ), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(),57,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{Property\\}", $stack13),259,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{Property\\}', $stack13), 259)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),64,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack16 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>(), 260) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getPropertyTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: java.lang.String getSimpleNameWithOuterClass()>(), 57)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(),293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),283,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 283))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),283,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 283)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throws "),277,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws '), 277))
SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throws "),277,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws '), 277)), SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{Property\\}", $stack13),259,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{Property\\}', $stack13), 259)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{property\\}", sb#28),261,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{property\\}', sb#28), 261)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,return $stack18,261,SinkNode, path: )
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{Property\\}", $stack13),259,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{Property\\}', $stack13), 259)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16),260,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{property\\}", sb#28),261,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack18 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{property\\}', sb#28), 261)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,return $stack18,261,SinkNode, path: ), SOURCE=>BASE: Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack4.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 239)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack41 = virtualinvoke $stack40.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack41 = virtualinvoke $stack40.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 247))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack37 = new java.lang.StringBuilder,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, specialinvoke $stack37.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack38), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247))]
Confluence interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Confluence flows from execution of lines 243 and 243 to line 256, defined in $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>() and $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>() and used in assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 284)
Confluence interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Confluence flows from execution of lines 243 and 243 to line 260, defined in $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>() and $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>() and used in assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{propertyType\\}", $stack16)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)
Caused by line 260 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke assertionContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{propertyType\\}', $stack16), 260)
Confluence interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Confluence flows from execution of lines 239 and 243 to line 256, defined in assertionContent = virtualinvoke $stack4.<org.assertj.assertions.generator.Template: java.lang.String getContent()>() and specialinvoke $stack37.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack38) and used in assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent)
Caused by line 239 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack4.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 239)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, specialinvoke $stack37.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack38), 243)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)
Confluence interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Confluence flows from execution of lines 256 and 243 to line 256, defined in assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent) and $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>() and used in assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32), 289)
java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:430)
	at scala.collection.immutable.Nil$.head(List.scala:427)
	at scala.collection.generic.TraversableForwarder.head(TraversableForwarder.scala:59)
	at scala.collection.generic.TraversableForwarder.head$(TraversableForwarder.scala:59)
	at scala.collection.mutable.ListBuffer.head(ListBuffer.scala:47)
	at br.unb.cic.analysis.svfa.confluence.DFPConfluenceAnalysis.reportConflictsConfluence(DFPConfluenceAnalysis.java:181)
	at br.unb.cic.analysis.Main.runDFPConfluenceAnalysis(Main.java:566)
	at br.unb.cic.analysis.Main.runAnalysis(Main.java:243)
	at br.unb.cic.analysis.Main.main(Main.java:80)
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/90ea9aa591a04829f67fe32d1f2f97fa3ca20064/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,68700
Runtime: 0.014s
OA interference in class BaseAssertionGenerator, method java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription), execution of line 243 overrides 243, assigning to variable sb, 
Caused by line 243 flow:
at org.assertj.assertions.generator.BaseAssertionGenerator.assertionContentFor(BaseAssertionGenerator.java:243)
And line 243 flow:
at org.assertj.assertions.generator.BaseAssertionGenerator.assertionContentFor(BaseAssertionGenerator.java:243)
 
Time to perform OA Inter 0,76000
OA Inter Visited methods: 1
 Analysis results
----------------------------
 Number of conflicts: 2
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/90ea9aa591a04829f67fe32d1f2f97fa3ca20064/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,44600
Time to perform DFP Inter 0,72000
Depth limit: 5
CONFLICTS: DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(),293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,return $stack2,61,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>,65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,this := @this: org.assertj.assertions.generator.description.TypeDescription,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(),65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,return $stack2,65,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>,65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,this := @this: org.assertj.assertions.generator.description.TypeDescription,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,return $stack1,68,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(),293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>,$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: java.util.List exceptions>,90,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(),293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,return $stack2,61,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(),65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,return $stack2,65,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,return $stack1,68,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,return $stack1,84,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack3 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>,81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack3 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,this := @this: org.assertj.assertions.generator.description.TypeDescription,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,return $stack1,84,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>,$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: java.util.List exceptions>,90,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(),293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: ))]
Visited methods: 24
 Analysis results
----------------------------
 Number of conflicts: 23
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/90ea9aa591a04829f67fe32d1f2f97fa3ca20064/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,59900
Time to perform DFP Inter 0,71400
Depth limit: 5
CONFLICTS: DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 248 to 256, defined in $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>() and propagated in assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17)
Caused by line 248 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass> and propagated in virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 284)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass> and propagated in throwsClause = $stack9
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass> and propagated in assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass> and propagated in assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 248 to 256, defined in $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>() and propagated in assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent)
Caused by line 248 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>() and propagated in assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass> and propagated in virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ")
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', '), 279)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName> and propagated in assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName> and propagated in virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 283)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName> and propagated in virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throws ")
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws '), 277)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in sb = $stack37 and propagated in assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName> and propagated in assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName> and propagated in virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32), 289)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName> and propagated in exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>() and propagated in assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass> and propagated in virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throws ")
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws '), 277)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName> and propagated in virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ")
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', '), 279)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in sb = $stack37 and propagated in assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass> and propagated in exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName> and propagated in throwsClause = $stack9
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName> and propagated in virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 284)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in sb = $stack37 and propagated in assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 248 to 256, defined in $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>() and propagated in assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20)
Caused by line 248 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass> and propagated in virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32), 289)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>() and propagated in assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)
DF interference in <org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>
Data flows from execution of line 243 to 256, defined in $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass> and propagated in virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName)
Caused by line 243 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)
Caused by line 256 flow: path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 283)
[List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272))), List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256))), List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throws "),277,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws '), 277))), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   * @throws "),284,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('   * @throws '), 284)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),284,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 284))), List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", "),279,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', '), 279))), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282))), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272))), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(), 292)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256))), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,return $stack2,61,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", "),279,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', '), 279))), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282))), List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack35),250,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35), 250)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256))), List(Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>,65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,this := @this: org.assertj.assertions.generator.description.TypeDescription,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(),65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,return $stack2,65,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32),289,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32), 289))), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throws "),277,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws '), 277))), List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291))), List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),283,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 283))), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(), 292)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256))), List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>,65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,this := @this: org.assertj.assertions.generator.description.TypeDescription,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,return $stack1,68,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,return $stack2,61,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   * @throws "),284,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('   * @throws '), 284)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),284,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 284))), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32),289,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32), 289))), List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256))), List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack35),250,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35), 250)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291))), List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291))), List(Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(),65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,return $stack2,65,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),283,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 283))), List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256))), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(), 292)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256))), List(Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,return $stack1,68,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack35),250,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35), 250)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256))), List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,return $stack1,84,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack3 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>,81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack3 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,this := @this: org.assertj.assertions.generator.description.TypeDescription,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,return $stack1,84,SinkNode, path: )), List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256))), List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(), 292)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)))]
Visited methods: 24
 Analysis results
----------------------------
 Number of conflicts: 44
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/90ea9aa591a04829f67fe32d1f2f97fa3ca20064/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,56800
Time to perform PDG 0,42000
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/90ea9aa591a04829f67fe32d1f2f97fa3ca20064/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,55400
Time to perform PDG 0,50900
CONFLICTS: [List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256))), List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack19.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),253,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack19.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 253))), List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256))), List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack19.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),253,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack19.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 253)))]
 Analysis results
----------------------------
 Number of conflicts: 4
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
