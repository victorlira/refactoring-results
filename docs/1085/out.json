[
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "sb - sb",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "sb = $stack37",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.BaseAssertionGenerator",
					"method": "assertionContentFor",
					"line": 243
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.BaseAssertionGenerator",
	"method": "assertionContentFor",
	"line": 243
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "sb = $stack37",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.BaseAssertionGenerator",
					"method": "assertionContentFor",
					"line": 243
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.BaseAssertionGenerator",
	"method": "assertionContentFor",
	"line": 243
}]
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "275"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "293"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "exception = (org.assertj.assertions.generator.description.TypeName) $stack28",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "293"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: java.util.List exceptions>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>",
  "line": "90"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(), 275)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "275"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(), 275)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "275"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "293"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "exception = (org.assertj.assertions.generator.description.TypeName) $stack28",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "293"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception = (org.assertj.assertions.generator.description.TypeName) $stack28",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "293"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>",
  "line": "65"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 65)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: java.util.List exceptions>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>",
  "line": "90"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(), 275)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "275"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(), 275)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "275"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "293"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "exception = (org.assertj.assertions.generator.description.TypeName) $stack28",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "293"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception = (org.assertj.assertions.generator.description.TypeName) $stack28",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "293"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>",
  "line": "65"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 65)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>",
  "line": "65"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>",
  "line": "65"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "275"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "293"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "exception = (org.assertj.assertions.generator.description.TypeName) $stack28",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "293"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>",
  "line": "65"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>",
  "line": "65"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack3 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": [""]
}]
}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "251"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "250"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35), 250)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "291"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "248"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "247"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "291"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "2239"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)","(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "2240"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws}', $stack20)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "292"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "256"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "292"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws}', $stack20)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "292"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "256"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "sb = $stack37",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "243"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "248"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "247"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "291"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "2239"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)","(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "2240"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws}', $stack20)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "292"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "256"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "sb = $stack37",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "243"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "248"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "247"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "291"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "251"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "250"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35), 250)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "291"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "2239"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)","(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "2240"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws}', $stack20)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "292"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "289"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32), 289)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>",
  "line": "65"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 65)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws ')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "277"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws '), 277)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "283"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 283)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', ')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "279"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', '), 279)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "251"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "250"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35), 250)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "256"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "248"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "247"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "291"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "2239"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)","(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "2240"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws}', $stack20)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "292"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws ')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "277"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws '), 277)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "292"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws}', $stack20)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "292"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "248"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "247"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "291"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('   * @throws ')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "284"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('   * @throws '), 284)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "284"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 284)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>",
  "line": "65"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 65)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>",
  "line": "65"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>",
  "line": "65"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)","(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>",
  "line": "65"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>",
  "line": "65"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "283"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 283)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack3 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "292"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws}', $stack20)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "292"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "256"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "292"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws}', $stack20)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "292"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', ')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "279"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', '), 279)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "throwsClause = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "272"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "289"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32), 289)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "sb = $stack37",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "243"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "248"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>",
  "line": "247"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "assertionContent := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "291"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "2239"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)","(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
  "line": "2240"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws}', $stack20)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "292"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('   * @throws ')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "284"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('   * @throws '), 284)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "284"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 284)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>",
  "line": "84"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>",
  "line": "57"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)","(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)","(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>",
  "line": "282"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)","(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)"]
}]
}
}

]
