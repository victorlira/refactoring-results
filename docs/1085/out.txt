source(org.assertj.assertions.generator.BaseAssertionGenerator, assertionContentFor, 243, $stack37 = new java.lang.StringBuilder, [at org.assertj.assertions.generator.BaseAssertionGenerator.assertionContentFor(BaseAssertionGenerator.java:243)]) => sink(org.assertj.assertions.generator.BaseAssertionGenerator, assertionContentFor, 243, $stack37 = new java.lang.StringBuilder, [at org.assertj.assertions.generator.BaseAssertionGenerator.assertionContentFor(BaseAssertionGenerator.java:243)])

source(org.assertj.assertions.generator.BaseAssertionGenerator, assertionContentFor, 243, sb = $stack37, [at org.assertj.assertions.generator.BaseAssertionGenerator.assertionContentFor(BaseAssertionGenerator.java:243)]) => sink(org.assertj.assertions.generator.BaseAssertionGenerator, assertionContentFor, 243, sb = $stack37, [at org.assertj.assertions.generator.BaseAssertionGenerator.assertionContentFor(BaseAssertionGenerator.java:243)])

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(),293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,return $stack2,61,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>,65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,this := @this: org.assertj.assertions.generator.description.TypeDescription,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(),65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,return $stack2,65,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>,65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,this := @this: org.assertj.assertions.generator.description.TypeDescription,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,return $stack1,68,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(),293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>,$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: java.util.List exceptions>,90,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(),293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,return $stack2,61,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(),65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,return $stack2,65,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,return $stack1,68,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,return $stack1,84,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack3 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>,81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack3 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,this := @this: org.assertj.assertions.generator.description.TypeDescription,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,return $stack1,84,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>,$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: java.util.List exceptions>,90,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack11 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.util.List getExceptions()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(),275,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, l6 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 275)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(),293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack28 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 293)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exception = (org.assertj.assertions.generator.description.TypeName) $stack28,293,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exception = (org.assertj.assertions.generator.description.TypeName) $stack28, 293)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throws "),277,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws '), 277)))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   * @throws "),284,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('   * @throws '), 284)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),284,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 284)))

List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", "),279,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', '), 279)))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(), 292)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,return $stack2,61,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", "),279,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(', '), 279)))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack35),250,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35), 250)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>,65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,this := @this: org.assertj.assertions.generator.description.TypeDescription,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(),65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,return $stack2,65,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32),289,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32), 289)))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throws "),277,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('throws '), 277)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,return $stack5,81,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),283,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 283)))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(), 292)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)))

List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>,65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack1 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,this := @this: org.assertj.assertions.generator.description.TypeDescription,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,return $stack1,68,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack4 = virtualinvoke $stack3.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,this := @this: org.assertj.assertions.generator.description.TypeName,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>, 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,if $stack1 != null goto $stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,return $stack2,61,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   * @throws "),284,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('   * @throws '), 284)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),284,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 284)))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32),289,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32), 289)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack35),250,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35), 250)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)))

List(Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,$stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(),65,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244)) => Node(<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>,return $stack2,65,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName),283,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(exceptionName), 283)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleNameWithOuterClass>,61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(), 292)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)))

List(Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray>,68,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack39 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>(), 244) => (<org.assertj.assertions.generator.description.GetterDescription: boolean isArrayPropertyType()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>(), 65)) => Node(<org.assertj.assertions.generator.description.TypeDescription: boolean isArray()>,return $stack1,68,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(),251,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack35 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 251)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack35),250,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack35), 250)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)))

List(Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,return $stack1,84,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,return $stack1,57,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>,$stack3 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>,81,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack3 = this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription>, 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,this := @this: org.assertj.assertions.generator.description.TypeDescription,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName elementTypeName>,84,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack2 = virtualinvoke $stack1.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>(), 81)) => Node(<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName getElementTypeName()>,return $stack1,84,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws_javadoc}", $stack17),291,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2239,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291) => (<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>, $stack5 = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2239)) => Node(<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>,$stack8 = virtualinvoke $stack5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($stack7),2240,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, assertionContent#4 = virtualinvoke assertionContent.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>('${throws_javadoc}', $stack17), 291)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)))

List(Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>,$stack1 = this.<org.assertj.assertions.generator.description.TypeName: java.lang.String typeSimpleName>,57,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81) => (<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>, $stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(), 61)) => Node(<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>,$stack2 = virtualinvoke this.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleName()>(),61,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack38 = virtualinvoke getter.<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>(), 243) => (<org.assertj.assertions.generator.description.GetterDescription: java.lang.String getElementTypeName()>, $stack5 = virtualinvoke $stack4.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 81)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(),282,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, exceptionName = virtualinvoke exception.<org.assertj.assertions.generator.description.TypeName: java.lang.String getSimpleNameWithOuterClass()>(), 282)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,throwsClause = $stack9,272,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, throwsClause = $stack9, 272)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,$stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256) => (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>, $stack20 = virtualinvoke throwsClause.<java.lang.StringBuilder: java.lang.String toString()>(), 292)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>,assertionContent#4 = virtualinvoke assertionContent#4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${throws}", $stack20),292,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack19.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),253,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack19.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 253)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent),256,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = specialinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String declareExceptions(org.assertj.assertions.generator.description.GetterDescription,java.lang.String)>(getter, assertionContent), 256)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,sb = $stack37,243,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, sb = $stack37, 243)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,$stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(),248,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, $stack43 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>(), 248)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\$\\{elementType\\}", $stack43),247,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\$\\{elementType\\}', $stack43), 247)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>,assertionContent = virtualinvoke $stack19.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),253,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: java.lang.String assertionContentFor(org.assertj.assertions.generator.description.GetterDescription)>, assertionContent = virtualinvoke $stack19.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 253)))

