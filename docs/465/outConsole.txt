Running soot scenario datasift-java;org.datasift.tests.TestUser;testRateLimits();63473e61923aeb786325b6edf3828aa7538be0e6
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/63473e61923aeb786325b6edf3828aa7538be0e6/original-without-dependencies/datasift-java-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,74700
Time to perform Confluence 1 Inter 1,14900
Configure Soot Confluence 2 Inter 0,16900
Time to perform Confluence 2 Inter 0,83900
Visited methods: 88
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/63473e61923aeb786325b6edf3828aa7538be0e6/original-without-dependencies/datasift-java-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,62700
Runtime: 0.009s
Time to perform OA Inter 0,70400
OA Inter Visited methods: 1
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/63473e61923aeb786325b6edf3828aa7538be0e6/original-without-dependencies/datasift-java-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,48900
Time to perform DFP Inter 0,84800
Depth limit: 5
CONFLICTS: []
Visited methods: 44
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/63473e61923aeb786325b6edf3828aa7538be0e6/original-without-dependencies/datasift-java-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,60100
Time to perform DFP Inter 0,98700
Depth limit: 5
CONFLICTS: DF interference in <org.datasift.tests.TestUser: void testRateLimits()>
Data flows from execution of line 74 to 76, defined in def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3) and propagated in this.<org.datasift.ApiResponse: java.lang.String _body> = body
Caused by line 74 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)
Caused by line 76 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: java.lang.String _body> = body, 34)
DF interference in <org.datasift.tests.TestUser: void testRateLimits()>
Data flows from execution of line 74 to 76, defined in def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3) and propagated in this.<org.datasift.ApiResponse: int _rate_limit_remaining> = rate_limit_remaining
Caused by line 74 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)
Caused by line 76 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: int _rate_limit_remaining> = rate_limit_remaining, 36)
DF interference in <org.datasift.tests.TestUser: void testRateLimits()>
Data flows from execution of line 74 to 76, defined in $stack2 = new org.datasift.Definition and propagated in this.<org.datasift.ApiResponse: java.lang.String _body> = body
Caused by line 74 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)
Caused by line 76 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: java.lang.String _body> = body, 34)
DF interference in <org.datasift.tests.TestUser: void testRateLimits()>
Data flows from execution of line 74 to 76, defined in def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3) and propagated in this.<org.datasift.ApiResponse: java.lang.String _reason_phrase> = reason_phrase
Caused by line 74 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)
Caused by line 76 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: java.lang.String _reason_phrase> = reason_phrase, 33)
DF interference in <org.datasift.tests.TestUser: void testRateLimits()>
Data flows from execution of line 74 to 76, defined in def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3) and propagated in this.<org.datasift.ApiResponse: int _status_code> = status_code
Caused by line 74 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)
Caused by line 76 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: int _status_code> = status_code, 32)
DF interference in <org.datasift.tests.TestUser: void testRateLimits()>
Data flows from execution of line 74 to 76, defined in $stack2 = new org.datasift.Definition and propagated in this.<org.datasift.ApiResponse: int _status_code> = status_code
Caused by line 74 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)
Caused by line 76 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: int _status_code> = status_code, 32)
DF interference in <org.datasift.tests.TestUser: void testRateLimits()>
Data flows from execution of line 74 to 76, defined in $stack2 = new org.datasift.Definition and propagated in this.<org.datasift.ApiResponse: java.lang.String _reason_phrase> = reason_phrase
Caused by line 74 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)
Caused by line 76 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: java.lang.String _reason_phrase> = reason_phrase, 33)
DF interference in <org.datasift.tests.TestUser: void testRateLimits()>
Data flows from execution of line 74 to 76, defined in $stack2 = new org.datasift.Definition and propagated in this.<org.datasift.ApiResponse: int _rate_limit_remaining> = rate_limit_remaining
Caused by line 74 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)
Caused by line 76 flow: path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: int _rate_limit_remaining> = rate_limit_remaining, 36)
[List(Node(<org.datasift.tests.TestUser: void testRateLimits()>,def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3),74,SourceNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)) => Node(<org.datasift.Definition: void validate()>,this := @this: org.datasift.Definition,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.ApiClient,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>,67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>, 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5),67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5), 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,headers = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.Header[] getAllHeaders()>(),74,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, headers = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.Header[] getAllHeaders()>(), 74)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack58 = headers[i],81,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack58 = headers[i], 81)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack59 = interfaceinvoke $stack58.<org.apache.http.Header: java.lang.String getValue()>(),81,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack59 = interfaceinvoke $stack58.<org.apache.http.Header: java.lang.String getValue()>(), 81)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, rate_limit = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack62), 78)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, rate_limit = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack62), 78)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,rate_limit_remaining = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack59),80,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, rate_limit_remaining = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack59), 80)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,rate_limit_remaining := @parameter4: int,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,this.<org.datasift.ApiResponse: int _rate_limit_remaining> = rate_limit_remaining,36,SinkNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: int _rate_limit_remaining> = rate_limit_remaining, 36))), List(Node(<org.datasift.tests.TestUser: void testRateLimits()>,def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3),74,SourceNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)) => Node(<org.datasift.Definition: void validate()>,this := @this: org.datasift.Definition,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.ApiClient,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>,67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>, 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5),67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5), 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack42 = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(),95,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack42 = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(), 95)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack43 = interfaceinvoke $stack42.<org.apache.http.StatusLine: int getStatusCode()>(),95,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack43 = interfaceinvoke $stack42.<org.apache.http.StatusLine: int getStatusCode()>(), 95)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,status_code := @parameter0: int,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,this.<org.datasift.ApiResponse: int _status_code> = status_code,32,SinkNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: int _status_code> = status_code, 32))), List(Node(<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>,$stack2 = new org.datasift.Definition,196,SourceNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)) => Node(<org.datasift.tests.TestUser: void testRateLimits()>,def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3),74,SourceNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)) => Node(<org.datasift.Definition: void validate()>,this := @this: org.datasift.Definition,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.ApiClient,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>,67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>, 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5),67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5), 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack44 = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(),96,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack44 = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(), 96)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack45 = interfaceinvoke $stack44.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>(),96,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack45 = interfaceinvoke $stack44.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>(), 96)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,reason_phrase := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,this.<org.datasift.ApiResponse: java.lang.String _reason_phrase> = reason_phrase,33,SinkNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: java.lang.String _reason_phrase> = reason_phrase, 33))), List(Node(<org.datasift.tests.TestUser: void testRateLimits()>,def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3),74,SourceNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)) => Node(<org.datasift.Definition: void validate()>,this := @this: org.datasift.Definition,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.ApiClient,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>,67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>, 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5),67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5), 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack44 = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(),96,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack44 = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(), 96)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack45 = interfaceinvoke $stack44.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>(),96,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack45 = interfaceinvoke $stack44.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>(), 96)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,reason_phrase := @parameter1: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,this.<org.datasift.ApiResponse: java.lang.String _reason_phrase> = reason_phrase,33,SinkNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: java.lang.String _reason_phrase> = reason_phrase, 33))), List(Node(<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>,$stack2 = new org.datasift.Definition,196,SourceNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)) => Node(<org.datasift.tests.TestUser: void testRateLimits()>,def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3),74,SourceNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)) => Node(<org.datasift.Definition: void validate()>,this := @this: org.datasift.Definition,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.ApiClient,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>,67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>, 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5),67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5), 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack42 = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(),95,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack42 = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(), 95)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack43 = interfaceinvoke $stack42.<org.apache.http.StatusLine: int getStatusCode()>(),95,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack43 = interfaceinvoke $stack42.<org.apache.http.StatusLine: int getStatusCode()>(), 95)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,status_code := @parameter0: int,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,this.<org.datasift.ApiResponse: int _status_code> = status_code,32,SinkNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: int _status_code> = status_code, 32))), List(Node(<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>,$stack2 = new org.datasift.Definition,196,SourceNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)) => Node(<org.datasift.tests.TestUser: void testRateLimits()>,def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3),74,SourceNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)) => Node(<org.datasift.Definition: void validate()>,this := @this: org.datasift.Definition,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.ApiClient,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>,67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>, 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5),67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5), 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,entity = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>(),69,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, entity = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>(), 69)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,i#10 = staticinvoke <org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>(entity),87,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, i#10 = staticinvoke <org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>(entity), 87)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,body := @parameter2: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,this.<org.datasift.ApiResponse: java.lang.String _body> = body,34,SinkNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: java.lang.String _body> = body, 34))), List(Node(<org.datasift.tests.TestUser: void testRateLimits()>,def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3),74,SourceNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)) => Node(<org.datasift.Definition: void validate()>,this := @this: org.datasift.Definition,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.ApiClient,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>,67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>, 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5),67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5), 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,entity = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>(),69,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, entity = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>(), 69)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,i#10 = staticinvoke <org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>(entity),87,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, i#10 = staticinvoke <org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>(entity), 87)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,body := @parameter2: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,this.<org.datasift.ApiResponse: java.lang.String _body> = body,34,SinkNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: java.lang.String _body> = body, 34))), List(Node(<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>,$stack2 = new org.datasift.Definition,196,SourceNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)) => Node(<org.datasift.tests.TestUser: void testRateLimits()>,def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3),74,SourceNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, def = virtualinvoke $stack4.<org.datasift.User: org.datasift.Definition createDefinition(java.lang.String)>($stack3), 74)) => Node(<org.datasift.Definition: void validate()>,this := @this: org.datasift.Definition,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.ApiClient,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>,67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack36 = this.<org.datasift.ApiClient: org.apache.http.client.HttpClient _http_client>, 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5),67,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, key#6 = interfaceinvoke $stack36.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(post#5), 67)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,headers = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.Header[] getAllHeaders()>(),74,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, headers = interfaceinvoke key#6.<org.apache.http.HttpResponse: org.apache.http.Header[] getAllHeaders()>(), 74)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack58 = headers[i],81,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack58 = headers[i], 81)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,$stack59 = interfaceinvoke $stack58.<org.apache.http.Header: java.lang.String getValue()>(),81,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, $stack59 = interfaceinvoke $stack58.<org.apache.http.Header: java.lang.String getValue()>(), 81)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, rate_limit = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack62), 78)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, rate_limit = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack62), 78)) => Node(<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>,rate_limit_remaining = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack59),80,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 79) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, rate_limit_remaining = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack59), 80)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,rate_limit_remaining := @parameter4: int,-1,SimpleNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69)) => Node(<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>,this.<org.datasift.ApiResponse: int _rate_limit_remaining> = rate_limit_remaining,36,SinkNode, path: (<org.datasift.tests.TestUser: void testRateLimits()>, virtualinvoke $stack6.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>('{\'hash\':\'947b690ec9dca525fb8724645e088d79\',\'created_at\':\'2011-05-16 17:20:02\',\'dpu\':\'10\'}', 200, 150, 100), 76) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int)>, virtualinvoke this.<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>(body, status_code, rate_limit, rate_limit_remaining, 'OK'), 55) => (<org.datasift.MockApiClient: void setResponse(java.lang.String,int,int,int,java.lang.String)>, specialinvoke $stack6.<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>(status_code, reason_phrase, body, rate_limit, rate_limit_remaining), 69) => (<org.datasift.ApiResponse: void <init>(int,java.lang.String,java.lang.String,int,int)>, this.<org.datasift.ApiResponse: int _rate_limit_remaining> = rate_limit_remaining, 36)))]
Visited methods: 44
 Analysis results
----------------------------
 Number of conflicts: 8
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/63473e61923aeb786325b6edf3828aa7538be0e6/original-without-dependencies/datasift-java-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,53900
Time to perform PDG 0,48500
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/63473e61923aeb786325b6edf3828aa7538be0e6/original-without-dependencies/datasift-java-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,62300
Time to perform PDG 0,39700
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
