SOURCE=>BASE: Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,$stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(),346,SourceNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(), 346)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832))
SINK=>BASE: Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,$stack31 = virtualinvoke container.<com.kpelykh.docker.client.model.ContainerCreateResponse: java.lang.String getId()>(),343,SourceNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack31 = virtualinvoke container.<com.kpelykh.docker.client.model.ContainerCreateResponse: java.lang.String getId()>(), 343)) => Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,filesystemDiff = virtualinvoke $stack30.<com.kpelykh.docker.client.DockerClient: java.util.List containerDiff(java.lang.String)>($stack31),343,SourceNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, filesystemDiff = virtualinvoke $stack30.<com.kpelykh.docker.client.DockerClient: java.util.List containerDiff(java.lang.String)>($stack31), 343)) => Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,$stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(),346,SimpleNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(), 346)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832))

SOURCE=>BASE: Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,$stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(),346,SourceNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(), 346)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))
SINK=>BASE: Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,$stack31 = virtualinvoke container.<com.kpelykh.docker.client.model.ContainerCreateResponse: java.lang.String getId()>(),343,SourceNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack31 = virtualinvoke container.<com.kpelykh.docker.client.model.ContainerCreateResponse: java.lang.String getId()>(), 343)) => Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,filesystemDiff = virtualinvoke $stack30.<com.kpelykh.docker.client.DockerClient: java.util.List containerDiff(java.lang.String)>($stack31),343,SourceNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, filesystemDiff = virtualinvoke $stack30.<com.kpelykh.docker.client.DockerClient: java.util.List containerDiff(java.lang.String)>($stack31), 343)) => Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,$stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(),346,SimpleNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(), 346)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))

SOURCE=>BASE: Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,$stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(),346,SourceNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(), 346)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831))
SINK=>BASE: Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,$stack31 = virtualinvoke container.<com.kpelykh.docker.client.model.ContainerCreateResponse: java.lang.String getId()>(),343,SourceNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack31 = virtualinvoke container.<com.kpelykh.docker.client.model.ContainerCreateResponse: java.lang.String getId()>(), 343)) => Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,filesystemDiff = virtualinvoke $stack30.<com.kpelykh.docker.client.DockerClient: java.util.List containerDiff(java.lang.String)>($stack31),343,SourceNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, filesystemDiff = virtualinvoke $stack30.<com.kpelykh.docker.client.DockerClient: java.util.List containerDiff(java.lang.String)>($stack31), 343)) => Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,$stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(),346,SimpleNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(), 346)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exitCode), 341) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831))

List(Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,$stack30 = this.<com.kpelykh.docker.client.test.DockerClientTest: com.kpelykh.docker.client.DockerClient dockerClient>,343,SourceNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack30 = this.<com.kpelykh.docker.client.test.DockerClientTest: com.kpelykh.docker.client.DockerClient dockerClient>, 343)) => Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,filesystemDiff = virtualinvoke $stack30.<com.kpelykh.docker.client.DockerClient: java.util.List containerDiff(java.lang.String)>($stack31),343,SourceNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, filesystemDiff = virtualinvoke $stack30.<com.kpelykh.docker.client.DockerClient: java.util.List containerDiff(java.lang.String)>($stack31), 343)) => Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,$stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(),346,SinkNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(), 346)) => Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,$stack37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack36),346,SinkNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack36), 346)))

List(Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,filesystemDiff = virtualinvoke $stack30.<com.kpelykh.docker.client.DockerClient: java.util.List containerDiff(java.lang.String)>($stack31),343,SourceNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, filesystemDiff = virtualinvoke $stack30.<com.kpelykh.docker.client.DockerClient: java.util.List containerDiff(java.lang.String)>($stack31), 343)) => Node(<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>,$stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(),346,SinkNode, path: (<com.kpelykh.docker.client.test.DockerClientTest: void testDiff()>, $stack36 = interfaceinvoke filesystemDiff.<java.util.List: int size()>(), 346)))

