Running soot scenario pom-manipulation-ext;org.commonjava.maven.ext.io.rest.DefaultTranslator;translateVersions(List<ProjectVersionRef>);a282eb864b0390a93e0559ccce1cfa4ab624112b
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/pom-manipulation-ext/a282eb864b0390a93e0559ccce1cfa4ab624112b/original-without-dependencies/pom-manipulation-io-3.7-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,40600
Time to perform Confluence 1 Inter 0,93200
Configure Soot Confluence 2 Inter 0,14600
Time to perform Confluence 2 Inter 0,42900
Visited methods: 56
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>,$stack35 = interfaceinvoke projects.<java.util.List: int size()>(),153,SourceNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack35 = interfaceinvoke projects.<java.util.List: int size()>(), 153)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831))
SINK=>BASE: Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>,$stack1 = this.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int status>,420,SourceNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, $stack42 = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>(), 283)) => Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>,$stack54 = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>(),269,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, $stack54 = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>(), 269)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)), SOURCE=>BASE: Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>,$stack41 = interfaceinvoke projects.<java.util.List: int size()>(),147,SourceNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack41 = interfaceinvoke projects.<java.util.List: int size()>(), 147)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832))
SINK=>BASE: Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>,$stack1 = this.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int status>,420,SourceNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, $stack42 = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>(), 283)) => Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>,$stack54 = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>(),269,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, $stack54 = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>(), 269)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)), SOURCE=>BASE: Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>,$stack41 = interfaceinvoke projects.<java.util.List: int size()>(),147,SourceNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack41 = interfaceinvoke projects.<java.util.List: int size()>(), 147)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832))
SINK=>BASE: Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>,$stack69 = this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: int retryDuration>,261,SourceNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, $stack69 = this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: int retryDuration>, 261)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)), SOURCE=>BASE: Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>,$stack41 = interfaceinvoke projects.<java.util.List: int size()>(),147,SourceNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack41 = interfaceinvoke projects.<java.util.List: int size()>(), 147)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))
SINK=>BASE: Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>,$stack1 = this.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int status>,420,SourceNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, $stack42 = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>(), 283)) => Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>,$stack54 = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>(),269,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, $stack54 = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>(), 269)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)), SOURCE=>BASE: Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>,$stack35 = interfaceinvoke projects.<java.util.List: int size()>(),153,SourceNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack35 = interfaceinvoke projects.<java.util.List: int size()>(), 153)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831))
SINK=>BASE: Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>,$stack69 = this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: int retryDuration>,261,SourceNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, $stack69 = this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: int retryDuration>, 261)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)), SOURCE=>BASE: Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>,$stack41 = interfaceinvoke projects.<java.util.List: int size()>(),147,SourceNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack41 = interfaceinvoke projects.<java.util.List: int size()>(), 147)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))
SINK=>BASE: Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>,$stack69 = this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: int retryDuration>,261,SourceNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, $stack69 = this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: int retryDuration>, 261)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))]
Confluence interference in <org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>
Confluence flows from execution of lines 244 and 283 to line 244, defined in virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue) and $stack42 = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>() and used in virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue)
Caused by line 244 flow: path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack35 = interfaceinvoke projects.<java.util.List: int size()>(), 153)
Caused by line 283 flow: path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, $stack42 = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: int getStatus()>(), 283)
Caused by line 244 flow: path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)
Confluence interference in <org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>
Confluence flows from execution of lines 244 and 261 to line 244, defined in virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue) and $stack69 = this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: int retryDuration> and used in virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue)
Caused by line 244 flow: path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack41 = interfaceinvoke projects.<java.util.List: int size()>(), 147)
Caused by line 261 flow: path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, $stack69 = this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: int retryDuration>, 261)
Caused by line 244 flow: path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, $stack42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack41), 147) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)
 Analysis results
----------------------------
 Number of conflicts: 6
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/pom-manipulation-ext/a282eb864b0390a93e0559ccce1cfa4ab624112b/original-without-dependencies/pom-manipulation-io-3.7-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,56900
Runtime: 0.046s
Time to perform OA Inter 0,70600
OA Inter Visited methods: 25
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/pom-manipulation-ext/a282eb864b0390a93e0559ccce1cfa4ab624112b/original-without-dependencies/pom-manipulation-io-3.7-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,51300
Time to perform DFP Inter 0,66800
Depth limit: 5
CONFLICTS: []
Visited methods: 28
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/pom-manipulation-ext/a282eb864b0390a93e0559ccce1cfa4ab624112b/original-without-dependencies/pom-manipulation-io-3.7-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,45000
Time to perform DFP Inter 0,67900
Depth limit: 5
CONFLICTS: DF interference in <org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>
Data flows from execution of line 256 to 244, defined in $stack1 = x0.<org.commonjava.maven.ext.io.rest.DefaultTranslator: int initialRestMinSize> and propagated in this.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: java.util.List chunk> = chunk
Caused by line 256 flow: path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, $stack12 = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: boolean canSplit()>(), 256) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: boolean canSplit()>, $stack4 = staticinvoke <org.commonjava.maven.ext.io.rest.DefaultTranslator: int access$000(org.commonjava.maven.ext.io.rest.DefaultTranslator)>($stack3), 415)
Caused by line 244 flow: path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, specialinvoke $stack17.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: void <init>(org.commonjava.maven.ext.io.rest.DefaultTranslator,org.commonjava.maven.ext.io.rest.mapper.ReportGAVMapper,java.util.List,java.lang.String)>(this, $stack19, p, $stack23), 165) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: void <init>(org.commonjava.maven.ext.io.rest.DefaultTranslator,org.commonjava.maven.ext.io.rest.mapper.ReportGAVMapper,java.util.List,java.lang.String)>, this.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: java.util.List chunk> = chunk, 354)
[List(Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator: int access$000(org.commonjava.maven.ext.io.rest.DefaultTranslator)>,$stack1 = x0.<org.commonjava.maven.ext.io.rest.DefaultTranslator: int initialRestMinSize>,51,SourceNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, $stack12 = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: boolean canSplit()>(), 256) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: boolean canSplit()>, $stack4 = staticinvoke <org.commonjava.maven.ext.io.rest.DefaultTranslator: int access$000(org.commonjava.maven.ext.io.rest.DefaultTranslator)>($stack3), 415)) => Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: java.util.List split()>,$stack22 = staticinvoke <org.commonjava.maven.ext.io.rest.DefaultTranslator: int access$000(org.commonjava.maven.ext.io.rest.DefaultTranslator)>($stack19),407,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, tasks = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: java.util.List split()>(), 266) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: java.util.List split()>, $stack22 = staticinvoke <org.commonjava.maven.ext.io.rest.DefaultTranslator: int access$000(org.commonjava.maven.ext.io.rest.DefaultTranslator)>($stack19), 407)) => Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: java.util.List split()>,$stack23 = $stack21 * $stack22,407,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, tasks = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: java.util.List split()>(), 266) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: java.util.List split()>, $stack23 = $stack21 * $stack22, 407)) => Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: java.util.List split()>,$stack24 = interfaceinvoke $stack17.<java.util.List: java.util.List subList(int,int)>($stack20, $stack23),407,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, tasks = virtualinvoke task.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: java.util.List split()>(), 266) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: java.util.List split()>, $stack24 = interfaceinvoke $stack17.<java.util.List: java.util.List subList(int,int)>($stack20, $stack23), 407)) => Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: void <init>(org.commonjava.maven.ext.io.rest.DefaultTranslator,org.commonjava.maven.ext.io.rest.mapper.ReportGAVMapper,java.util.List,java.lang.String)>,chunk := @parameter2: java.util.List,-1,SimpleNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, specialinvoke $stack17.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: void <init>(org.commonjava.maven.ext.io.rest.DefaultTranslator,org.commonjava.maven.ext.io.rest.mapper.ReportGAVMapper,java.util.List,java.lang.String)>(this, $stack19, p, $stack23), 165)) => Node(<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: void <init>(org.commonjava.maven.ext.io.rest.DefaultTranslator,org.commonjava.maven.ext.io.rest.mapper.ReportGAVMapper,java.util.List,java.lang.String)>,this.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: java.util.List chunk> = chunk,354,SinkNode, path: (<org.commonjava.maven.ext.io.rest.DefaultTranslator: java.util.Map translateVersions(java.util.List)>, virtualinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>(projects, queue), 244) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void partition(java.util.List,java.util.Queue)>, specialinvoke this.<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>(projects, queue), 109) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator: void autoPartition(java.util.List,java.util.Queue)>, specialinvoke $stack17.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: void <init>(org.commonjava.maven.ext.io.rest.DefaultTranslator,org.commonjava.maven.ext.io.rest.mapper.ReportGAVMapper,java.util.List,java.lang.String)>(this, $stack19, p, $stack23), 165) => (<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: void <init>(org.commonjava.maven.ext.io.rest.DefaultTranslator,org.commonjava.maven.ext.io.rest.mapper.ReportGAVMapper,java.util.List,java.lang.String)>, this.<org.commonjava.maven.ext.io.rest.DefaultTranslator$Task: java.util.List chunk> = chunk, 354)))]
Visited methods: 28
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/pom-manipulation-ext/a282eb864b0390a93e0559ccce1cfa4ab624112b/original-without-dependencies/pom-manipulation-io-3.7-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,56100
Time to perform PDG 0,50600
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/pom-manipulation-ext/a282eb864b0390a93e0559ccce1cfa4ab624112b/original-without-dependencies/pom-manipulation-io-3.7-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,48400
Time to perform PDG 0,53200
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
