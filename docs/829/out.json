[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>,l6 = $stack38,304,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, l6 = $stack38, 304)) => Node(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>,name#4 = l6,304,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, name#4 = l6, 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,$stack2 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>,1048,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304) => (<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>, $stack2 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>, 1048)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,$stack4 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>,1051,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304) => (<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>, $stack4 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>, 1051)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>,maskCenter#66 = $stack114,992,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter#66 = $stack114, 992)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>,l4 = maskCenter#66,992,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, l4 = maskCenter#66, 992)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,$stack2 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>,1048,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304) => (<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>, $stack2 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>, 1048)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,$stack4 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>,1051,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304) => (<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>, $stack4 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>, 1051))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "maskCenter#66 = $stack114",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
					"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
					"line": 992
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
	"line": 992
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
	"line": 992
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": 1048
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": 1051
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l6 = $stack38",
				"location": {
					"file": "",
					"class": "org.openpnp.Scripting",
					"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
					"line": 304
				},
				"stackTrace": [{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
	"line": 304
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
	"line": 304
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": 1048
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": 1051
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
					"line": 1051
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>,l6 = $stack38,304,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, l6 = $stack38, 304)) => Node(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>,name#4 = l6,304,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, name#4 = l6, 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack7,1052,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304) => (<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack7, 1052)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>,maskCenter#66 = $stack114,992,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter#66 = $stack114, 992)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>,l4 = maskCenter#66,992,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, l4 = maskCenter#66, 992)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack7,1052,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304) => (<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack7, 1052))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "maskCenter#66 = $stack114",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
					"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
					"line": 992
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
	"line": 992
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
	"line": 992
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": 1052
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l6 = $stack38",
				"location": {
					"file": "",
					"class": "org.openpnp.Scripting",
					"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
					"line": 304
				},
				"stackTrace": [{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
	"line": 304
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
	"line": 304
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": 1052
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack7",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
					"line": 1052
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack2 = new java.lang.Error,90,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l0 := @this: java.lang.Error,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),265,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>,$stack184 = new java.lang.Exception,840,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, specialinvoke $stack184.<java.lang.Exception: void <init>(java.lang.String)>('For calibration the bottom vision camera must be a ReferenceCamera.'), 840)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, specialinvoke $stack3.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 230)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),265,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack184 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
					"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
					"line": 840
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
	"line": 840
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 265
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = new java.lang.Error",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 90
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 90
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 265
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>()",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
					"line": 265
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack2 = new java.lang.Error,90,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l0 := @this: java.lang.Error,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>,$stack85 = new java.lang.Exception,1029,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, specialinvoke $stack85.<java.lang.Exception: void <init>(java.lang.String)>($stack89), 1029)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, specialinvoke $stack3.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 230)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack85 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
					"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
					"line": 1029
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
	"line": 1029
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 784
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = new java.lang.Error",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 90
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 90
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 784
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
					"line": 784
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack79 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),449,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack79 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 449)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,interfaceinvoke globals.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("head", $stack79),449,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, interfaceinvoke globals.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('head', $stack79), 449)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack79 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),449,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack79 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 449)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,interfaceinvoke globals.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("head", $stack79),449,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, interfaceinvoke globals.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('head', $stack79), 449))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 449
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 449
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 449
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 449
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "interfaceinvoke globals.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('head', $stack79)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
					"line": 449
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>,l8 = $stack37,306,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, l8 = $stack37, 306)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,specialinvoke $stack11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Self-suppression not permitted", l1),1043,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304) => (<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>, specialinvoke $stack11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>('Self-suppression not permitted', l1), 1043)) SINK=>BASE: Node(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>,l6 = $stack39,304,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, l6 = $stack39, 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,specialinvoke $stack11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Self-suppression not permitted", l1),1043,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304) => (<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>, specialinvoke $stack11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>('Self-suppression not permitted', l1), 1043))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l6 = $stack39",
				"location": {
					"file": "",
					"class": "org.openpnp.Scripting",
					"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
					"line": 304
				},
				"stackTrace": [{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
	"line": 304
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": 1043
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l8 = $stack37",
				"location": {
					"file": "",
					"class": "org.openpnp.Scripting",
					"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
					"line": 306
				},
				"stackTrace": [{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
	"line": 306
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": 1043
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>('Self-suppression not permitted', l1)",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
					"line": 1043
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>,106,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack83 = virtualinvoke $stack82.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(),452,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack83 = virtualinvoke $stack82.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 452)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,virtualinvoke $stack83.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>("NozzleTip.Unloaded", globals),453,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack83.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.Unloaded', globals), 453)) SINK=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>,92,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack82 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(),451,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack82 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 451)) => Node(<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>,this := @this: org.openpnp.model.Configuration,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)) => Node(<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>,106,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack83 = virtualinvoke $stack82.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(),452,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack83 = virtualinvoke $stack82.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 452)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,virtualinvoke $stack83.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>("NozzleTip.Unloaded", globals),453,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack83.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.Unloaded', globals), 453))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 92
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 92
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 451
},{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
	"line": -1
},{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
	"line": 106
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 452
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 453
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
					"line": 106
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
	"line": 106
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 452
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 453
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke $stack83.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.Unloaded', globals)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
					"line": 453
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,$stack1 = this.<org.openpnp.spi.base.AbstractHead: org.openpnp.util.IdentifiableList cameras>,116,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228) => (<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>, $stack1 = this.<org.openpnp.spi.base.AbstractHead: org.openpnp.util.IdentifiableList cameras>, 116)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,$stack2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack1),116,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,$stack1 = this.<org.openpnp.spi.base.AbstractHead: org.openpnp.util.IdentifiableList cameras>,116,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228) => (<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>, $stack1 = this.<org.openpnp.spi.base.AbstractHead: org.openpnp.util.IdentifiableList cameras>, 116)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,$stack2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack1),116,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": 116
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": 116
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": 116
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": 116
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack1)",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractHead",
					"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
					"line": 116
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16),315,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) SINK=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>,106,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack83 = virtualinvoke $stack82.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(),452,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack83 = virtualinvoke $stack82.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 452)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,this := @this: org.openpnp.Scripting,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>,311,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0),311,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(),311,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),320,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,script = (java.io.File) $stack14,320,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(),315,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16),315,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
					"line": 106
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
	"line": 106
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 452
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": -1
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 311
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 311
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 311
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 320
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 320
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 315
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 315
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16)",
				"location": {
					"file": "",
					"class": "org.openpnp.Scripting",
					"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
					"line": 315
				},
				"stackTrace": [{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 315
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 984
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.spi.base.AbstractHead: boolean isSoftLimitsEnabled()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack8 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: boolean isSoftLimitsEnabled()>(), 85)) => Node(<org.openpnp.spi.base.AbstractHead: boolean isSoftLimitsEnabled()>,$stack1 = this.<org.openpnp.spi.base.AbstractHead: boolean softLimitsEnabled>,314,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack8 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: boolean isSoftLimitsEnabled()>(), 85)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.spi.base.AbstractHead: boolean isSoftLimitsEnabled()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack8 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: boolean isSoftLimitsEnabled()>(), 85)) => Node(<org.openpnp.spi.base.AbstractHead: boolean isSoftLimitsEnabled()>,$stack1 = this.<org.openpnp.spi.base.AbstractHead: boolean softLimitsEnabled>,314,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack8 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: boolean isSoftLimitsEnabled()>(), 85))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: boolean isSoftLimitsEnabled()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: boolean isSoftLimitsEnabled()>",
	"line": 314
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: boolean isSoftLimitsEnabled()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: boolean isSoftLimitsEnabled()>",
	"line": 314
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractHead: boolean softLimitsEnabled>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractHead",
					"method": "<org.openpnp.spi.base.AbstractHead: boolean isSoftLimitsEnabled()>",
					"line": 314
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack2 = new java.lang.Error,90,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l0 := @this: java.lang.Error,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,$stack26 = new java.lang.Exception,96,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, specialinvoke $stack26.<java.lang.Exception: void <init>(java.lang.String)>($stack33), 96)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, specialinvoke $stack3.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 230)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack26 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceHead",
					"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
					"line": 96
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": 96
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 781
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = new java.lang.Error",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 90
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 90
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 781
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
					"line": 781
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>,383,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)) => Node(<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),114,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100) => (<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 110) => (<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 114)) => Node(<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>,$stack3 = (org.openpnp.machine.reference.ReferenceMachine) $stack2,114,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100) => (<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 110)) SINK=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>,383,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)) => Node(<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>,$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),114,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100) => (<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 110) => (<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 114))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
					"line": 383
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
	"line": 383
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
	"line": 114
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
					"line": 383
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
	"line": 383
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
	"line": 114
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
	"line": 114
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack3 = (org.openpnp.machine.reference.ReferenceMachine) $stack2",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceHead",
					"method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
					"line": 114
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>,l8 = $stack37,306,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, l8 = $stack37, 306)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>(l1),1054,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304) => (<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>, interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>(l1), 1054)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>,circle#33 = $stack113,1010,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, circle#33 = $stack113, 1010)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>(l1),1054,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304) => (<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>, interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>(l1), 1054))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "circle#33 = $stack113",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
					"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
					"line": 1010
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
	"line": 1010
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": 1054
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l8 = $stack37",
				"location": {
					"file": "",
					"class": "org.openpnp.Scripting",
					"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
					"line": 306
				},
				"stackTrace": [{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
	"line": 306
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": 1054
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
					"line": 1054
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,$stack1 = this.<org.openpnp.spi.base.AbstractHead: org.openpnp.util.IdentifiableList cameras>,116,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228) => (<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>, $stack1 = this.<org.openpnp.spi.base.AbstractHead: org.openpnp.util.IdentifiableList cameras>, 116)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,$stack2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack1),116,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(),228,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,$stack9 = interfaceinvoke cameras.<java.util.List: boolean isEmpty()>(),230,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, $stack9 = interfaceinvoke cameras.<java.util.List: boolean isEmpty()>(), 230)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,$stack6 = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>(),230,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, $stack6 = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>(), 230))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": 230
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": 116
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": 116
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": 228
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": 230
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack9 = interfaceinvoke cameras.<java.util.List: boolean isEmpty()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractHead",
					"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
					"line": 230
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>,383,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),292,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(),292,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(),292,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(),301,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,head = (org.openpnp.spi.Head) $stack12,301,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(),293,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(),293,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),300,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack17,300,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>,$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(),811,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>,nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22,811,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>,this := @this: org.openpnp.machine.reference.ReferenceNozzle,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceNozzle,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,$stack1 = this.<org.openpnp.spi.base.AbstractHead: org.openpnp.util.IdentifiableList cameras>,116,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228) => (<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>, $stack1 = this.<org.openpnp.spi.base.AbstractHead: org.openpnp.util.IdentifiableList cameras>, 116)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,$stack2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack1),116,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(),228,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(),228,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": 228
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
					"line": 383
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
	"line": 383
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 301
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 301
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 293
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 293
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 300
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 300
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
	"line": 811
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
	"line": 811
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": 116
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": 116
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": 228
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractHead",
					"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
					"line": 228
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,script = (java.io.File) $stack14,320,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(),315,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16),315,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>,referenceNozzleTip = (org.openpnp.machine.reference.ReferenceNozzleTip) nozzleTip,214,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>,this := @this: org.openpnp.machine.reference.ReferenceNozzleTip,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip: java.lang.String getName()>(),322,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip: java.lang.String getName()>(), 322)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "referenceNozzleTip = (org.openpnp.machine.reference.ReferenceNozzleTip) nozzleTip",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
					"line": 214
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
	"line": 214
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>",
	"line": 322
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 988
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "script = (java.io.File) $stack14",
				"location": {
					"file": "",
					"class": "org.openpnp.Scripting",
					"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
					"line": 320
				},
				"stackTrace": [{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 320
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 315
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 315
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 988
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack14 = l4[l6]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 988
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>,92,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack82 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(),451,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack82 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 451)) SINK=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>,92,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack82 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(),451,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack82 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 451))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 92
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 92
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 451
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 92
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 92
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 451
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack82 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
					"line": 451
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100)) => Node(<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(),110,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100) => (<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 110)) => Node(<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>,this := @this: org.openpnp.machine.reference.ReferenceMachine,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 573)) => Node(<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>,$stack1 = this.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver driver>,107,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 573)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100)) => Node(<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(),110,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100) => (<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 110)) => Node(<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>,this := @this: org.openpnp.machine.reference.ReferenceMachine,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 573)) => Node(<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>,$stack1 = this.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver driver>,107,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 573))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
					"line": 288
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
	"line": 110
},{
	"class": "org.openpnp.machine.reference.ReferenceMachine",
	"method": "<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceMachine",
	"method": "<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
	"line": 107
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
	"line": 110
},{
	"class": "org.openpnp.machine.reference.ReferenceMachine",
	"method": "<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceMachine",
	"method": "<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
	"line": 107
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = this.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver driver>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceMachine",
					"method": "<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
					"line": 107
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100)) => Node(<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(),110,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100) => (<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 110)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100)) => Node(<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(),110,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100) => (<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 110))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
	"line": 110
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
	"line": 110
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceHead",
					"method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
					"line": 110
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack2 = new java.lang.Error,90,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l0 := @this: java.lang.Error,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>,$stack151 = new java.lang.Exception,897,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, specialinvoke $stack151.<java.lang.Exception: void <init>(java.lang.String)>('Not enough results from vision. Check pipeline and threshold.'), 897)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, specialinvoke $stack3.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 230)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack151 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
					"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
					"line": 897
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
	"line": 897
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 786
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = new java.lang.Error",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 90
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 90
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 786
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
					"line": 786
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack2 = new java.lang.Error,90,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l0 := @this: java.lang.Error,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,$stack26 = new java.lang.Exception,96,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, specialinvoke $stack26.<java.lang.Exception: void <init>(java.lang.String)>($stack33), 96)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, specialinvoke $stack3.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 230)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack26 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceHead",
					"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
					"line": 96
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": 96
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 266
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = new java.lang.Error",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 90
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 90
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 266
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.String detailMessage> = l1",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
					"line": 266
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>,383,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),292,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(),292,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(),292,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(),301,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,head = (org.openpnp.spi.Head) $stack12,301,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(),293,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(),293,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),300,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack17,300,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>,$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(),811,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>,nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22,811,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>,this := @this: org.openpnp.machine.reference.ReferenceNozzle,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceNozzle,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,$stack1 = this.<org.openpnp.spi.base.AbstractHead: org.openpnp.util.IdentifiableList cameras>,116,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228) => (<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>, $stack1 = this.<org.openpnp.spi.base.AbstractHead: org.openpnp.util.IdentifiableList cameras>, 116)) => Node(<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>,$stack2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack1),116,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(),228,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,$stack10 = interfaceinvoke cameras.<java.util.List: java.lang.Object get(int)>(0),232,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, $stack10 = interfaceinvoke cameras.<java.util.List: java.lang.Object get(int)>(0), 232)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(),228,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, cameras = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>(), 228)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,$stack10 = interfaceinvoke cameras.<java.util.List: java.lang.Object get(int)>(0),232,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, $stack10 = interfaceinvoke cameras.<java.util.List: java.lang.Object get(int)>(0), 232)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,$stack11 = (org.openpnp.spi.Camera) $stack10,232,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
					"line": 288
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": 228
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": 232
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": 232
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
					"line": 383
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
	"line": 383
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 301
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 301
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 293
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 293
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 300
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 300
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
	"line": 811
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
	"line": 811
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": 116
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.util.List getCameras()>",
	"line": 116
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": 228
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": 232
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = interfaceinvoke cameras.<java.util.List: java.lang.Object get(int)>(0)",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractHead",
					"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
					"line": 232
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack70 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),443,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack70 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 443)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack71 = interfaceinvoke $stack70.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(),443,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack71 = interfaceinvoke $stack70.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 443)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack72 = interfaceinvoke $stack71.<org.openpnp.spi.Machine: double getSpeed()>(),443,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack72 = interfaceinvoke $stack71.<org.openpnp.spi.Machine: double getSpeed()>(), 443)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack70 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),443,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack70 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 443)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack71 = interfaceinvoke $stack70.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(),443,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack71 = interfaceinvoke $stack70.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 443))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 443
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 443
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 443
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 443
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 443
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack72 = interfaceinvoke $stack71.<org.openpnp.spi.Machine: double getSpeed()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
					"line": 443
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>,106,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>,$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(),900,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,this := @this: org.openpnp.Scripting,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>,311,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0),311,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(),311,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),320,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,script = (java.io.File) $stack14,320,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(),315,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16),315,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzleTip: java.lang.String getName()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzleTip: java.lang.String name>,29,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip: java.lang.String getName()>(), 321)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip: java.lang.String getName()>(),322,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip: java.lang.String getName()>(), 322)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzleTip: java.lang.String name>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzleTip",
					"method": "<org.openpnp.spi.base.AbstractNozzleTip: java.lang.String getName()>",
					"line": 29
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzleTip",
	"method": "<org.openpnp.spi.base.AbstractNozzleTip: java.lang.String getName()>",
	"line": 29
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>",
	"line": 322
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
					"line": 106
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
	"line": 106
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
	"line": 900
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": -1
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 311
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 311
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 311
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 320
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 320
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 315
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 315
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = lengthof $stack8",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 982
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>,l6 = $stack38,304,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, l6 = $stack38, 304)) => Node(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>,name#4 = l6,304,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, name#4 = l6, 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,$stack2 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>,1048,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304) => (<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>, $stack2 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>, 1048)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>,maskCenter#66 = $stack114,992,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter#66 = $stack114, 992)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>,l4 = maskCenter#66,992,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, l4 = maskCenter#66, 992)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304)) => Node(<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>,$stack2 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>,1048,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304) => (<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>, $stack2 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>, 1048))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "maskCenter#66 = $stack114",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
					"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
					"line": 992
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
	"line": 992
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
	"line": 992
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": 1048
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l6 = $stack38",
				"location": {
					"file": "",
					"class": "org.openpnp.Scripting",
					"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
					"line": 304
				},
				"stackTrace": [{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
	"line": 304
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
	"line": 304
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
	"line": 1048
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack2 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>",
					"line": 1048
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack2 = new java.lang.Error,90,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l0 := @this: java.lang.Error,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Error: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),70,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) SINK=>BASE: Node(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>,$stack9 = new org.openpnp.model.Length,89,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, location = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>(offset), 484) => (<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, specialinvoke $stack9.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack11, $stack10), 89)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,this := @this: org.openpnp.model.Length,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, location = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>(offset), 484) => (<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack22 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,118,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, safeZ = virtualinvoke $stack11.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack13), 295) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack22 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>, 118)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertLength() unrecognized units "),118,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, safeZ = virtualinvoke $stack11.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack13), 295) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('convertLength() unrecognized units '), 118)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack22),118,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, safeZ = virtualinvoke $stack11.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack13), 295) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack22), 118)) => Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(),118,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, safeZ = virtualinvoke $stack11.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack13), 295) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 118)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Error: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),70,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack9 = new org.openpnp.model.Length",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 89
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": -1
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 118
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 118
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 118
},{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 118
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": 70
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = new java.lang.Error",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 90
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 90
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": 70
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.Error",
					"method": "<java.lang.Error: void <init>(java.lang.String)>",
					"line": 70
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack2 = new java.lang.Error,90,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l0 := @this: java.lang.Error,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,$stack26 = new java.lang.Exception,96,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, specialinvoke $stack26.<java.lang.Exception: void <init>(java.lang.String)>($stack33), 96)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, specialinvoke $stack3.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 230)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack26 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceHead",
					"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
					"line": 96
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": 96
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 783
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = new java.lang.Error",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 90
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 90
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 783
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0)",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
					"line": 783
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 429)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(), 429))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
					"line": 429
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack2 = new java.lang.Error,90,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l0 := @this: java.lang.Error,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Object: void <init>()>(),264,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 264)) SINK=>BASE: Node(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>,$stack33 = new java.lang.Error,144,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, safeZ = virtualinvoke $stack11.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>($stack13), 295) => (<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, specialinvoke $stack33.<java.lang.Error: void <init>(java.lang.String)>($stack37), 144)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l0 := @this: java.lang.Error,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Object: void <init>()>(),264,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 264))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack33 = new java.lang.Error",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 144
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 144
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 264
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = new java.lang.Error",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 90
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 90
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 264
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Object: void <init>()>()",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
					"line": 264
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack62 = $stack61 * globals#11,439,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack62 = $stack61 * globals#11, 439)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack60, $stack62),439,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack60, $stack62), 439)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack62 = $stack61 * globals#11,439,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack62 = $stack61 * globals#11, 439))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 439
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 439
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 439
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack60, $stack62)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
					"line": 439
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack69 = $stack68 * globals#11,442,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack69 = $stack68 * globals#11, 442)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack69 = $stack68 * globals#11,442,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack69 = $stack68 * globals#11, 442)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack67, $stack69),442,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack67, $stack69), 442))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 442
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 442
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 442
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack69 = $stack68 * globals#11",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
					"line": 442
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack2 = new java.lang.Error,90,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l0 := @this: java.lang.Error,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210)) SINK=>BASE: Node(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>,$stack7 = new java.lang.Exception,130,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820) => (<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, specialinvoke $stack7.<java.lang.Exception: void <init>(java.lang.String)>('No up-looking camera found on the machine to use for bottom vision.'), 130)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, specialinvoke $stack3.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 230)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack7 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.util.VisionUtils",
					"method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
					"line": 130
				},
				"stackTrace": [{
	"class": "org.openpnp.util.VisionUtils",
	"method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
	"line": 130
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 210
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = new java.lang.Error",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 90
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 90
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 210
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
					"line": 210
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>,383,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317) => (<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(),292,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(),292,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(),292,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(),301,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,head = (org.openpnp.spi.Head) $stack12,301,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(),293,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(),293,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),300,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811) => (<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack17,300,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>,$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(),811,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)) => Node(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>,nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22,811,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>,this := @this: org.openpnp.machine.reference.ReferenceNozzle,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceNozzle,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, $stack6 = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>(), 230)) => Node(<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>,$stack1 = this.<org.openpnp.spi.base.AbstractHead: java.lang.String name>,203,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, $stack6 = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>(), 230)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>,$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26,288,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)) => Node(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>,this := @this: org.openpnp.machine.reference.ReferenceHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)) => Node(<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91)) => Node(<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>,this := @this: org.openpnp.spi.base.AbstractHead,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, $stack6 = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>(), 230)) => Node(<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>,$stack1 = this.<org.openpnp.spi.base.AbstractHead: java.lang.String name>,203,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, $stack6 = virtualinvoke this.<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>(), 230))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>",
	"line": 203
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
					"line": 383
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
	"line": 383
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 301
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 301
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 293
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 293
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 300
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
	"line": 300
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
	"line": 811
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
	"method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
	"line": 811
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
	"line": 288
},{
	"class": "org.openpnp.machine.reference.ReferenceHead",
	"method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>",
	"line": -1
},{
	"class": "org.openpnp.spi.base.AbstractHead",
	"method": "<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>",
	"line": 203
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractHead: java.lang.String name>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractHead",
					"method": "<org.openpnp.spi.base.AbstractHead: java.lang.String getName()>",
					"line": 203
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack55 = $stack54 * globals#11,436,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack55 = $stack54 * globals#11, 436)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55),436,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack55 = $stack54 * globals#11,436,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack55 = $stack54 * globals#11, 436))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 436
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 436
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 436
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
					"line": 436
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11),432,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,52,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(),429,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(), 429)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11),432,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 432
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 52
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 429
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 432
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
					"line": 432
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>,106,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack83 = virtualinvoke $stack82.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(),452,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack83 = virtualinvoke $stack82.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 452)) SINK=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>,92,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack82 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(),451,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack82 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 451)) => Node(<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>,this := @this: org.openpnp.model.Configuration,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)) => Node(<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>,$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>,106,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack83 = virtualinvoke $stack82.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(),452,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack83 = virtualinvoke $stack82.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 452))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 92
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 92
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 451
},{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
	"line": -1
},{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
	"line": 106
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 452
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
					"line": 106
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
	"line": 106
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 452
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack83 = virtualinvoke $stack82.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
					"line": 452
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack2 = new java.lang.Error,90,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l0 := @this: java.lang.Error,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197)) SINK=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack2 = new java.lang.Error,90,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l0 := @this: java.lang.Error,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = new java.lang.Error",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 90
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 90
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 197
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = new java.lang.Error",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 90
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 90
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 197
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.Throwable cause> = l0",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
					"line": 197
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>,$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(),421,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,this := @this: org.openpnp.Scripting,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>,311,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0),311,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(),311,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),320,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,script = (java.io.File) $stack14,320,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(),315,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16),315,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987)) SINK=>BASE: Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(),315,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)) => Node(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>,$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16),315,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422) => (<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack12 = l3,987,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411) => (<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>('unloaded'), 321) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.Scripting",
					"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
					"line": 315
				},
				"stackTrace": [{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 315
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 315
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 987
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
					"line": 421
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
	"line": 421
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": -1
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 311
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 311
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 311
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 320
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 320
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 315
},{
	"class": "org.openpnp.Scripting",
	"method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
	"line": 315
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 987
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = l3 + -1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 987
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>,$stack2 = new java.lang.Error,90,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Error: void <init>(java.lang.String)>,l0 := @this: java.lang.Error,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227)) SINK=>BASE: Node(<org.openpnp.vision.pipeline.CvPipeline: void process()>,$stack40 = new java.lang.Exception,202,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884) => (<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void process()>(), 997) => (<org.openpnp.vision.pipeline.CvPipeline: void process()>, specialinvoke $stack40.<java.lang.Exception: void <init>(java.lang.String)>('Stage not enabled.'), 202)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436) => (<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288) => (<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91) => (<org.openpnp.spi.base.AbstractHead: org.openpnp.spi.Camera getDefaultCamera()>, specialinvoke $stack3.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 230)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420) => (<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90) => (<java.lang.Error: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 70) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack40 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.vision.pipeline.CvPipeline",
					"method": "<org.openpnp.vision.pipeline.CvPipeline: void process()>",
					"line": 202
				},
				"stackTrace": [{
	"class": "org.openpnp.vision.pipeline.CvPipeline",
	"method": "<org.openpnp.vision.pipeline.CvPipeline: void process()>",
	"line": 202
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 227
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = new java.lang.Error",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Configuration",
					"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
					"line": 90
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Configuration",
	"method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
	"line": 90
},{
	"class": "java.lang.Error",
	"method": "<java.lang.Error: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 227
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
					"line": 227
				}
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "941"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>(), 941)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "295"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event), 315)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "name#4 = l6",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, name#4 = l6, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if name#4 == null goto virtualinvoke reader#3.<java.io.FileReader: void close()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "306"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "295"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack28 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack29 = interfaceinvoke $stack28.<org.openpnp.spi.Head: double getMaxPartSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack29 = interfaceinvoke $stack28.<org.openpnp.spi.Head: double getMaxPartSpeed()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = $stack29 * speed",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack30 = $stack29 * speed, 288)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceHead",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "head := @parameter0: org.openpnp.spi.Head",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke listener.<org.openpnp.spi.MachineListener: void machineHeadActivity(org.openpnp.spi.Machine,org.openpnp.spi.Head)>(this, head)",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "255"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, interfaceinvoke listener.<org.openpnp.spi.MachineListener: void machineHeadActivity(org.openpnp.spi.Machine,org.openpnp.spi.Head)>(this, head), 255)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "829"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30), 829)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "830"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32), 830)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack165 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack164)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "879"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack165 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack164), 879)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "829"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30), 829)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "830"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32), 830)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "854"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64), 854)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, $stack65), 854)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "23"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed), 23)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "50"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack14 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 50)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "imageWidth = (double) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "50"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, imageWidth = (double) $stack14, 50)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = imageWidth / 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "55"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack16 = imageWidth / 2.0, 55)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "offsetX = x - $stack16",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "55"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, offsetX = x - $stack16, 55)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack24 = interfaceinvoke additionalGlobals.<java.util.Map: java.util.Set keySet()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack24 = interfaceinvoke additionalGlobals.<java.util.Map: java.util.Set keySet()>(), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "reader = interfaceinvoke $stack24.<java.util.Set: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, reader = interfaceinvoke $stack24.<java.util.Set: java.util.Iterator iterator()>(), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = interfaceinvoke reader.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "306"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack32 = interfaceinvoke reader.<java.util.Iterator: java.lang.Object next()>(), 306)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "name = (java.lang.String) $stack32",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "306"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, name = (java.lang.String) $stack32, 306)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack33 = interfaceinvoke additionalGlobals.<java.util.Map: java.lang.Object get(java.lang.Object)>(name)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack33 = interfaceinvoke additionalGlobals.<java.util.Map: java.lang.Object get(java.lang.Object)>(name), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "823"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera, 823)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceCamera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack107 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>(), 924)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.machine.reference.ReferenceCamera: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>",
  "line": "233"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack107 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>(), 924)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "hm := @parameter0: org.openpnp.spi.HeadMountable",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, $stack65), 854)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "hm := @parameter0: org.openpnp.spi.HeadMountable",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "20"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, head = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.spi.Head getHead()>(), 20)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack22 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>(), 63)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, location = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>(offset), 484)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>(), 205)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>",
  "line": "84"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, location = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>(offset), 484)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>(), 205)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack48 = (double) $stack47",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack48 = (double) $stack47, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack49 = $stack48 * 0.25",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack49 = $stack48 * 0.25, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack50 = $stack44 + $stack49",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack50 = $stack44 + $stack49, 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "843"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "884"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "offset = virtualinvoke offset.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack174)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "887"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = virtualinvoke offset.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack174), 887)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke nozzleTipMeasuredLocations.<java.util.List: boolean add(java.lang.Object)>(offset)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "890"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, interfaceinvoke nozzleTipMeasuredLocations.<java.util.List: boolean add(java.lang.Object)>(offset), 890)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack7 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack22 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>(), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack22.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack23 = virtualinvoke $stack22.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>(), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack21.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack23, offsetX, offsetY, 0.0, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, specialinvoke $stack21.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack23, offsetX, offsetY, 0.0, 0.0), 63)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.vision.pipeline.CvPipeline getPipeline()>",
  "line": "1176"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, pipeline = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 992)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.vision.pipeline.CvPipeline getPipeline()>, $stack3 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 1176)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', $stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.vision.pipeline.CvPipeline getPipeline()>",
  "line": "1176"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, pipeline = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 992)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.vision.pipeline.CvPipeline getPipeline()>, virtualinvoke $stack1.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', $stack3), 1176)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack22 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>(), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack22.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack23 = virtualinvoke $stack22.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>(), 63)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "units := @parameter0: org.openpnp.model.LengthUnit",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "60"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units, 60)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "829"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30), 829)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "830"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32), 830)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip nozzleTip>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "224"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack2 = this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip nozzleTip>, 224)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getHeight()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getHeight()>(), 51)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "imageHeight = (double) $stack15",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, imageHeight = (double) $stack15, 51)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = imageHeight / 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "56"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack17 = imageHeight / 2.0, 56)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "829"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30), 829)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 294)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzleTip = (org.openpnp.spi.NozzleTip) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, nozzleTip = (org.openpnp.spi.NozzleTip) $stack7, 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceNozzleTip = (org.openpnp.machine.reference.ReferenceNozzleTip) nozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "214"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "234"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "name#4 = l6",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, name#4 = l6, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l8)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l8), 301)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24), 316)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script), 304)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "calibrationNozzleTip = this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip nozzleTip>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "228"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, null, location)",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "153"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "994"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Point",
"location": {
  "file": "",
  "class": "org.openpnp.model.Point",
  "method": "<org.openpnp.model.Point: double getY()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack22 = virtualinvoke maskCenter.<org.openpnp.model.Point: double getY()>(), 995)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Point: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Point",
  "method": "<org.openpnp.model.Point: double getY()>",
  "line": "50"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack22 = virtualinvoke maskCenter.<org.openpnp.model.Point: double getY()>(), 995)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke maskCenter.<org.openpnp.model.Point: double getY()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "995"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack22 = virtualinvoke maskCenter.<org.openpnp.model.Point: double getY()>(), 995)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack19.<org.opencv.core.Point: void <init>(double,double)>($stack21, $stack22)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "995"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, specialinvoke $stack19.<org.opencv.core.Point: void <init>(double,double)>($stack21, $stack22), 995)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = new java.io.FileReader",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script), 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script), 304)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, null, location)",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "153"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "994"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Point",
"location": {
  "file": "",
  "class": "org.openpnp.model.Point",
  "method": "<org.openpnp.model.Point: double getX()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack21 = virtualinvoke maskCenter.<org.openpnp.model.Point: double getX()>(), 995)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Point: double x>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Point",
  "method": "<org.openpnp.model.Point: double getX()>",
  "line": "42"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack21 = virtualinvoke maskCenter.<org.openpnp.model.Point: double getX()>(), 995)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "993"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 993)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)","(<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>, $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera), 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = (org.openpnp.gui.components.CameraView) $stack3",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.gui.components.CameraView",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraView",
  "method": "<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, virtualinvoke $stack28.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>($stack30, 1000L), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,java.lang.String,long)>(filteredImage, null, milliseconds)",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraView",
  "method": "<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>",
  "line": "355"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, virtualinvoke $stack28.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>($stack30, 1000L), 1003)","(<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>, virtualinvoke this.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,java.lang.String,long)>(filteredImage, null, milliseconds), 355)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceHead",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "91"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = (org.openpnp.machine.reference.ReferenceCamera) $stack13",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "91"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack14 = (org.openpnp.machine.reference.ReferenceCamera) $stack13, 91)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceCamera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack15 = virtualinvoke $stack14.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location headOffsets>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>",
  "line": "203"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack15 = virtualinvoke $stack14.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>(), 91)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceHead",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack32 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "97"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack32 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: java.lang.String getName()>(), 97)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 577)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (org.openpnp.machine.reference.ReferenceMachine) $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, $stack25 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 299)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractMachine",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<org.openpnp.spi.base.AbstractMachine: java.util.Set listeners>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "254"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, $stack4 = this.<org.openpnp.spi.base.AbstractMachine: java.util.Set listeners>, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l2 = interfaceinvoke $stack4.<java.util.Set: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "254"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, l2 = interfaceinvoke $stack4.<java.util.Set: java.util.Iterator iterator()>(), 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event), 315)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event), 315)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "823"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera, 823)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceCamera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack107 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>(), 924)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.machine.reference.ReferenceCamera: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>",
  "line": "233"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack107 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>(), 924)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack112 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "926"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack112 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>(), 926)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip nozzleTip>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "227"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack4 = this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip nozzleTip>, 227)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, null, location)",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "153"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)","(<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>, $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera), 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = (org.openpnp.gui.components.CameraView) $stack3",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.gui.components.CameraView",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraView",
  "method": "<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, virtualinvoke $stack28.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>($stack30, 1000L), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,java.lang.String,long)>(filteredImage, null, milliseconds)",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraView",
  "method": "<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>",
  "line": "355"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, virtualinvoke $stack28.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>($stack30, 1000L), 1003)","(<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>, virtualinvoke this.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,java.lang.String,long)>(filteredImage, null, milliseconds), 355)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "564"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 564)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "564"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 564)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "564"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>(), 564)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "speed := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack56 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(speed)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "284"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack56 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(speed), 284)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "hm := @parameter0: org.openpnp.machine.reference.ReferenceHeadMountable",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack11 = interfaceinvoke hm.<org.openpnp.machine.reference.ReferenceHeadMountable: org.openpnp.model.Location getHeadOffsets()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack11 = interfaceinvoke hm.<org.openpnp.machine.reference.ReferenceHeadMountable: org.openpnp.model.Location getHeadOffsets()>(), 90)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack61 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1039"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack61 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1039)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack48 = (double) $stack47",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack48 = (double) $stack47, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack49 = $stack48 * 0.25",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack49 = $stack48 * 0.25, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack50 = $stack44 + $stack49",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack50 = $stack44 + $stack49, 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "843"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "884"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "offset = virtualinvoke offset.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack174)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "887"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = virtualinvoke offset.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack174), 887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = camera instanceof org.openpnp.machine.reference.ReferenceCamera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "822"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack25 = camera instanceof org.openpnp.machine.reference.ReferenceCamera, 822)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack42 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack42 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack43 = $stack42 / 2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack43 = $stack42 / 2, 844)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack48 = (double) $stack47",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack48 = (double) $stack47, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack49 = $stack48 * 0.25",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack49 = $stack48 * 0.25, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack50 = $stack44 + $stack49",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack50 = $stack44 + $stack49, 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "843"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "884"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, null, location)",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "153"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = new java.lang.Error",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)","(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.')",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)","(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "823"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera, 823)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>(), 941)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack11 = this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Length safeZ>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>",
  "line": "295"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, $stack11 = this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Length safeZ>, 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>(), 311)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 == 0 goto return",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "564"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 564)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "564"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 564)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "564"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>(), 564)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "speed := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(speed)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "286"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(speed), 286)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script), 304)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "829"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30), 829)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "830"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32), 830)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "854"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64), 854)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, $stack65), 854)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "823"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera, 823)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceCamera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack107 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>(), 924)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.machine.reference.ReferenceCamera: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>",
  "line": "233"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack107 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>(), 924)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack112 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "926"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack112 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>(), 926)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke script.<java.io.File: boolean isFile()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack15 = virtualinvoke script.<java.io.File: boolean isFile()>(), 312)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script), 304)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack227 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation(org.openpnp.spi.HeadMountable)>(nozzle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "938"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack227 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation(org.openpnp.spi.HeadMountable)>(nozzle), 938)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke reader.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack26 = interfaceinvoke reader.<java.util.Iterator: boolean hasNext()>(), 299)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto $stack22 = new java.io.FileReader",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "829"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30), 829)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "830"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32), 830)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "854"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64), 854)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, $stack65), 854)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "23"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed), 23)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "829"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30), 829)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame mainFrame>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>",
  "line": "150"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 294)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack0",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>",
  "line": "150"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script), 304)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceHead",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "101"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractMachine",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<org.openpnp.spi.base.AbstractMachine: java.util.Set listeners>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "254"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, $stack4 = this.<org.openpnp.spi.base.AbstractMachine: java.util.Set listeners>, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l2 = interfaceinvoke $stack4.<java.util.Set: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "254"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, l2 = interfaceinvoke $stack4.<java.util.Set: java.util.Iterator iterator()>(), 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "257"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 257)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "listener = (org.openpnp.spi.MachineListener) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "257"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, listener = (org.openpnp.spi.MachineListener) $stack7, 257)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack48 = (double) $stack47",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack48 = (double) $stack47, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack49 = $stack48 * 0.25",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack49 = $stack48 * 0.25, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack50 = $stack44 + $stack49",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack50 = $stack44 + $stack49, 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "843"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "884"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "offset = virtualinvoke offset.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack174)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "887"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = virtualinvoke offset.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack174), 887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event), 315)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>",
  "line": "569"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>(), 941)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>",
  "line": "569"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>(), 941)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>",
  "line": "569"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>(), 941)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: double getSpeed()>(), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>",
  "line": "569"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>(), 941)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack3), 569)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "429"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 429)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "429"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 429)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "429"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(), 429)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "speed := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke head.<org.openpnp.spi.Head: void moveToSafeZ(double)>(speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "21"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke head.<org.openpnp.spi.Head: void moveToSafeZ(double)>(speed), 21)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "295"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 577)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (org.openpnp.machine.reference.ReferenceMachine) $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "573"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceMachine",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceMachine",
  "method": "<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 573)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver driver>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceMachine",
  "method": "<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "107"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 573)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "573"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>",
  "line": "479"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "location = interfaceinvoke $stack4.<org.openpnp.machine.reference.ReferenceDriver: org.openpnp.model.Location getLocation(org.openpnp.machine.reference.ReferenceHeadMountable)>(this)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>",
  "line": "479"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "823"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera, 823)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceCamera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack15 = virtualinvoke $stack14.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location headOffsets>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>",
  "line": "203"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack15 = virtualinvoke $stack14.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack104 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "919"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack104 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>(), 919)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "829"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30), 829)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "830"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32), 830)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)","(<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>, $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera), 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = (org.openpnp.gui.components.CameraView) $stack3",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack28.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>($stack30, 1000L)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, virtualinvoke $stack28.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>($stack30, 1000L), 1003)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "823"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera, 823)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceCamera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack15 = virtualinvoke $stack14.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location headOffsets>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>",
  "line": "203"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack15 = virtualinvoke $stack14.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>(), 91)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack105 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack104, $stack103)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1018"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack105 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack104, $stack103), 1018)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getHeight()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getHeight()>(), 51)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "imageHeight = (double) $stack15",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, imageHeight = (double) $stack15, 51)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack219 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "814"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack219 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 814)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack220 = virtualinvoke $stack219.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "814"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack220 = virtualinvoke $stack219.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 814)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke script.<java.io.File: boolean isFile()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack15 = virtualinvoke script.<java.io.File: boolean isFile()>(), 312)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzleTip = (org.openpnp.spi.NozzleTip) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, nozzleTip = (org.openpnp.spi.NozzleTip) $stack7, 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceNozzleTip = (org.openpnp.machine.reference.ReferenceNozzleTip) nozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "214"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>",
  "line": "322"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411)","(<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip: java.lang.String getName()>(), 322)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>('unmounted')",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>",
  "line": "322"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411)","(<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>('unmounted'), 322)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke script.<java.io.File: boolean isFile()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack15 = virtualinvoke script.<java.io.File: boolean isFile()>(), 312)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "hm := @parameter0: org.openpnp.machine.reference.ReferenceHeadMountable",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = interfaceinvoke hm.<org.openpnp.machine.reference.ReferenceHeadMountable: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "97"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack30 = interfaceinvoke hm.<org.openpnp.machine.reference.ReferenceHeadMountable: java.lang.String getName()>(), 97)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack101 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack100, $stack99)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1022"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack101 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack100, $stack99), 1022)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack32 = this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "289"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack32 = this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head head>, 289)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "unitsPerPixel = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "59"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, unitsPerPixel = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>(), 59)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l8 = $stack35",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, l8 = $stack35, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l8)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l8), 301)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "823"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera, 823)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceCamera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack107 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>(), 924)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.machine.reference.ReferenceCamera: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>",
  "line": "233"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack107 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: double getRotation()>(), 924)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getHeight()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getHeight()>(), 51)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "imageHeight = (double) $stack15",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, imageHeight = (double) $stack15, 51)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = imageHeight / 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "56"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack17 = imageHeight / 2.0, 56)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "823"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera, 823)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: void setRotation(double)>(0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "842"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: void setRotation(double)>(0.0), 842)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>",
  "line": "569"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>(), 941)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>",
  "line": "569"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>(), 941)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>",
  "line": "569"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>(), 941)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Machine: double getSpeed()>(), 569)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "speed := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(speed)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, $stack10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(speed), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack18 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: java.util.List getNozzleTips()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack18 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: java.util.List getNozzleTips()>(), 294)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l5 = interfaceinvoke $stack18.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l5 = interfaceinvoke $stack18.<java.util.List: java.util.Iterator iterator()>(), 294)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack20 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "829"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30), 829)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "830"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32), 830)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack165 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack164)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "879"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack165 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack164), 879)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24), 316)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame mainFrame>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>",
  "line": "150"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 294)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack26 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 1003)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.gui.MainFrame",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>(), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel cameraPanel>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>",
  "line": "174"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>(), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>(), 1003)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.gui.components.CameraPanel",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.openpnp.gui.components.CameraPanel: java.util.Map cameraViews>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)","(<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>, $stack2 = this.<org.openpnp.gui.components.CameraPanel: java.util.Map cameraViews>, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)","(<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>, $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera), 183)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "429"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 429)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "429"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 429)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "429"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(), 429)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "speed := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "23"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed), 23)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzleTip = (org.openpnp.spi.NozzleTip) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, nozzleTip = (org.openpnp.spi.NozzleTip) $stack7, 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceNozzleTip = (org.openpnp.machine.reference.ReferenceNozzleTip) nozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "214"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "234"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "280"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 280)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack22 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>(), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack22.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack23 = virtualinvoke $stack22.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>(), 63)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "units := @parameter0: org.openpnp.model.LengthUnit",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "60"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units, 60)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)","(<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>, $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera), 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = (org.openpnp.gui.components.CameraView) $stack3",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack28.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>($stack30, 1000L)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, virtualinvoke $stack28.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>($stack30, 1000L), 1003)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack6 = interfaceinvoke l0.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack6 = interfaceinvoke l0.<java.util.Iterator: boolean hasNext()>(), 125)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "310"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(event), 310)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "310"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>(), 310)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack8)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "310"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack8), 310)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24), 316)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzleTip = (org.openpnp.spi.NozzleTip) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, nozzleTip = (org.openpnp.spi.NozzleTip) $stack7, 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceNozzleTip = (org.openpnp.machine.reference.ReferenceNozzleTip) nozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "214"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack32 = interfaceinvoke reader.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "306"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack32 = interfaceinvoke reader.<java.util.Iterator: java.lang.Object next()>(), 306)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "name = (java.lang.String) $stack32",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "306"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, name = (java.lang.String) $stack32, 306)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack33 = interfaceinvoke additionalGlobals.<java.util.Map: java.lang.Object get(java.lang.Object)>(name)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack33 = interfaceinvoke additionalGlobals.<java.util.Map: java.lang.Object get(java.lang.Object)>(name), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceHead",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceHead",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "110"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100)","(<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 110)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "110"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "100"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "unitsPerPixel = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "59"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, unitsPerPixel = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>(), 59)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack48 = (double) $stack47",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack48 = (double) $stack47, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack49 = $stack48 * 0.25",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack49 = $stack48 * 0.25, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack50 = $stack44 + $stack49",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack50 = $stack44 + $stack49, 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "843"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "881"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceHead",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.model.Location maxLocation>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "93"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack20 = this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.model.Location maxLocation>, 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "823"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera, 823)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack58 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack58 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 851)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, null, location)",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "153"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "994"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame mainFrame>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>",
  "line": "150"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 294)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack26 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 1003)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.gui.MainFrame",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>(), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel cameraPanel>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>",
  "line": "174"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>(), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>(), 1003)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.gui.components.CameraPanel",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.openpnp.gui.components.CameraPanel: java.util.Map cameraViews>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)","(<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>, $stack2 = this.<org.openpnp.gui.components.CameraPanel: java.util.Map cameraViews>, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)","(<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>, $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera), 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = (org.openpnp.gui.components.CameraView) $stack3",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack28.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>($stack30, 1000L)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, virtualinvoke $stack28.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>($stack30, 1000L), 1003)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.spi.Camera$Looking getLooking()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "126"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack9 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.spi.Camera$Looking getLooking()>(), 126)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack101 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack100, $stack99)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1022"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack101 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack100, $stack99), 1022)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "50"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack14 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 50)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "imageWidth = (double) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "50"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, imageWidth = (double) $stack14, 50)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = imageWidth / 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "55"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack16 = imageWidth / 2.0, 55)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "offsetX = x - $stack16",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "55"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, offsetX = x - $stack16, 55)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "hm := @parameter0: org.openpnp.spi.HeadMountable",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, $stack65), 854)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, $stack65), 854)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack2 = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.spi.Head getHead()>(), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, $stack65), 854)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 27)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack42 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack42 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack43 = $stack42 / 2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack43 = $stack42 / 2, 844)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceHead",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.model.Location minLocation>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack17 = this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.model.Location minLocation>, 92)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>(), 311)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 == 0 goto return",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "429"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack31 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 429)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "429"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack32 = interfaceinvoke $stack31.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 429)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "429"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#11 = interfaceinvoke $stack32.<org.openpnp.spi.Machine: double getSpeed()>(), 429)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "speed := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzleTip = (org.openpnp.spi.NozzleTip) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, nozzleTip = (org.openpnp.spi.NozzleTip) $stack7, 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = nozzleTip instanceof org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack8 = nozzleTip instanceof org.openpnp.machine.reference.ReferenceNozzleTip, 213)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack105 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack104, $stack103)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1018"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack105 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack104, $stack103), 1018)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack7 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)","(<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>, $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera), 183)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)","(<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>, $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera), 183)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24), 316)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceHead",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "101"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>, $stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 577)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 577)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (org.openpnp.machine.reference.ReferenceMachine) $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "829"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30), 829)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "830"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32), 830)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "854"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64), 854)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, $stack65), 854)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(this, $stack38, globals#11), 432)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzleTip = (org.openpnp.spi.NozzleTip) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, nozzleTip = (org.openpnp.spi.NozzleTip) $stack7, 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceNozzleTip = (org.openpnp.machine.reference.ReferenceNozzleTip) nozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "214"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzleTip",
  "method": "<org.openpnp.spi.base.AbstractNozzleTip: java.lang.String getName()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411)","(<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip: java.lang.String getName()>(), 321)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzleTip: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzleTip",
  "method": "<org.openpnp.spi.base.AbstractNozzleTip: java.lang.String getName()>",
  "line": "29"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack6 = virtualinvoke nt.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 411)","(<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip: java.lang.String getName()>(), 321)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke script.<java.io.File: boolean isFile()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack15 = virtualinvoke script.<java.io.File: boolean isFile()>(), 312)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = camera instanceof org.openpnp.machine.reference.ReferenceCamera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "822"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack25 = camera instanceof org.openpnp.machine.reference.ReferenceCamera, 822)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "823"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera, 823)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: void setRotation(double)>(0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "842"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: void setRotation(double)>(0.0), 842)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke params.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>('camera', camera)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "850"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke params.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>('camera', camera), 850)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack227 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation(org.openpnp.spi.HeadMountable)>(nozzle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "938"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack227 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation(org.openpnp.spi.HeadMountable)>(nozzle), 938)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzleTip = (org.openpnp.spi.NozzleTip) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, nozzleTip = (org.openpnp.spi.NozzleTip) $stack7, 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceNozzleTip = (org.openpnp.machine.reference.ReferenceNozzleTip) nozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "214"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = virtualinvoke referenceNozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "215"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack10 = virtualinvoke referenceNozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: boolean isUnloadedNozzleTipStandin()>(), 215)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke script.<java.io.File: boolean isFile()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack15 = virtualinvoke script.<java.io.File: boolean isFile()>(), 312)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 220)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzleTip = (org.openpnp.spi.NozzleTip) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, nozzleTip = (org.openpnp.spi.NozzleTip) $stack7, 220)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getHeight()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack15 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getHeight()>(), 51)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "imageHeight = (double) $stack15",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, imageHeight = (double) $stack15, 51)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "50"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack14 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack14 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack61 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1039"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack61 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 1039)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack22 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>(), 63)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, location = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>(offset), 484)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>(), 205)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>",
  "line": "84"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, location = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>(offset), 484)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>(), 205)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "993"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, virtualinvoke pipeline.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', camera), 993)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "295"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "295"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 577)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (org.openpnp.machine.reference.ReferenceMachine) $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "573"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceMachine",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceMachine",
  "method": "<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 573)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver driver>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceMachine",
  "method": "<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "107"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 573)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "573"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ()>(), 941)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, $stack26 = this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head head>, 299)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, null, location)",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "153"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "994"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Point",
"location": {
  "file": "",
  "class": "org.openpnp.model.Point",
  "method": "<org.openpnp.model.Point: double getX()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack21 = virtualinvoke maskCenter.<org.openpnp.model.Point: double getX()>(), 995)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Point: double x>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Point",
  "method": "<org.openpnp.model.Point: double getX()>",
  "line": "42"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack21 = virtualinvoke maskCenter.<org.openpnp.model.Point: double getX()>(), 995)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack21 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack21 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 296)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke script.<java.io.File: boolean isFile()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack15 = virtualinvoke script.<java.io.File: boolean isFile()>(), 312)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack51 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getHeight()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack51 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getHeight()>(), 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack52 = $stack51 / 2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack52 = $stack51 / 2, 845)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "829"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30), 829)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "830"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32), 830)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "854"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64), 854)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack94 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack93, $stack92)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1026"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack94 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack93, $stack92), 1026)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, null, location)",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "153"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "994"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Point",
"location": {
  "file": "",
  "class": "org.openpnp.model.Point",
  "method": "<org.openpnp.model.Point: double getY()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack22 = virtualinvoke maskCenter.<org.openpnp.model.Point: double getY()>(), 995)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Point: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Point",
  "method": "<org.openpnp.model.Point: double getY()>",
  "line": "50"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack22 = virtualinvoke maskCenter.<org.openpnp.model.Point: double getY()>(), 995)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke maskCenter.<org.openpnp.model.Point: double getY()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "995"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack22 = virtualinvoke maskCenter.<org.openpnp.model.Point: double getY()>(), 995)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack19.<org.opencv.core.Point: void <init>(double,double)>($stack21, $stack22)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "995"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, specialinvoke $stack19.<org.opencv.core.Point: void <init>(double,double)>($stack21, $stack22), 995)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack48 = (double) $stack47",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack48 = (double) $stack47, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack49 = $stack48 * 0.25",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack49 = $stack48 * 0.25, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack50 = $stack44 + $stack49",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack50 = $stack44 + $stack49, 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "843"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "881"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack48 = (double) $stack47",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack48 = (double) $stack47, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack49 = $stack48 * 0.25",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack49 = $stack48 * 0.25, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack50 = $stack44 + $stack49",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack50 = $stack44 + $stack49, 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "843"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "884"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "offset = virtualinvoke offset.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack174)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "887"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = virtualinvoke offset.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack174), 887)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke nozzleTipMeasuredLocations.<java.util.List: boolean add(java.lang.Object)>(offset)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "890"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, interfaceinvoke nozzleTipMeasuredLocations.<java.util.List: boolean add(java.lang.Object)>(offset), 890)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "823"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera, 823)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceCamera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack15 = virtualinvoke $stack14.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location headOffsets>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>",
  "line": "203"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack15 = virtualinvoke $stack14.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack104 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "919"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack104 = virtualinvoke referenceCamera.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>(), 919)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event), 315)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: java.lang.String getName()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack29 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String getName()>(), 412)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: java.lang.String getName()>",
  "line": "67"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack29 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String getName()>(), 412)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack16 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 293)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24), 316)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack48 = (double) $stack47",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack48 = (double) $stack47, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack49 = $stack48 * 0.25",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack49 = $stack48 * 0.25, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack50 = $stack44 + $stack49",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack50 = $stack44 + $stack49, 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "843"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureLocation = virtualinvoke $stack165.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack166), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "884"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.vision.pipeline.CvPipeline getPipeline()>",
  "line": "1176"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, pipeline = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 992)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.vision.pipeline.CvPipeline getPipeline()>, $stack3 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 1176)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', $stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.vision.pipeline.CvPipeline getPipeline()>",
  "line": "1176"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, pipeline = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.vision.pipeline.CvPipeline getPipeline()>(), 992)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.vision.pipeline.CvPipeline getPipeline()>, virtualinvoke $stack1.<org.openpnp.vision.pipeline.CvPipeline: void setProperty(java.lang.String,java.lang.Object)>('camera', $stack3), 1176)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack51 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getHeight()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack51 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getHeight()>(), 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack52 = $stack51 / 2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack52 = $stack51 / 2, 845)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack22 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getUnitsPerPixel()>(), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack22.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack23 = virtualinvoke $stack22.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>(), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack21.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack23, offsetX, offsetY, 0.0, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, specialinvoke $stack21.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack23, offsetX, offsetY, 0.0, 0.0), 63)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack6 = interfaceinvoke l0.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack6 = interfaceinvoke l0.<java.util.Iterator: boolean hasNext()>(), 125)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 577)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (org.openpnp.machine.reference.ReferenceMachine) $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "573"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceMachine",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceMachine",
  "method": "<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 573)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver driver>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceMachine",
  "method": "<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "107"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 573)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.machine.reference.ReferenceMachine: org.openpnp.machine.reference.ReferenceDriver getDriver()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>",
  "line": "573"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack21 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>",
  "line": "298"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, $stack21 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 298)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack21.<org.openpnp.machine.reference.ReferenceDriver: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, l, $stack24)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>",
  "line": "298"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, interfaceinvoke $stack21.<org.openpnp.machine.reference.ReferenceDriver: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, l, $stack24), 298)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceHead",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "101"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractMachine",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<org.openpnp.spi.base.AbstractMachine: java.util.Set listeners>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "254"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, $stack4 = this.<org.openpnp.spi.base.AbstractMachine: java.util.Set listeners>, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l2 = interfaceinvoke $stack4.<java.util.Set: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "254"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, l2 = interfaceinvoke $stack4.<java.util.Set: java.util.Iterator iterator()>(), 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "reader#3 = $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, reader#3 = $stack22, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke reader#3.<java.io.FileReader: void close()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "307"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke reader#3.<java.io.FileReader: void close()>(), 307)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = interfaceinvoke additionalGlobals.<java.util.Map: java.lang.Object get(java.lang.Object)>(name)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack33 = interfaceinvoke additionalGlobals.<java.util.Map: java.lang.Object get(java.lang.Object)>(name), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame mainFrame>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>",
  "line": "150"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 294)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 294)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack48 = (double) $stack47",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack48 = (double) $stack47, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack49 = $stack48 * 0.25",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack49 = $stack48 * 0.25, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack50 = $stack44 + $stack49",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack50 = $stack44 + $stack49, 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "843"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "564"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 564)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "564"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 564)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "564"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>(), 564)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack48 = (double) $stack47",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack48 = (double) $stack47, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack49 = $stack48 * 0.25",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack49 = $stack48 * 0.25, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack50 = $stack44 + $stack49",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack50 = $stack44 + $stack49, 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "843"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>(), 311)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 == 0 goto return",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "50"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack14 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "295"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "823"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, referenceCamera = (org.openpnp.machine.reference.ReferenceCamera) camera, 823)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceCamera",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack15 = virtualinvoke $stack14.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location headOffsets>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceCamera",
  "method": "<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>",
  "line": "203"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack15 = virtualinvoke $stack14.<org.openpnp.machine.reference.ReferenceCamera: org.openpnp.model.Location getHeadOffsets()>(), 91)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke params.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>('nozzle', nozzle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "849"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke params.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>('nozzle', nozzle), 849)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 577)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (org.openpnp.machine.reference.ReferenceMachine) $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, $stack25 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 299)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractMachine",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<org.openpnp.spi.base.AbstractMachine: java.util.Set listeners>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "254"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, $stack4 = this.<org.openpnp.spi.base.AbstractMachine: java.util.Set listeners>, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l2 = interfaceinvoke $stack4.<java.util.Set: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "254"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, l2 = interfaceinvoke $stack4.<java.util.Set: java.util.Iterator iterator()>(), 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "257"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 257)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "listener = (org.openpnp.spi.MachineListener) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "257"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, listener = (org.openpnp.spi.MachineListener) $stack7, 257)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack48 = (double) $stack47",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack48 = (double) $stack47, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack49 = $stack48 * 0.25",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack49 = $stack48 * 0.25, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack50 = $stack44 + $stack49",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack50 = $stack44 + $stack49, 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "843"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>(), 311)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 == 0 goto return",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack94 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack93, $stack92)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1026"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack94 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack93, $stack92), 1026)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame mainFrame>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>",
  "line": "150"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 294)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack26 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 1003)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.gui.MainFrame",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>(), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel cameraPanel>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>",
  "line": "174"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>(), 1003)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script), 304)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "829"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30), 829)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "830"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32), 830)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "854"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64), 854)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, $stack65), 854)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, $stack65), 854)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceHead",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractHead",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractHead",
  "method": "<org.openpnp.spi.base.AbstractHead: boolean isSoftLimitsEnabled()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack8 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: boolean isSoftLimitsEnabled()>(), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractHead: boolean softLimitsEnabled>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractHead",
  "method": "<org.openpnp.spi.base.AbstractHead: boolean isSoftLimitsEnabled()>",
  "line": "314"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack8 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: boolean isSoftLimitsEnabled()>(), 85)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: boolean isSoftLimitsEnabled()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "85"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack8 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: boolean isSoftLimitsEnabled()>(), 85)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "991"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 991)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "camera := @parameter0: org.openpnp.spi.Camera",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(camera, null, location)",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>",
  "line": "153"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "994"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, maskCenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Point getLocationPixels(org.openpnp.spi.Camera,org.openpnp.model.Location)>(camera, measureLocation), 994)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "reader#3 = $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, reader#3 = $stack22, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>, $stack2 = virtualinvoke $stack1.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 577)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (org.openpnp.machine.reference.ReferenceMachine) $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, $stack25 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 299)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractMachine",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke listener.<org.openpnp.spi.MachineListener: void machineHeadActivity(org.openpnp.spi.Machine,org.openpnp.spi.Head)>(this, head)",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractMachine",
  "method": "<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>",
  "line": "255"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, virtualinvoke $stack10.<org.openpnp.machine.reference.ReferenceMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>(this), 101)","(<org.openpnp.spi.base.AbstractMachine: void fireMachineHeadActivity(org.openpnp.spi.Head)>, interfaceinvoke listener.<org.openpnp.spi.MachineListener: void machineHeadActivity(org.openpnp.spi.Machine,org.openpnp.spi.Head)>(this, head), 255)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "828"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, cameraLocation = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation()>(), 828)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "829"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack31 = virtualinvoke cameraLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack30), 829)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "830"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, measureBaseLocation = virtualinvoke $stack31.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack32), 830)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "854"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack65 = virtualinvoke measureBaseLocation.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack64), 854)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "89"
},
"stackTrace": [""]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack0 != null goto $stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "89"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24), 316)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack45 = interfaceinvoke camera.<org.openpnp.spi.Camera: int getWidth()>(), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack47 = staticinvoke <java.lang.Math: int min(int,int)>($stack45, $stack46), 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack48 = (double) $stack47",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack48 = (double) $stack47, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack49 = $stack48 * 0.25",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "844"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack49 = $stack48 * 0.25, 844)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack50 = $stack44 + $stack49",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "845"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack50 = $stack44 + $stack49, 845)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "843"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, excenter = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera, $stack50, $stack53), 843)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "880"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack166 = virtualinvoke excenter.<org.openpnp.model.Location: org.openpnp.model.Location rotateXy(double)>(measureAngle), 880)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>",
  "line": "298"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>($stack72), 443)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveToSafeZ(double)>, $stack22 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 298)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack26 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "288"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack27 = (org.openpnp.machine.reference.ReferenceHead) $stack26, 288)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceHead",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "91"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack13 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceHead: org.openpnp.spi.Camera getDefaultCamera()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = (org.openpnp.machine.reference.ReferenceCamera) $stack13",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceHead",
  "method": "<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>",
  "line": "91"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, virtualinvoke $stack27.<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>(this, location, $stack30), 288)","(<org.openpnp.machine.reference.ReferenceHead: void moveTo(org.openpnp.machine.reference.ReferenceHeadMountable,org.openpnp.model.Location,double)>, $stack14 = (org.openpnp.machine.reference.ReferenceCamera) $stack13, 91)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.spi.Camera$Looking getLooking()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "126"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack9 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.spi.Camera$Looking getLooking()>(), 126)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event), 315)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame mainFrame>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>",
  "line": "150"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 294)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack26 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 1003)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.gui.MainFrame",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>(), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel cameraPanel>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>",
  "line": "174"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>(), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack27 = virtualinvoke $stack26.<org.openpnp.gui.MainFrame: org.openpnp.gui.components.CameraPanel getCameraViews()>(), 1003)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.gui.components.CameraPanel",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.openpnp.gui.components.CameraPanel: java.util.Map cameraViews>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)","(<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>, $stack2 = this.<org.openpnp.gui.components.CameraPanel: java.util.Map cameraViews>, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)","(<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>, $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(camera), 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = (org.openpnp.gui.components.CameraView) $stack3",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraPanel",
  "method": "<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>",
  "line": "183"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>",
  "line": "1003"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, $stack28 = virtualinvoke $stack27.<org.openpnp.gui.components.CameraPanel: org.openpnp.gui.components.CameraView getCameraView(org.openpnp.spi.Camera)>(camera), 1003)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.gui.components.CameraView",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraView",
  "method": "<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, virtualinvoke $stack28.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>($stack30, 1000L), 1003)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,java.lang.String,long)>(filteredImage, null, milliseconds)",
"location": {
  "file": "",
  "class": "org.openpnp.gui.components.CameraView",
  "method": "<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>",
  "line": "355"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, offset = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>(measureLocation), 884)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: org.openpnp.model.Location findCircle(org.openpnp.model.Location)>, virtualinvoke $stack28.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>($stack30, 1000L), 1003)","(<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,long)>, virtualinvoke this.<org.openpnp.gui.components.CameraView: void showFilteredImage(java.awt.image.BufferedImage,java.lang.String,long)>(filteredImage, null, milliseconds), 355)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack18 = this.<org.openpnp.machine.reference.ReferenceNozzle: boolean limitRotation>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "270"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack18 = this.<org.openpnp.machine.reference.ReferenceNozzle: boolean limitRotation>, 270)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: java.lang.String getName()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack29 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String getName()>(), 412)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: java.lang.String getName()>",
  "line": "67"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack29 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String getName()>(), 412)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack23 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "286"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack23 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String getName()>(), 286)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>(), 212)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack3 = virtualinvoke $stack2.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: java.util.List getCameras()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, l0 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 125)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack8 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>(), 130)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = (org.openpnp.spi.Camera) $stack8",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "130"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "820"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke params.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>('camera', camera)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "850"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke params.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>('camera', camera), 850)"]
}]
}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "295"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>(), 311)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 == 0 goto return",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event), 315)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>",
  "line": "125"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, camera = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>(), 820)","(<org.openpnp.util.VisionUtils: org.openpnp.spi.Camera getBottomVisionCamera()>, $stack2 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 125)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke script.<java.io.File: boolean isFile()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack15 = virtualinvoke script.<java.io.File: boolean isFile()>(), 312)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack219 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "814"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack219 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 814)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 294)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24), 316)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "420"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "295"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event), 315)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "calibrationNozzleTip = this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip nozzleTip>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "228"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "470"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 470)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "295"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "470"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 470)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack16 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 293)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Scripting.on ')",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "310"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Scripting.on '), 310)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "310"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(event), 310)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "310"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>(), 310)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack8)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "310"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack8), 310)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>(), 311)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 == 0 goto return",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l6 = $stack35",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, l6 = $stack35, 304)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "name#4 = l6",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, name#4 = l6, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l8)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "307"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l8), 307)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>(), 311)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 == 0 goto return",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = new java.lang.Error",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)","(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.')",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)","(<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>, specialinvoke $stack2.<java.lang.Error: void <init>(java.lang.String)>('Configuration instance not yet initialized.'), 90)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke reader.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack26 = interfaceinvoke reader.<java.util.Iterator: boolean hasNext()>(), 299)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto $stack22 = new java.io.FileReader",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame mainFrame>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>",
  "line": "150"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 294)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack0",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>",
  "line": "150"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.util.IdentifiableList nozzleTips>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: java.util.List getNozzleTips()>",
  "line": "42"
},
"stackTrace": ["(<org.openpnp.spi.base.AbstractNozzle: java.util.List getNozzleTips()>, $stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.util.IdentifiableList nozzleTips>, 42)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack1)",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: java.util.List getNozzleTips()>",
  "line": "42"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>(), 212)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>(), 212)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 220)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzleTip = (org.openpnp.spi.NozzleTip) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, nozzleTip = (org.openpnp.spi.NozzleTip) $stack7, 220)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "referenceNozzleTip = (org.openpnp.machine.reference.ReferenceNozzleTip) nozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "214"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "234"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "470"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 470)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>(), 311)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 == 0 goto return",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke script.<java.io.File: boolean isFile()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack15 = virtualinvoke script.<java.io.File: boolean isFile()>(), 312)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "234"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "470"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 470)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack58 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack58 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24), 316)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24), 316)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: java.util.List getNozzleTips()>(), 212)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "212"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 220)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzleTip = (org.openpnp.spi.NozzleTip) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, nozzleTip = (org.openpnp.spi.NozzleTip) $stack7, 220)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "referenceNozzleTip = (org.openpnp.machine.reference.ReferenceNozzleTip) nozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "214"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "234"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "470"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 470)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke script.<java.io.File: boolean isFile()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack15 = virtualinvoke script.<java.io.File: boolean isFile()>(), 312)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack58 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack58 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 851)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack14 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event), 315)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke script.<java.io.File: boolean isFile()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack15 = virtualinvoke script.<java.io.File: boolean isFile()>(), 312)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack58 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack58 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "295"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l6 = $stack36",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, l6 = $stack36, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l6), 304)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script), 304)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke script.<java.io.File: boolean isFile()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack15 = virtualinvoke script.<java.io.File: boolean isFile()>(), 312)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "referenceNozzleTip = (org.openpnp.machine.reference.ReferenceNozzleTip) nozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "214"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "234"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "470"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 470)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24), 316)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>, $stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 577)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event), 315)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack9 = interfaceinvoke $stack8.<org.openpnp.spi.Machine: java.util.List getHeads()>(), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script), 304)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script), 304)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l6 = $stack35",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, l6 = $stack35, 304)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "name#4 = l6",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, name#4 = l6, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if name#4 == null goto virtualinvoke reader#3.<java.io.FileReader: void close()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "306"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack7 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 292)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "calibrationNozzleTip = null",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "226"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "470"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 470)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "name = (java.lang.String) $stack32",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "306"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, name = (java.lang.String) $stack32, 306)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack33 = interfaceinvoke additionalGlobals.<java.util.Map: java.lang.Object get(java.lang.Object)>(name)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack33 = interfaceinvoke additionalGlobals.<java.util.Map: java.lang.Object get(java.lang.Object)>(name), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script), 304)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l8 = $stack37",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "307"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, l8 = $stack37, 307)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l8)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "307"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, virtualinvoke name#4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l8), 307)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke script.<java.io.File: boolean isFile()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack15 = virtualinvoke script.<java.io.File: boolean isFile()>(), 312)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "312"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = new java.io.FileReader",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script), 304)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "reader#3 = $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, reader#3 = $stack22, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack16 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>($stack16), 315)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event), 315)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l1 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>(), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 301)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "head = (org.openpnp.spi.Head) $stack12",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "301"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, head = (org.openpnp.spi.Head) $stack12, 301)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack13 = interfaceinvoke head.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)","(<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>, $stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 300)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack14 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "421"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "422"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack21 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack21 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 296)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "296"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('javax.script.filename', $stack21), 296)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "304"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, specialinvoke $stack22.<java.io.FileReader: void <init>(java.io.File)>(script), 304)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.Scripting scripting>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack91 = virtualinvoke $stack90.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 421)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('config', $stack14), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack16 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 293)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24), 316)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('machine', $stack17), 293)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "92"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack90 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 420)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>",
  "line": "577"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, $stack4 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>(), 479)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceDriver getDriver()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>(), 573)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceMachine getMachine()>, $stack1 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 577)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Configuration",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "417"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Configuration: org.openpnp.spi.Machine machine>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack17 = virtualinvoke $stack16.<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>(), 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.spi.Machine getMachine()>",
  "line": "383"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = interfaceinvoke additionalGlobals.<java.util.Map: java.lang.Object get(java.lang.Object)>(name)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack33 = interfaceinvoke additionalGlobals.<java.util.Map: java.lang.Object get(java.lang.Object)>(name), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame mainFrame>",
"location": {
  "file": "",
  "class": "org.openpnp.gui.MainFrame",
  "method": "<org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>",
  "line": "150"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 294)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack19 = staticinvoke <org.openpnp.gui.MainFrame: org.openpnp.gui.MainFrame get()>(), 294)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "305"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>(reader#3), 305)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "295"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "nozzleTip = (org.openpnp.spi.NozzleTip) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "220"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>, nozzleTip = (org.openpnp.spi.NozzleTip) $stack7, 220)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "referenceNozzleTip = (org.openpnp.machine.reference.ReferenceNozzleTip) nozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>",
  "line": "214"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>, $stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>(), 234)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = specialinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getUnloadedNozzleTipStandin()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>",
  "line": "234"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)","(<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>, $stack7 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>(), 256)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.model.Location getLocation()>, calibrationNozzleTip = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>",
  "line": "470"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, globals#90 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.machine.reference.ReferenceNozzleTip getCalibrationNozzleTip()>(), 470)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nozzleTip := @parameter0: org.openpnp.machine.reference.ReferenceNozzleTip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack22 = virtualinvoke nozzleTip.<org.openpnp.machine.reference.ReferenceNozzleTip: org.openpnp.spi.Nozzle getParentNozzle()>(), 811)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "811"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, nozzle = (org.openpnp.machine.reference.ReferenceNozzle) $stack22, 811)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, virtualinvoke nozzle.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location)>(measureLocation), 881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.machine.reference.ReferenceNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void moveTo(org.openpnp.model.Location,double)>($stack53, $stack55), 436)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.spi.base.AbstractNozzle",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, $stack86 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 417)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "52"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(event), 315)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "315"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: java.lang.String[] extensions>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "script := @parameter0: java.io.File",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack10 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack11 = staticinvoke <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($stack10), 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "295"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('scripting', this), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "89"
},
"stackTrace": [""]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack0 != null goto $stack1 = <org.openpnp.model.Configuration: org.openpnp.model.Configuration instance>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Configuration",
  "method": "<org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>",
  "line": "89"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "reader = interfaceinvoke $stack24.<java.util.Set: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, reader = interfaceinvoke $stack24.<java.util.Set: java.util.Iterator iterator()>(), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = interfaceinvoke reader.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "306"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack32 = interfaceinvoke reader.<java.util.Iterator: java.lang.Object next()>(), 306)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "name = (java.lang.String) $stack32",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "306"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, name = (java.lang.String) $stack32, 306)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack33 = interfaceinvoke additionalGlobals.<java.util.Map: java.lang.Object get(java.lang.Object)>(name)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack33 = interfaceinvoke additionalGlobals.<java.util.Map: java.lang.Object get(java.lang.Object)>(name), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "300"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>(name, $stack33), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack58 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack58 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 851)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "851"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack59 = virtualinvoke $stack58.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 851)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack10 = this.<org.openpnp.Scripting: java.io.File eventsDirectory>, 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack11 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($stack10, $stack9, 0), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "311"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, l3 = interfaceinvoke $stack11.<java.util.Collection: java.util.Iterator iterator()>(), 311)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "script = (java.io.File) $stack14",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "320"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, script = (java.io.File) $stack14, 320)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack22 = virtualinvoke script.<java.io.File: java.lang.String getName()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Scripting.on found ')",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Scripting.on found '), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "316"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, staticinvoke <org.pmw.tinylog.Logger: void trace(java.lang.String)>($stack24), 316)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack95 = staticinvoke <org.openpnp.model.Configuration: org.openpnp.model.Configuration get()>(), 900)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
  "method": "<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>",
  "line": "900"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack24.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>(globals#90), 473)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip)>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>(nozzleTip, 0, 0), 952)","(<org.openpnp.machine.reference.ReferenceNozzleTip$Calibration: void calibrate(org.openpnp.machine.reference.ReferenceNozzleTip,boolean,boolean)>, $stack96 = virtualinvoke $stack95.<org.openpnp.model.Configuration: org.openpnp.Scripting getScripting()>(), 900)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.Scripting",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, $stack9 = this.<org.openpnp.Scripting: javax.script.ScriptEngineManager manager>, 290)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "290"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, engine = virtualinvoke $stack9.<javax.script.ScriptEngineManager: javax.script.ScriptEngine getEngineByExtension(java.lang.String)>($stack11), 290)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19)",
"location": {
  "file": "",
  "class": "org.openpnp.Scripting",
  "method": "<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>",
  "line": "294"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: void unloadNozzleTip()>, virtualinvoke $stack91.<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>('NozzleTip.BeforeUnload', globals), 422)","(<org.openpnp.Scripting: void on(java.lang.String,java.util.Map)>, virtualinvoke this.<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>(script, globals), 317)","(<org.openpnp.Scripting: void execute(java.io.File,java.util.Map)>, interfaceinvoke engine.<javax.script.ScriptEngine: void put(java.lang.String,java.lang.Object)>('gui', $stack19), 294)"]
}]
}
}

]
