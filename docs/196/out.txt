SOURCE=>BASE: Node(<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>,$stack12 = new se.vidstige.jadb.AdbFilterInputStream,81,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp),24,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24))
SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp),24,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24))

SOURCE=>BASE: Node(<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>,$stack12 = new se.vidstige.jadb.AdbFilterInputStream,81,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25),59,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59))
SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25),59,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59))

SOURCE=>BASE: Node(<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>,$stack12 = new se.vidstige.jadb.AdbFilterInputStream,81,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25),59,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>("install", $stack28, result),61,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>('install', $stack28, result), 61))
SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25),59,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>("install", $stack28, result),61,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>('install', $stack28, result), 61))

SOURCE=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,in := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,$stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer),17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, $stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer), 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,len = $stack4,17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, len = $stack4, 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, len),18,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, len), 18))
SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,in := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,$stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer),17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, $stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer), 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,len = $stack4,17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, len = $stack4, 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, len),18,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, len), 18))

SOURCE=>BASE: Node(<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>,$stack12 = new se.vidstige.jadb.AdbFilterInputStream,81,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,in := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,$stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer),17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, $stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer), 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,len = $stack4,17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, len = $stack4, 17))
SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,in := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,$stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer),17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, $stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer), 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,len = $stack4,17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, len = $stack4, 17))

List(Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)))

List(Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)))

