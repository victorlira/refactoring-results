[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>,$stack12 = new se.vidstige.jadb.AdbFilterInputStream,81,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp),24,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)) SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp),24,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack14 = new java.util.ArrayList",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.managers.PackageManager",
					"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
					"line": 54
				},
				"stackTrace": [{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 54
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 54
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>",
	"line": -1
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>",
	"line": 24
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack12 = new se.vidstige.jadb.AdbFilterInputStream",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.JadbDevice",
					"method": "<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>",
					"line": 81
				},
				"stackTrace": [{
	"class": "se.vidstige.jadb.JadbDevice",
	"method": "<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>",
	"line": 81
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>",
	"line": -1
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>",
	"line": 24
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp)",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.Stream",
					"method": "<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>",
					"line": 24
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>,$stack12 = new se.vidstige.jadb.AdbFilterInputStream,81,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25),59,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25),59,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack14 = new java.util.ArrayList",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.managers.PackageManager",
					"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
					"line": 54
				},
				"stackTrace": [{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 54
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 54
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 59
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack12 = new se.vidstige.jadb.AdbFilterInputStream",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.JadbDevice",
					"method": "<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>",
					"line": 81
				},
				"stackTrace": [{
	"class": "se.vidstige.jadb.JadbDevice",
	"method": "<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>",
	"line": 81
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 59
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25)",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.managers.PackageManager",
					"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
					"line": 59
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>,$stack12 = new se.vidstige.jadb.AdbFilterInputStream,81,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25),59,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>("install", $stack28, result),61,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>('install', $stack28, result), 61)) SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25),59,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>("install", $stack28, result),61,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>('install', $stack28, result), 61))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack14 = new java.util.ArrayList",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.managers.PackageManager",
					"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
					"line": 54
				},
				"stackTrace": [{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 54
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 54
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 59
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 61
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack12 = new se.vidstige.jadb.AdbFilterInputStream",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.JadbDevice",
					"method": "<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>",
					"line": 81
				},
				"stackTrace": [{
	"class": "se.vidstige.jadb.JadbDevice",
	"method": "<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>",
	"line": 81
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 59
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 61
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>('install', $stack28, result)",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.managers.PackageManager",
					"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
					"line": 61
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,in := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,$stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer),17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, $stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer), 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,len = $stack4,17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, len = $stack4, 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, len),18,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, len), 18)) SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,in := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,$stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer),17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, $stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer), 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,len = $stack4,17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, len = $stack4, 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, len),18,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, len), 18))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack14 = new java.util.ArrayList",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.managers.PackageManager",
					"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
					"line": 54
				},
				"stackTrace": [{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 54
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 54
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>",
	"line": -1
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": -1
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": 17
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": 17
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": 18
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23)",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.managers.PackageManager",
					"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
					"line": 58
				},
				"stackTrace": [{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>",
	"line": -1
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": -1
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": 17
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": 17
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": 18
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, len)",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.Stream",
					"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
					"line": 18
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>,$stack12 = new se.vidstige.jadb.AdbFilterInputStream,81,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,in := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,$stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer),17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, $stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer), 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,len = $stack4,17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, len = $stack4, 17)) SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,in := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,$stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer),17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, $stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer), 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,len = $stack4,17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, len = $stack4, 17))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack14 = new java.util.ArrayList",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.managers.PackageManager",
					"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
					"line": 54
				},
				"stackTrace": [{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 54
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 54
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>",
	"line": -1
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": -1
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": 17
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": 17
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack12 = new se.vidstige.jadb.AdbFilterInputStream",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.JadbDevice",
					"method": "<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>",
					"line": 81
				},
				"stackTrace": [{
	"class": "se.vidstige.jadb.JadbDevice",
	"method": "<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>",
	"line": 81
},{
	"class": "se.vidstige.jadb.managers.PackageManager",
	"method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
	"line": 58
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>",
	"line": -1
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": -1
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": 17
},{
	"class": "se.vidstige.jadb.Stream",
	"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
	"line": 17
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "len = $stack4",
				"location": {
					"file": "",
					"class": "se.vidstige.jadb.Stream",
					"method": "<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>",
					"line": 17
				}
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = new java.util.ArrayList",
"location": {
  "file": "",
  "class": "se.vidstige.jadb.managers.PackageManager",
  "method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
  "line": "54"
},
"stackTrace": ["(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "arguments = $stack14",
"location": {
  "file": "",
  "class": "se.vidstige.jadb.managers.PackageManager",
  "method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
  "line": "54"
},
"stackTrace": ["(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19)",
"location": {
  "file": "",
  "class": "se.vidstige.jadb.managers.PackageManager",
  "method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
  "line": "58"
},
"stackTrace": ["(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack23 = (java.lang.String[]) $stack22",
"location": {
  "file": "",
  "class": "se.vidstige.jadb.managers.PackageManager",
  "method": "<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>",
  "line": "58"
},
"stackTrace": ["(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)"]
}]
}
}

]
