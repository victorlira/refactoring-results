Running soot scenario jadb;se.vidstige.jadb.managers.PackageManager;install(File, List<String>);6c84fe654222121475fb066fd217db3143fb901a
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jadb/6c84fe654222121475fb066fd217db3143fb901a/original-without-dependencies/jadb-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,47700
Time to perform Confluence 1 Inter 1,31600
Configure Soot Confluence 2 Inter 0,15500
Time to perform Confluence 2 Inter 0,58300
Visited methods: 116
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>,$stack12 = new se.vidstige.jadb.AdbFilterInputStream,81,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp),24,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24))
SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp),24,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)), SOURCE=>BASE: Node(<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>,$stack12 = new se.vidstige.jadb.AdbFilterInputStream,81,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25),59,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59))
SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25),59,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)), SOURCE=>BASE: Node(<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>,$stack12 = new se.vidstige.jadb.AdbFilterInputStream,81,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25),59,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>("install", $stack28, result),61,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>('install', $stack28, result), 61))
SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25),59,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>("install", $stack28, result),61,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>('install', $stack28, result), 61)), SOURCE=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,in := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,$stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer),17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, $stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer), 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,len = $stack4,17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, len = $stack4, 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, len),18,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, len), 18))
SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,in := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,$stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer),17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, $stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer), 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,len = $stack4,17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, len = $stack4, 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, len),18,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, len), 18)), SOURCE=>BASE: Node(<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>,$stack12 = new se.vidstige.jadb.AdbFilterInputStream,81,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,in := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,$stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer),17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, $stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer), 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,len = $stack4,17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, len = $stack4, 17))
SINK=>BASE: Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23),58,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)) => Node(<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>,input := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,in := @parameter0: java.io.InputStream,-1,SimpleNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,$stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer),17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, $stack4 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buffer), 17)) => Node(<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>,len = $stack4,17,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24) => (<se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>, len = $stack4, 17))]
Confluence interference in <se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>
Confluence flows from execution of lines 58 and 54 to line 59, defined in s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23) and specialinvoke $stack14.<java.util.ArrayList: void <init>()>() and used in result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25)
Caused by line 58 flow: path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)
Caused by line 54 flow: path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)
Caused by line 59 flow: path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, result = staticinvoke <se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>(s, $stack25), 59) => (<se.vidstige.jadb.Stream: java.lang.String readAll(java.io.InputStream,java.nio.charset.Charset)>, staticinvoke <se.vidstige.jadb.Stream: void copy(java.io.InputStream,java.io.OutputStream)>(input, tmp), 24)
Confluence interference in <se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>
Confluence flows from execution of lines 58 and 54 to line 61, defined in s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>("pm", $stack23) and specialinvoke $stack14.<java.util.ArrayList: void <init>()>() and used in specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>("install", $stack28, result)
Caused by line 58 flow: path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, s = virtualinvoke $stack20.<se.vidstige.jadb.JadbDevice: java.io.InputStream executeShell(java.lang.String,java.lang.String[])>('pm', $stack23), 58)
Caused by line 54 flow: path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)
Caused by line 61 flow: path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke this.<se.vidstige.jadb.managers.PackageManager: void verifyOperation(java.lang.String,java.lang.String,java.lang.String)>('install', $stack28, result), 61)
 Analysis results
----------------------------
 Number of conflicts: 5
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jadb/6c84fe654222121475fb066fd217db3143fb901a/original-without-dependencies/jadb-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,53200
Runtime: 0.014s
Time to perform OA Inter 0,62300
OA Inter Visited methods: 13
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jadb/6c84fe654222121475fb066fd217db3143fb901a/original-without-dependencies/jadb-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,42100
Time to perform DFP Inter 0,81300
Depth limit: 5
CONFLICTS: []
Visited methods: 58
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jadb/6c84fe654222121475fb066fd217db3143fb901a/original-without-dependencies/jadb-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,59100
Time to perform DFP Inter 0,73400
Depth limit: 5
CONFLICTS: DF interference in <se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>
Data flows from execution of line 54 to 58, defined in $stack14 = new java.util.ArrayList and propagated in $stack23 = (java.lang.String[]) $stack22
Caused by line 54 flow: path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)
Caused by line 58 flow: path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)
[List(Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)))]
Visited methods: 48
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jadb/6c84fe654222121475fb066fd217db3143fb901a/original-without-dependencies/jadb-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,53600
Time to perform PDG 0,39300
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jadb/6c84fe654222121475fb066fd217db3143fb901a/original-without-dependencies/jadb-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,41400
Time to perform PDG 0,47000
CONFLICTS: [List(Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack14 = new java.util.ArrayList,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, specialinvoke $stack14.<java.util.ArrayList: void <init>()>(), 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,arguments = $stack14,54,SourceNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, arguments = $stack14, 54)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19),58,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack22 = interfaceinvoke arguments.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack19), 58)) => Node(<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>,$stack23 = (java.lang.String[]) $stack22,58,SinkNode, path: (<se.vidstige.jadb.managers.PackageManager: void install(java.io.File,java.util.List)>, $stack23 = (java.lang.String[]) $stack22, 58)))]
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
