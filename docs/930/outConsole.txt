Running soot scenario moquette;io.moquette.spi.impl.ProtocolProcessor;processSubscribe(Channel, SubscribeMessage);3085ee54d8ec8ff1fdce167c698af7064fc3052f
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/moquette/3085ee54d8ec8ff1fdce167c698af7064fc3052f/original-without-dependencies/moquette-broker-0.9-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,78400
Time to perform Confluence 1 Inter 1,15500
Configure Soot Confluence 2 Inter 0,18700
Time to perform Confluence 2 Inter 0,91600
Visited methods: 116
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,$stack3 = this.<io.moquette.spi.impl.ProtocolProcessor: java.util.concurrent.ConcurrentMap m_clientIDs>,329,SourceNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, $stack3 = this.<io.moquette.spi.impl.ProtocolProcessor: java.util.concurrent.ConcurrentMap m_clientIDs>, 329)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,$stack4 = interfaceinvoke $stack3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(clientID),329,SourceNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, $stack4 = interfaceinvoke $stack3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(clientID), 329)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,if $stack4 == 0 goto return,329,SinkNode, path: )
SINK=>BASE: Node(<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>,$stack1 = this.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String clientId>,50,SourceNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, valid = virtualinvoke clientSession.<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>(newSubscription), 740) => (<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>, $stack9 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 99)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,$stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(),782,SinkNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, $stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17),782,SinkNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,targetSession := @parameter0: io.moquette.spi.ClientSession,-1,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,clientID = targetSession.<io.moquette.spi.ClientSession: java.lang.String clientID>,328,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, clientID = targetSession.<io.moquette.spi.ClientSession: java.lang.String clientID>, 328)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,$stack4 = interfaceinvoke $stack3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(clientID),329,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, $stack4 = interfaceinvoke $stack3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(clientID), 329)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,if $stack4 == 0 goto return,329,SinkNode, path: )]
java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:430)
	at scala.collection.immutable.Nil$.head(List.scala:427)
	at scala.collection.generic.TraversableForwarder.head(TraversableForwarder.scala:59)
	at scala.collection.generic.TraversableForwarder.head$(TraversableForwarder.scala:59)
	at scala.collection.mutable.ListBuffer.head(ListBuffer.scala:47)
	at br.unb.cic.analysis.svfa.confluence.DFPConfluenceAnalysis.reportConflictsConfluence(DFPConfluenceAnalysis.java:181)
	at br.unb.cic.analysis.Main.runDFPConfluenceAnalysis(Main.java:566)
	at br.unb.cic.analysis.Main.runAnalysis(Main.java:243)
	at br.unb.cic.analysis.Main.main(Main.java:80)
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/moquette/3085ee54d8ec8ff1fdce167c698af7064fc3052f/original-without-dependencies/moquette-broker-0.9-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,68900
Runtime: 0.013s
Time to perform OA Inter 0,74800
OA Inter Visited methods: 8
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/moquette/3085ee54d8ec8ff1fdce167c698af7064fc3052f/original-without-dependencies/moquette-broker-0.9-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,74300
Time to perform DFP Inter 0,98500
Depth limit: 5
CONFLICTS: []
Visited methods: 58
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/moquette/3085ee54d8ec8ff1fdce167c698af7064fc3052f/original-without-dependencies/moquette-broker-0.9-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,52000
Time to perform DFP Inter 1,05700
Depth limit: 5
CONFLICTS: DF interference in <io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>
Data flows from execution of line 740 to 723, defined in $stack1 = this.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String clientId> and propagated in virtualinvoke targetSession.<io.moquette.spi.ClientSession: void activate()>()
Caused by line 740 flow: path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, valid = virtualinvoke clientSession.<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>(newSubscription), 740) => (<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>, $stack9 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 99)
Caused by line 723 flow: path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, virtualinvoke targetSession.<io.moquette.spi.ClientSession: void activate()>(), 330)
DF interference in <io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>
Data flows from execution of line 740 to 723, defined in $stack1 = this.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String clientId> and propagated in this.<io.moquette.spi.ClientSession: boolean active> = 1
Caused by line 740 flow: path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, valid = virtualinvoke clientSession.<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>(newSubscription), 740) => (<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>, $stack9 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 99)
Caused by line 723 flow: path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, virtualinvoke targetSession.<io.moquette.spi.ClientSession: void activate()>(), 330) => (<io.moquette.spi.ClientSession: void activate()>, this.<io.moquette.spi.ClientSession: boolean active> = 1, 158)
DF interference in <io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>
Data flows from execution of line 740 to 723, defined in $stack1 = this.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String clientId> and propagated in clientID = targetSession.<io.moquette.spi.ClientSession: java.lang.String clientID>
Caused by line 740 flow: path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, valid = virtualinvoke clientSession.<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>(newSubscription), 740) => (<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>, $stack9 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 99)
Caused by line 723 flow: path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, clientID = targetSession.<io.moquette.spi.ClientSession: java.lang.String clientID>, 328)
DF interference in <io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>
Data flows from execution of line 740 to 723, defined in $stack1 = this.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String clientId> and propagated in $stack4 = interfaceinvoke $stack3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(clientID)
Caused by line 740 flow: path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, valid = virtualinvoke clientSession.<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>(newSubscription), 740) => (<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>, $stack9 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 99)
Caused by line 723 flow: path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, $stack4 = interfaceinvoke $stack3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(clientID), 329)
[List(Node(<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>,$stack1 = this.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String clientId>,50,SourceNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, valid = virtualinvoke clientSession.<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>(newSubscription), 740) => (<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>, $stack9 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 99)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,$stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, $stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,targetSession := @parameter0: io.moquette.spi.ClientSession,-1,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,clientID = targetSession.<io.moquette.spi.ClientSession: java.lang.String clientID>,328,SinkNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, clientID = targetSession.<io.moquette.spi.ClientSession: java.lang.String clientID>, 328))), List(Node(<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>,$stack1 = this.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String clientId>,50,SourceNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, valid = virtualinvoke clientSession.<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>(newSubscription), 740) => (<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>, $stack9 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 99)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,$stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, $stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,targetSession := @parameter0: io.moquette.spi.ClientSession,-1,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,clientID = targetSession.<io.moquette.spi.ClientSession: java.lang.String clientID>,328,SinkNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, clientID = targetSession.<io.moquette.spi.ClientSession: java.lang.String clientID>, 328)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,$stack4 = interfaceinvoke $stack3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(clientID),329,SinkNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, $stack4 = interfaceinvoke $stack3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(clientID), 329))), List(Node(<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>,$stack1 = this.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String clientId>,50,SourceNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, valid = virtualinvoke clientSession.<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>(newSubscription), 740) => (<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>, $stack9 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 99)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,$stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, $stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,targetSession := @parameter0: io.moquette.spi.ClientSession,-1,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,virtualinvoke targetSession.<io.moquette.spi.ClientSession: void activate()>(),330,SinkNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, virtualinvoke targetSession.<io.moquette.spi.ClientSession: void activate()>(), 330))), List(Node(<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>,$stack1 = this.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String clientId>,50,SourceNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, valid = virtualinvoke clientSession.<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>(newSubscription), 740) => (<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>, $stack9 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 99)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,$stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, $stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,targetSession := @parameter0: io.moquette.spi.ClientSession,-1,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723)) => Node(<io.moquette.spi.ClientSession: void activate()>,this := @this: io.moquette.spi.ClientSession,-1,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, virtualinvoke targetSession.<io.moquette.spi.ClientSession: void activate()>(), 330)) => Node(<io.moquette.spi.ClientSession: void activate()>,this.<io.moquette.spi.ClientSession: boolean active> = 1,158,SinkNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, virtualinvoke targetSession.<io.moquette.spi.ClientSession: void activate()>(), 330) => (<io.moquette.spi.ClientSession: void activate()>, this.<io.moquette.spi.ClientSession: boolean active> = 1, 158)))]
Visited methods: 58
 Analysis results
----------------------------
 Number of conflicts: 4
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/moquette/3085ee54d8ec8ff1fdce167c698af7064fc3052f/original-without-dependencies/moquette-broker-0.9-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,66700
Time to perform PDG 0,46600
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/moquette/3085ee54d8ec8ff1fdce167c698af7064fc3052f/original-without-dependencies/moquette-broker-0.9-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,63500
Time to perform PDG 0,53500
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
